<?xml version="1.0" encoding="UTF-8"?>
<doc>
  <operatorsCategories>
    <category id="Iterator operators" />
    <category id="Graphs-related operators" />
    <category id="Path-related operators" />
    <category id="Statistical operators" />
    <category id="Spatial operators" />
    <category id="Spatial transformations operators" />
    <category id="Map comparaison operators" />
    <category id="Water level operators" />
    <category id="EDP-related operators" />
    <category id="OpenGIS" />
    <category id="Driving operators" />
    <category id="BDI" />
    <category id="FIPA-related operators" />
    <category id="Distributions" />
    <category id="DescriptiveStatistics" />
    <category id="GammaFunction" />
    <category id="Points-related operators" />
    <category id="Random operators" />
    <category id="Comparison operators" />
    <category id="Color-related operators" />
    <category id="System" />
    <category id="Arithmetic operators" />
    <category id="Containers-related operators" />
    <category id="Casting operators" />
    <category id="Matrix-related operators" />
    <category id="Map-related operators" />
    <category id="Spatial queries operators" />
    <category id="Shape" />
    <category id="3D" />
    <category id="Logical operators" />
    <category id="Strings-related operators" />
    <category id="Time-related operators" />
    <category id="Files-related operators" />
    <category id="Species-related operators" />
    <category id="Spatial relations operators" />
    <category id="Spatial statistical operators" />
    <category id="multicriteria operators" />
    <category id="List-related operators" />
    <category id="Spatial properties operators" />
    <category id="Grid-related operators" />
    <category id="User control operators" />
    <category id="Types-related operators" />
  </operatorsCategories>
  <operators>
    <operator alphabetOrder="ak" id="CPU_path_between" name="CPU_path_between" projectName="ummisco.gama.gpu">
      <operatorCategories>
        <category id="Graphs-related operators" />
        <category id="Path-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ssps/operators/GPUGraphOperators.java" contentType="-20" returnType="path" type="-13">
          <operand name="graph" position="0" type="graph" />
          <operand name="source" position="1" type="geometry" />
          <operand name="target" position="2" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>The shortest path between a list of two objects in a graph computed with CPU</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="my_graph CPU_path_between (ag1:: ag2)" equals="A path between ag1 and ag2" isExecutable="false" isTestOnly="false" test="false" type="path" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="GPU_path_between" name="GPU_path_between" projectName="ummisco.gama.gpu">
      <operatorCategories>
        <category id="Graphs-related operators" />
        <category id="Path-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ssps/operators/GPUGraphOperators.java" contentType="-20" returnType="path" type="-13">
          <operand name="graph" position="0" type="graph" />
          <operand name="source" position="1" type="geometry" />
          <operand name="target" position="2" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>The shortest path between a list of two objects in a graph computed with GPU</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="my_graph GPU_path_between (ag1:: ag2)" equals="A path between ag1 and ag2" isExecutable="false" isTestOnly="false" test="false" type="path" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="clustering_farthestFirst" name="clustering_farthestFirst" projectName="idees.gama.weka">
      <operatorCategories>
        <category id="Statistical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="idees/gama/operators/Clustering.java" contentType="5" returnType="list&lt;list&lt;agent&gt;&gt;" type="-13">
          <operand name="agents" position="0" type="???" />
          <operand name="attributes" position="1" type="msi.gama.util.IList&lt;java.lang.String&gt;" />
          <operand name="parameters" position="2" type="map&lt;string,unknown&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of agent groups clustered by Farthest First Algorithm based on the given attributes. Some paremeters can be defined: num_clusters: the number of clusters</result>
        <seeAlso>
          <see id="clustering_xmeans" />
          <see id="clustering_simple_kmeans" />
          <see id="clustering_em" />
          <see id="clustering_DBScan" />
          <see id="clustering_cobweb" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="clustering_farthestFirst([ag1, ag2, ag3, ag4, ag5],[&quot;size&quot;,&quot;age&quot;, &quot;weight&quot;],[&quot;num_clusters&quot;::3])" equals="for example, can return [[ag1, ag3], [ag2], [ag4, ag5]]" isExecutable="false" isTestOnly="false" test="false" type="list&lt;list&lt;agent&gt;&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="clustering_xmeans" name="clustering_xmeans" projectName="idees.gama.weka">
      <operatorCategories>
        <category id="Statistical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="idees/gama/operators/Clustering.java" contentType="5" returnType="list&lt;list&lt;agent&gt;&gt;" type="-13">
          <operand name="agents" position="0" type="???" />
          <operand name="attributes" position="1" type="msi.gama.util.IList&lt;java.lang.String&gt;" />
          <operand name="parameters" position="2" type="map&lt;string,unknown&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of agent groups clustered by X-Means Algorithm based on the given attributes. Some paremeters can be defined: bin_value: value given for true value of boolean attributes; cut_off_factor: the cut-off factor to use;distance_f: The distance function to use. 4 possible distance functions: euclidean (by default) ; 'chebyshev', 'manhattan' or 'levenshtein'; max_iterations: the maximum number of iterations to perform; max_kmeans: the maximum number of iterations to perform in KMeans; max_kmeans_for_children: the maximum number of iterations KMeans that is performed on the child centers;max_num_clusters: the maximum number of clusters; min_num_clusters: the minimal number of clusters</result>
        <seeAlso>
          <see id="clustering_simple_kmeans" />
          <see id="clustering_em" />
          <see id="clustering_farthestFirst" />
          <see id="clustering_DBScan" />
          <see id="clustering_cobweb" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="clustering_xmeans([ag1, ag2, ag3, ag4, ag5],[&quot;size&quot;,&quot;age&quot;, &quot;weight&quot;, &quot;is_male&quot;],[&quot;bin_value&quot;::1.0, &quot;distance_f&quot;::&quot;manhattan&quot;, &quot;max_num_clusters&quot;::10, &quot;min_num_clusters&quot;::2])" equals="for example, can return [[ag1, ag3], [ag2], [ag4, ag5]]" isExecutable="false" isTestOnly="false" test="false" type="list&lt;list&lt;agent&gt;&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="clustering_cobweb" name="clustering_cobweb" projectName="idees.gama.weka">
      <operatorCategories>
        <category id="Statistical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="idees/gama/operators/Clustering.java" contentType="5" returnType="list&lt;list&lt;agent&gt;&gt;" type="-13">
          <operand name="agents" position="0" type="???" />
          <operand name="attributes" position="1" type="msi.gama.util.IList&lt;java.lang.String&gt;" />
          <operand name="parameters" position="2" type="map&lt;string,unknown&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of agent groups clusteredby CobWeb Algorithm based on the given attributes. Some paremeters can be defined: acuity: minimum standard deviation for numeric attributes; cutoff: category utility threshold by which to prune nodes seed</result>
        <seeAlso>
          <see id="clustering_xmeans" />
          <see id="clustering_em" />
          <see id="clustering_farthestFirst" />
          <see id="clustering_simple_kmeans" />
          <see id="clustering_cobweb" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="clustering_cobweb([ag1, ag2, ag3, ag4, ag5],[&quot;size&quot;,&quot;age&quot;, &quot;weight&quot;],[&quot;acuity&quot;::3.0, &quot;cutoff&quot;::0.5)" equals="for example, can return [[ag1, ag3], [ag2], [ag4, ag5]]" isExecutable="false" isTestOnly="false" test="false" type="list&lt;list&lt;agent&gt;&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="clustering_simple_kmeans" name="clustering_simple_kmeans" projectName="idees.gama.weka">
      <operatorCategories>
        <category id="Statistical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="idees/gama/operators/Clustering.java" contentType="5" returnType="list&lt;list&lt;agent&gt;&gt;" type="-13">
          <operand name="agents" position="0" type="???" />
          <operand name="attributes" position="1" type="msi.gama.util.IList&lt;java.lang.String&gt;" />
          <operand name="parameters" position="2" type="map&lt;string,unknown&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of agent groups clustered by K-Means Algorithm based on the given attributes. Some paremeters can be defined: distance_f: The distance function to use. 4 possible distance functions: euclidean (by default) ; 'chebyshev', 'manhattan' or 'levenshtein'; dont_replace_missing_values: if false, replace missing values globally with mean/mode; max_iterations: the maximum number of iterations to perform;num_clusters: the number of clusters</result>
        <seeAlso>
          <see id="clustering_xmeans" />
          <see id="clustering_em" />
          <see id="clustering_farthestFirst" />
          <see id="clustering_DBScan" />
          <see id="clustering_cobweb" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="clustering_simple_kmeans([ag1, ag2, ag3, ag4, ag5],[&quot;size&quot;,&quot;age&quot;, &quot;weight&quot;],[&quot;distance_f&quot;::&quot;manhattan&quot;, &quot;num_clusters&quot;::3])" equals="for example, can return [[ag1, ag3], [ag2], [ag4, ag5]]" isExecutable="false" isTestOnly="false" test="false" type="list&lt;list&lt;agent&gt;&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="clustering_em" name="clustering_em" projectName="idees.gama.weka">
      <operatorCategories>
        <category id="Statistical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="idees/gama/operators/Clustering.java" contentType="5" returnType="list&lt;list&lt;agent&gt;&gt;" type="-13">
          <operand name="agents" position="0" type="???" />
          <operand name="attributes" position="1" type="msi.gama.util.IList&lt;java.lang.String&gt;" />
          <operand name="parameters" position="2" type="map&lt;string,unknown&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of agent groups clustered by EM Algorithm based on the given attributes. Some paremeters can be defined: max_iterations: the maximum number of iterations to perform;num_clusters: the number of clusters; minStdDev: minimum allowable standard deviation</result>
        <seeAlso>
          <see id="clustering_xmeans" />
          <see id="clustering_simple_kmeans" />
          <see id="clustering_farthestFirst" />
          <see id="clustering_DBScan" />
          <see id="clustering_cobweb" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="clustering_em([ag1, ag2, ag3, ag4, ag5],[&quot;size&quot;,&quot;age&quot;, &quot;weight&quot;],[&quot;max_iterations&quot;::10, &quot;num_clusters&quot;::3])" equals="for example, can return [[ag1, ag3], [ag2], [ag4, ag5]]" isExecutable="false" isTestOnly="false" test="false" type="list&lt;list&lt;agent&gt;&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="clustering_DBScan" name="clustering_DBScan" projectName="idees.gama.weka">
      <operatorCategories>
        <category id="Statistical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="idees/gama/operators/Clustering.java" contentType="5" returnType="list&lt;list&lt;agent&gt;&gt;" type="-13">
          <operand name="agents" position="0" type="???" />
          <operand name="attributes" position="1" type="msi.gama.util.IList&lt;java.lang.String&gt;" />
          <operand name="parameters" position="2" type="map&lt;string,unknown&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of agent groups clustered by DBScan Algorithm based on the given attributes. Some paremeters can be defined: distance_f: The distance function to use for instances comparison (euclidean or manhattan); min_points: minimun number of DataObjects required in an epsilon-range-queryepsilon: epsilon -- radius of the epsilon-range-queries</result>
        <seeAlso>
          <see id="clustering_xmeans" />
          <see id="clustering_em" />
          <see id="clustering_farthestFirst" />
          <see id="clustering_simple_kmeans" />
          <see id="clustering_cobweb" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="clustering_DBScan([ag1, ag2, ag3, ag4, ag5],[&quot;size&quot;,&quot;age&quot;, &quot;weight&quot;],[&quot;distance_f&quot;::&quot;manhattan&quot;])" equals="for example, can return [[ag1, ag3], [ag2], [ag4, ag5]]" isExecutable="false" isTestOnly="false" test="false" type="list&lt;list&lt;agent&gt;&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="IDW" name="IDW" projectName="idees.gaml.extensions.spatialoperators">
      <operatorCategories>
        <category id="Spatial operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="idees/gaml/operators/Spatial.java" contentType="-13" returnType="msi.gama.util.GamaMap&lt;msi.gama.metamodel.shape.IShape,java.lang.Double&gt;" type="-13">
          <operand name="geometries" position="0" type="msi.gama.util.IContainer&lt;?,? extends msi.gama.metamodel.shape.IShape&gt;" />
          <operand name="points" position="1" type="msi.gama.util.GamaMap&lt;msi.gama.metamodel.shape.GamaPoint,java.lang.Double&gt;" />
          <operand name="power" position="2" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Inverse Distance Weighting (IDW) is a type of deterministic method for multivariate interpolation with a known scattered set of points. The assigned values to each geometry are calculated with a weighted average of the values available at the known points. See: http://en.wikipedia.org/wiki/Inverse_distance_weighting Usage: IDW (list of geometries, map of points (key: point, value: value), power parameter)</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="IDW([ag1, ag2, ag3, ag4, ag5],[{10,10}::25.0, {10,80}::10.0, {100,10}::15.0], 2)" equals="for example, can return [ag1::12.0, ag2::23.0,ag3::12.0,ag4::14.0,ag5::17.0]" isExecutable="false" isTestOnly="false" test="false" type="msi.gama.util.GamaMap&lt;msi.gama.metamodel.shape.IShape,java.lang.Double&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="CRS_transform" name="CRS_transform" projectName="idees.gaml.extensions.spatialoperators">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="idees/gaml/operators/Projection.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
        </operands>
        <operands class="idees/gaml/operators/Projection.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="code" position="1" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result />
        <usages>
          <usage descUsageElt="returns the geometry corresponding to the transfomartion of the given geometry by the current CRS (Coordinate Reference System), the one corresponding to the world's agent one">
            <examples>
              <example code="CRS_transform(shape)" equals="a geometry corresponding to the agent geometry transformed into the current CRS" isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage descUsageElt="returns the geometry corresponding to the transfomartion of the given geometry by the left operand CRS (Coordinate Reference System)">
            <examples>
              <example code="shape CRS_transform(&quot;EPSG:4326&quot;)" equals="a geometry corresponding to the agent geometry transformed into the EPSG:4326 CRS" isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="to_GAMA_CRS" name="to_GAMA_CRS" projectName="idees.gaml.extensions.spatialoperators">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="idees/gaml/operators/Projection.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="code" position="1" type="string" />
        </operands>
        <operands class="idees/gaml/operators/Projection.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result />
        <usages>
          <usage descUsageElt="returns the geometry corresponding to the transfomartion of the given geometry to the GAMA CRS (Coordinate Reference System) assuming the given geometry is referenced by given CRS">
            <examples>
              <example code="to_GAMA_CRS({121,14}, &quot;EPSG:4326&quot;)" equals="a geometry corresponding to the agent geometry transformed into the GAMA CRS" isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage descUsageElt="returns the geometry corresponding to the transfomartion of the given geometry to the GAMA CRS (Coordinate Reference System) assuming the given geometry is referenced by the current CRS, the one corresponding to the world's agent one">
            <examples>
              <example code="to_GAMA_CRS({121,14})" equals="a geometry corresponding to the agent geometry transformed into the GAMA CRS" isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="percent_absolute_deviation" name="percent_absolute_deviation" projectName="idees.gama.mapcomparison">
      <operatorCategories>
        <category id="Map comparaison operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="idees/gama/operators/MapComparison.java" contentType="2" returnType="float" type="-13">
          <operand name="vals1" position="0" type="list&lt;float&gt;" />
          <operand name="vals2" position="1" type="list&lt;float&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>percent absolute deviation indicator for 2 series of values: percent_absolute_deviation(list_vals_observe,list_vals_sim)</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="percent_absolute_deviation([200,300,150,150,200],[250,250,100,200,200])" isExecutable="false" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="kappa_sim" name="kappa_sim" projectName="idees.gama.mapcomparison">
      <operatorCategories>
        <category id="Map comparaison operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="idees/gama/operators/MapComparison.java" contentType="2" returnType="float" type="-13">
          <operand name="valsInit" position="0" type="list" />
          <operand name="valsObs" position="1" type="list" />
          <operand name="valsSim" position="2" type="list" />
          <operand name="categories" position="3" type="list" />
        </operands>
        <operands class="idees/gama/operators/MapComparison.java" contentType="2" returnType="float" type="-13">
          <operand name="valsInit" position="0" type="list" />
          <operand name="valsObs" position="1" type="list" />
          <operand name="valsSim" position="2" type="list" />
          <operand name="categories" position="3" type="list" />
          <operand name="weights" position="4" type="list" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>kappa simulation indicator for 2 map comparisons: kappa(list_valsInits,list_valsObs,list_valsSim, categories). Reference: van Vliet, J., Bregt, A.K. &amp; Hagen-Zanker, A. (2011). Revisiting Kappa to account for change in the accuracy assessment of land-use change models, Ecological Modelling 222(8).kappa simulation indicator for 2 map comparisons: kappa(list_valsInits,list_valsObs,list_valsSim, categories, weights). Reference: van Vliet, J., Bregt, A.K. &amp; Hagen-Zanker, A. (2011). Revisiting Kappa to account for change in the accuracy assessment of land-use change models, Ecological Modelling 222(8)</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="kappa([cat1,cat1,cat2,cat2,cat2],[cat2,cat1,cat2,cat1,cat3],[cat2,cat1,cat2,cat3,cat3], [cat1,cat2,cat3])" isExecutable="false" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="kappa([cat1,cat1,cat2,cat2,cat2],[cat2,cat1,cat2,cat1,cat3],[cat2,cat1,cat2,cat3,cat3], [cat1,cat2,cat3],[1.0, 2.0, 3.0, 1.0, 5.0])" isExecutable="false" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="kappa" name="kappa" projectName="idees.gama.mapcomparison">
      <operatorCategories>
        <category id="Map comparaison operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="idees/gama/operators/MapComparison.java" contentType="2" returnType="float" type="-13">
          <operand name="vals1" position="0" type="list" />
          <operand name="vals2" position="1" type="list" />
          <operand name="categories" position="2" type="list" />
        </operands>
        <operands class="idees/gama/operators/MapComparison.java" contentType="2" returnType="float" type="-13">
          <operand name="vals1" position="0" type="list" />
          <operand name="vals2" position="1" type="list" />
          <operand name="categories" position="2" type="list" />
          <operand name="weights" position="3" type="list" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>kappa indicator for 2 map comparisons: kappa(list_vals1,list_vals2,categories). Reference: Cohen, J. A coefficient of agreement for nominal scales. Educ. Psychol. Meas. 1960, 20.kappa indicator for 2 map comparisons: kappa(list_vals1,list_vals2,categories, weights). Reference: Cohen, J. A coefficient of agreement for nominal scales. Educ. Psychol. Meas. 1960, 20.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="kappa([cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2],[cat1,cat2,cat3])" isExecutable="false" isTestOnly="false" test="false" type="float" />
              <example code="kappa([1,3,5,1,5],[1,1,1,1,5],[1,3,5])" equals="the similarity between 0 and 1" isExecutable="true" isTestOnly="false" test="false" type="float" />
              <example code="kappa([1,1,1,1,5],[1,1,1,1,5],[1,3,5])" equals="1.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="kappa([cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2],[cat1,cat2,cat3], [1.0, 2.0, 3.0, 1.0, 5.0])" isExecutable="false" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="fuzzy_kappa" name="fuzzy_kappa" projectName="idees.gama.mapcomparison">
      <operatorCategories>
        <category id="Map comparaison operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="idees/gama/operators/MapComparison.java" contentType="2" returnType="float" type="-13">
          <operand name="agents" position="0" type="???" />
          <operand name="vals1" position="1" type="list" />
          <operand name="vals2" position="2" type="list" />
          <operand name="similarities" position="3" type="list&lt;float&gt;" />
          <operand name="categories" position="4" type="list" />
          <operand name="fuzzycategories" position="5" type="matrix&lt;float&gt;" />
          <operand name="distance" position="6" type="float" />
          <operand name="weights" position="7" type="list" />
        </operands>
        <operands class="idees/gama/operators/MapComparison.java" contentType="2" returnType="float" type="-13">
          <operand name="agents" position="0" type="???" />
          <operand name="vals1" position="1" type="list" />
          <operand name="vals2" position="2" type="list" />
          <operand name="similarities" position="3" type="list&lt;float&gt;" />
          <operand name="categories" position="4" type="list" />
          <operand name="fuzzycategories" position="5" type="matrix&lt;float&gt;" />
          <operand name="distance" position="6" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>fuzzy kappa indicator for 2 map comparisons: fuzzy_kappa(agents_list,list_vals1,list_vals2, output_similarity_per_agents,categories,fuzzy_categories_matrix, fuzzy_distance, weights). Reference: Visser, H., and T. de Nijs, 2006. The map comparison kit, Environmental Modelling &amp; Software, 21fuzzy kappa indicator for 2 map comparisons: fuzzy_kappa(agents_list,list_vals1,list_vals2, output_similarity_per_agents,categories,fuzzy_categories_matrix, fuzzy_distance). Reference: Visser, H., and T. de Nijs, 2006. The map comparison kit, Environmental Modelling &amp; Software, 21</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="fuzzy_kappa([ag1, ag2, ag3, ag4, ag5],[cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0],[0,1,0],[0,0,1]], 2, [1.0,3.0,2.0,2.0,4.0])" isExecutable="false" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="fuzzy_kappa([ag1, ag2, ag3, ag4, ag5],[cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0],[0,1,0],[0,0,1]], 2)" isExecutable="false" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="fuzzy_kappa_sim" name="fuzzy_kappa_sim" projectName="idees.gama.mapcomparison">
      <operatorCategories>
        <category id="Map comparaison operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="idees/gama/operators/MapComparison.java" contentType="2" returnType="float" type="-13">
          <operand name="agents" position="0" type="???" />
          <operand name="valsInit" position="1" type="list" />
          <operand name="valsObs" position="2" type="list" />
          <operand name="valsSim" position="3" type="list" />
          <operand name="similarities" position="4" type="list&lt;float&gt;" />
          <operand name="categories" position="5" type="list" />
          <operand name="fuzzytransitions" position="6" type="matrix&lt;float&gt;" />
          <operand name="distance" position="7" type="float" />
        </operands>
        <operands class="idees/gama/operators/MapComparison.java" contentType="2" returnType="float" type="-13">
          <operand name="agents" position="0" type="???" />
          <operand name="valsInit" position="1" type="list" />
          <operand name="valsObs" position="2" type="list" />
          <operand name="valsSim" position="3" type="list" />
          <operand name="similarities" position="4" type="list&lt;float&gt;" />
          <operand name="categories" position="5" type="list" />
          <operand name="fuzzytransitions" position="6" type="matrix&lt;float&gt;" />
          <operand name="distance" position="7" type="float" />
          <operand name="weights" position="8" type="list" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>fuzzy kappa simulation indicator for 2 map comparisons: fuzzy_kappa_sim(agents_list,list_vals1,list_vals2, output_similarity_per_agents,fuzzy_transitions_matrix, fuzzy_distance). Reference: Jasper van Vliet, Alex Hagen-Zanker, Jelle Hurkens, Hedwig van Delden, A fuzzy set approach to assess the predictive accuracy of land use simulations, Ecological Modelling, 24 July 2013, Pages 32-42, ISSN 0304-3800, fuzzy kappa simulation indicator for 2 map comparisons: fuzzy_kappa_sim(agents_list,list_vals1,list_vals2, output_similarity_per_agents,fuzzy_transitions_matrix, fuzzy_distance, weights). Reference: Jasper van Vliet, Alex Hagen-Zanker, Jelle Hurkens, Hedwig van Delden, A fuzzy set approach to assess the predictive accuracy of land use simulations, Ecological Modelling, 24 July 2013, Pages 32-42, ISSN 0304-3800,</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="fuzzy_kappa_sim([ag1, ag2, ag3, ag4, ag5], [cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1]], 2)" isExecutable="false" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="fuzzy_kappa_sim([ag1, ag2, ag3, ag4, ag5], [cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1]], 2,[1.0,3.0,2.0,2.0,4.0])" isExecutable="false" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="water_level_for" name="water_level_for" projectName="cenres.gaml.extensions.hydro">
      <operatorCategories>
        <category id="Water level operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="cenres/gaml/extensions/hydro/operators/WaterLevel.java" contentType="-13" returnType="float" type="-13">
          <operand name="shape" position="0" type="geometry" />
          <operand name="val" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result />
        <usagesExamples>
          <usage>
            <examples>
              <example code="waterlevel &lt;- my_river_polyline water_level_for my_area_value" isExecutable="false" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left operand is a polyline and the right operand a float for the area, returrns the y coordinate of the water (water level)" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="water_polylines_for" name="water_polylines_for" projectName="cenres.gaml.extensions.hydro">
      <operatorCategories>
        <category id="Water level operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="cenres/gaml/extensions/hydro/operators/WaterLevel.java" contentType="-13" returnType="msi.gama.util.IList&lt;msi.gama.util.IList&lt;msi.gama.metamodel.shape.GamaPoint&gt;&gt;" type="-13">
          <operand name="shape" position="0" type="geometry" />
          <operand name="val" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result />
        <usagesExamples>
          <usage>
            <examples>
              <example code="waterarea &lt;- my_river_polyline water_area_for my_height_value" isExecutable="false" isTestOnly="false" test="false" type="msi.gama.util.IList&lt;msi.gama.util.IList&lt;msi.gama.metamodel.shape.GamaPoint&gt;&gt;" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left operand is a polyline and the right operand a float for the water y coordinate, returrns the shapes of the river sections (list of list of points)" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="water_area_for" name="water_area_for" projectName="cenres.gaml.extensions.hydro">
      <operatorCategories>
        <category id="Water level operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="cenres/gaml/extensions/hydro/operators/WaterLevel.java" contentType="-13" returnType="float" type="-13">
          <operand name="shape" position="0" type="geometry" />
          <operand name="val" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result />
        <usagesExamples>
          <usage>
            <examples>
              <example code="waterarea &lt;- my_river_polyline water_area_for my_height_value" isExecutable="false" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left operand is a polyline and the right operand a float for the water y coordinate, returrns the area of the water (water flow area)" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="is_obj" name="is_obj" projectName="ummisco.gama.opengl">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco.gama.opengl.files.GamaObjFile" contentType="" returnType="bool" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Tests whether the operand is a obj file.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="obj_file" name="obj_file" projectName="ummisco.gama.opengl">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco.gama.opengl.files.GamaObjFile" contentType="" returnType="file" type="">
          <operand name="val" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Constructs a file of type obj. Allowed extensions are limited to obj</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="is_threeds" name="is_threeds" projectName="ummisco.gama.opengl">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco.gama.opengl.files.Gama3DSFile" contentType="" returnType="bool" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Tests whether the operand is a threeds file.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="threeds_file" name="threeds_file" projectName="ummisco.gama.opengl">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco.gama.opengl.files.Gama3DSFile" contentType="" returnType="file" type="">
          <operand name="val" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Constructs a file of type threeds. Allowed extensions are limited to 3ds, max</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="diff" name="diff" projectName="ummisco.gaml.extensions.maths">
      <operatorCategories>
        <category id="EDP-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/maths/ode/statements/SingleEquationStatement.java" contentType="-13" returnType="float" type="-13">
          <operand name="var" position="0" type="float" />
          <operand name="time" position="1" type="float" />
        </operands>
      </combinaisonIO>
    </operator>
    <operator alphabetOrder="ak" id="internal_zero_order_equation" name="internal_zero_order_equation" projectName="ummisco.gaml.extensions.maths">
      <operatorCategories>
        <category id="EDP-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/maths/ode/statements/SingleEquationStatement.java" contentType="-13" returnType="float" type="-13">
          <operand name="var" position="0" type="any expression" />
        </operands>
      </combinaisonIO>
    </operator>
    <operator alphabetOrder="ak" id="diff2" name="diff2" projectName="ummisco.gaml.extensions.maths">
      <operatorCategories>
        <category id="EDP-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/maths/ode/statements/SingleEquationStatement.java" contentType="-13" returnType="float" type="-13">
          <operand name="var" position="0" type="float" />
          <operand name="time" position="1" type="float" />
        </operands>
      </combinaisonIO>
    </operator>
    <operator alphabetOrder="ak" id="gml_from_wfs" name="gml_from_wfs" projectName="dream.gama.opengis">
      <operatorCategories>
        <category id="OpenGIS" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="dream/gama/opengis/operators/OpenGIS.java" contentType="-13" returnType="msi.gama.util.IList&lt;msi.gama.util.IList&lt;java.lang.Object&gt;&gt;" type="-13">
          <operand name="fakeFile" position="0" type="string" />
          <operand name="schemaLink" position="1" type="string" />
          <operand name="gmlLink" position="2" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>WMS: A simple call to WFS/GML2</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="read_json_rest" name="read_json_rest" projectName="dream.gama.opengis">
      <operatorCategories>
        <category id="OpenGIS" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="dream/gama/opengis/operators/OpenGIS.java" contentType="-13" returnType="msi.gama.util.IList&lt;msi.gama.util.IList&lt;java.lang.Object&gt;&gt;" type="-13">
          <operand name="fakeFile" position="0" type="string" />
          <operand name="restLink" position="1" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>REST: Read data from RESTService</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="image_from_direct_wms" name="image_from_direct_wms" projectName="dream.gama.opengis">
      <operatorCategories>
        <category id="OpenGIS" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="dream/gama/opengis/operators/OpenGIS.java" contentType="-13" returnType="file" type="-13">
          <operand name="fakeFile" position="0" type="string" />
          <operand name="slink" position="1" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>WMS: A simple call to WMS</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="image_from_wms" name="image_from_wms" projectName="dream.gama.opengis">
      <operatorCategories>
        <category id="OpenGIS" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="dream/gama/opengis/operators/OpenGIS.java" contentType="-13" returnType="file" type="-13">
          <operand name="fakeFile" position="0" type="string" />
          <operand name="slink" position="1" type="string" />
          <operand name="epsg" position="2" type="int" />
          <operand name="width" position="3" type="int" />
          <operand name="height" position="4" type="int" />
          <operand name="bbox1" position="5" type="float" />
          <operand name="bbox2" position="6" type="float" />
          <operand name="bbox3" position="7" type="float" />
          <operand name="bbox4" position="8" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>WMS: A simple call to WMS</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="as_driving_graph" name="as_driving_graph" projectName="simtools.gaml.extensions.traffic">
      <operatorCategories>
        <category id="Driving operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="simtools/gaml/extensions/traffic/DrivingOperators.java" contentType="-19" returnType="graph" type="-13">
          <operand name="edges" position="0" type="container" />
          <operand name="nodes" position="1" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>creates a graph from the list/map of edges given as operand and connect the node to the edge</result>
        <seeAlso>
          <see id="as_intersection_graph" />
          <see id="as_distance_graph" />
          <see id="as_edge_graph" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="as_driving_graph(road,node)  --:  build a graph while using the road agents as edges and the node agents as nodes" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="with_priority" name="with_priority" projectName="msi.gaml.architecture.simplebdi">
      <operatorCategories>
        <category id="BDI" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/architecture/simplebdi/Operators.java" contentType="-13" returnType="msi.gaml.architecture.simplebdi.Predicate" type="-13">
          <operand name="predicate" position="0" type="msi.gaml.architecture.simplebdi.Predicate" />
          <operand name="priority" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>change the priority of the given predicate</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="predicate with_priority 2" isExecutable="true" isTestOnly="false" test="false" type="msi.gaml.architecture.simplebdi.Predicate" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="with_values" name="with_values" projectName="msi.gaml.architecture.simplebdi">
      <operatorCategories>
        <category id="BDI" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/architecture/simplebdi/Operators.java" contentType="-13" returnType="msi.gaml.architecture.simplebdi.Predicate" type="-13">
          <operand name="predicate" position="0" type="msi.gaml.architecture.simplebdi.Predicate" />
          <operand name="values" position="1" type="map" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>change the parameters of the given predicate</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="predicate with_parameter [&quot;time&quot;::10]" isExecutable="true" isTestOnly="false" test="false" type="msi.gaml.architecture.simplebdi.Predicate" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="new_predicate" name="new_predicate" projectName="msi.gaml.architecture.simplebdi">
      <operatorCategories>
        <category id="BDI" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/architecture/simplebdi/Operators.java" contentType="-13" returnType="msi.gaml.architecture.simplebdi.Predicate" type="-13">
          <operand name="name" position="0" type="string" />
          <operand name="values" position="1" type="map" />
          <operand name="priority" position="2" type="float" />
        </operands>
        <operands class="msi/gaml/architecture/simplebdi/Operators.java" contentType="-13" returnType="msi.gaml.architecture.simplebdi.Predicate" type="-13">
          <operand name="name" position="0" type="string" />
        </operands>
        <operands class="msi/gaml/architecture/simplebdi/Operators.java" contentType="-13" returnType="msi.gaml.architecture.simplebdi.Predicate" type="-13">
          <operand name="name" position="0" type="string" />
          <operand name="values" position="1" type="map" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>a new predicate with the given properties (name, values)a new predicate with the given properties (name)a new predicate with the given properties (name, values)</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="predicate(&quot;people to meet&quot;, people1, [&quot;time&quot;::10])" isExecutable="true" isTestOnly="false" test="false" type="msi.gaml.architecture.simplebdi.Predicate" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="predicate(&quot;people to meet&quot;)" isExecutable="true" isTestOnly="false" test="false" type="msi.gaml.architecture.simplebdi.Predicate" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="predicate(&quot;people to meet&quot;, people1 )" isExecutable="true" isTestOnly="false" test="false" type="msi.gaml.architecture.simplebdi.Predicate" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="and" name="and" projectName="msi.gaml.architecture.simplebdi">
      <operatorCategories>
        <category id="BDI" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/architecture/simplebdi/Operators.java" contentType="-13" returnType="msi.gaml.architecture.simplebdi.Predicate" type="-13">
          <operand name="pred1" position="0" type="msi.gaml.architecture.simplebdi.Predicate" />
          <operand name="pred2" position="1" type="msi.gaml.architecture.simplebdi.Predicate" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>create a new predicate from two others by including them as subintentions</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="predicate1 and predicate2" isExecutable="true" isTestOnly="false" test="false" type="msi.gaml.architecture.simplebdi.Predicate" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="predicate" name="predicate" projectName="msi.gaml.architecture.simplebdi">
      <operatorCategories>
        <category id="Types-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gaml.architecture.simplebdi.PredicateType" contentType="" returnType="predicate" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Casts the operand into the type predicate</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="message" name="message" projectName="msi.gaml.extensions.fipa">
      <operatorCategories>
        <category id="FIPA-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/extensions/fipa/MessageType.java" contentType="-13" returnType="msi.gaml.extensions.fipa.Message" type="-13">
          <operand name="val" position="0" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>to be added</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="conversation" name="conversation" projectName="msi.gaml.extensions.fipa">
      <operatorCategories>
        <category id="FIPA-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/extensions/fipa/ConversationType.java" contentType="-13" returnType="msi.gaml.extensions.fipa.Conversation" type="-13">
          <operand name="val" position="0" type="unknown" />
        </operands>
      </combinaisonIO>
    </operator>
    <operator alphabetOrder="lz" id="pValue_for_tStat" name="pValue_for_tStat" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="Distributions" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/Distributions.java" contentType="-13" returnType="float" type="2">
          <operand name="tstat" position="0" type="float" />
          <operand name="df" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the P value of the T statistic tstat with df degrees of freedom. This is a two-tailed test so we just double the right tail which is given by studentT of -|tstat|.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="student_area" name="student_area" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="Distributions" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/Distributions.java" contentType="-13" returnType="float" type="2">
          <operand name="x" position="0" type="float" />
          <operand name="df" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the area to the left of x in the Student T distribution with the given degrees of freedom.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="log_gamma" id="lgamma" name="lgamma" projectName="ummisco.gaml.extensions.stats">
      <operatorsCategories>
        <category id="GammaFunction" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="log_gamma" name="log_gamma" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="GammaFunction" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/GammaFunction.java" contentType="-13" returnType="float" type="2">
          <operand name="x" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the log of the value of the Gamma function at x.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="incomplete_gamma_complement" name="incomplete_gamma_complement" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="GammaFunction" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/GammaFunction.java" contentType="-13" returnType="float" type="2">
          <operand name="a" position="0" type="float" />
          <operand name="x" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the complemented regularized incomplete Gamma function of the argument a and integration start point x.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="rms" name="rms" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="DescriptiveStatistics" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/DescriptiveStatistics.java" contentType="-13" returnType="float" type="2">
          <operand name="size" position="0" type="int" />
          <operand name="sumOfSquares" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the RMS (Root-Mean-Square) of a data sequence. The RMS of data sequence is the square-root of the mean of the squares of the elements in the data sequence. It is a measure of the average size of the elements of a data sequence.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="rank_interpolated" name="rank_interpolated" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="DescriptiveStatistics" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/DescriptiveStatistics.java" contentType="-13" returnType="float" type="2">
          <operand name="data" position="0" type="container" />
          <operand name="element" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the linearly interpolated number of elements in a list less or equal to a given element. The rank is the number of elements &lt;= element. Ranks are of the form {0, 1, 2,..., sortedList.size()}. If no element is &lt;= element, then the rank is zero. If the element lies in between two contained elements, then linear interpolation is used and a non integer value is returned.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="student_t_inverse" name="student_t_inverse" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="Distributions" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/Distributions.java" contentType="-13" returnType="float" type="2">
          <operand name="x" position="0" type="float" />
          <operand name="df" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the value, t, for which the area under the Student-t probability density function (integrated from minus infinity to t) is equal to x.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="incomplete_gamma" name="incomplete_gamma" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="GammaFunction" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/GammaFunction.java" contentType="-13" returnType="float" type="2">
          <operand name="a" position="0" type="float" />
          <operand name="x" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the regularized integral of the Gamma function with argument a to the integration end point x.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="beta" name="beta" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="GammaFunction" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/GammaFunction.java" contentType="-13" returnType="float" type="2">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the beta function with arguments a, b.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="moment" name="moment" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="DescriptiveStatistics" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/DescriptiveStatistics.java" contentType="-13" returnType="float" type="2">
          <operand name="data" position="0" type="container" />
          <operand name="k" position="1" type="int" />
          <operand name="c" position="2" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the moment of k-th order with constant c of a data sequence</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="binomial_sum" id="pbinom" name="pbinom" projectName="ummisco.gaml.extensions.stats">
      <operatorsCategories>
        <category id="Distributions" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="ak" id="binomial_sum" name="binomial_sum" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="Distributions" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/Distributions.java" contentType="-13" returnType="float" type="2">
          <operand name="k" position="0" type="int" />
          <operand name="n" position="1" type="int" />
          <operand name="p" position="2" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the sum of the terms 0 through k of the Binomial probability density, where n is the number of trials and p is the probability of success in the range 0 to 1.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="quantile_inverse" id="percentile" name="percentile" projectName="ummisco.gaml.extensions.stats">
      <operatorsCategories>
        <category id="DescriptiveStatistics" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="quantile_inverse" name="quantile_inverse" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="DescriptiveStatistics" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/DescriptiveStatistics.java" contentType="-13" returnType="float" type="2">
          <operand name="data" position="0" type="container" />
          <operand name="element" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns how many percent of the elements contained in the receiver are &lt;= element. Does linear interpolation if the element is not contained but lies in between two contained elements.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="chi_square_complemented" name="chi_square_complemented" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="Distributions" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/Distributions.java" contentType="-13" returnType="float" type="2">
          <operand name="x" position="0" type="float" />
          <operand name="df" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the area under the right hand tail (from x to infinity) of the Chi square probability density function with df degrees of freedom.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="binomial_complemented" name="binomial_complemented" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="Distributions" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/Distributions.java" contentType="-13" returnType="float" type="2">
          <operand name="n" position="0" type="int" />
          <operand name="k" position="1" type="int" />
          <operand name="p" position="2" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the sum of the terms k+1 through n of the Binomial probability density, where n is the number of trials and P is the probability of success in the range 0 to 1.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="covariance" name="covariance" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="DescriptiveStatistics" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/DescriptiveStatistics.java" contentType="-13" returnType="float" type="2">
          <operand name="data1" position="0" type="container" />
          <operand name="data2" position="1" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the covariance of two data sequences</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="binomial_coeff" name="binomial_coeff" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="Distributions" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/Distributions.java" contentType="-13" returnType="float" type="2">
          <operand name="n" position="0" type="int" />
          <operand name="k" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns n choose k as a double. Note the integerization of the double return value.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="variance" name="variance" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="DescriptiveStatistics" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/DescriptiveStatistics.java" contentType="-13" returnType="float" type="2">
          <operand name="standardDeviation" position="0" type="float" />
        </operands>
        <operands class="ummisco/gaml/extensions/stats/Stats2/DescriptiveStatistics.java" contentType="-13" returnType="float" type="2">
          <operand name="size" position="0" type="int" />
          <operand name="sum" position="1" type="float" />
          <operand name="numOfSquares" position="2" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the variance from a standard deviation.Returns the variance of a data sequence. That is (sumOfSquares - mean*sum) / size with mean = sum/size.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="durbin_watson" name="durbin_watson" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="DescriptiveStatistics" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/DescriptiveStatistics.java" contentType="-13" returnType="float" type="2">
          <operand name="data" position="0" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Durbin-Watson computation</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="normal_area" id="pnorm" name="pnorm" projectName="ummisco.gaml.extensions.stats">
      <operatorsCategories>
        <category id="Distributions" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="normal_area" name="normal_area" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="Distributions" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/Distributions.java" contentType="-13" returnType="float" type="2">
          <operand name="x" position="0" type="float" />
          <operand name="mean" position="1" type="float" />
          <operand name="sd" position="2" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the area to the left of x in the normal distribution with the given mean and standard deviation.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="gamma" name="gamma" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="GammaFunction" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/GammaFunction.java" contentType="-13" returnType="float" type="2">
          <operand name="x" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the value of the Gamma function at x.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="pValue_for_fStat" name="pValue_for_fStat" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="Distributions" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/Distributions.java" contentType="-13" returnType="float" type="2">
          <operand name="fstat" position="0" type="float" />
          <operand name="dfn" position="1" type="int" />
          <operand name="dfd" position="2" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the P value of F statistic fstat with numerator degrees of freedom dfn and denominator degress of freedom dfd. Uses the incomplete Beta function.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="gamma_distribution_complemented" name="gamma_distribution_complemented" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="Distributions" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/Distributions.java" contentType="-13" returnType="float" type="2">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="float" />
          <operand name="x" position="2" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the integral from x to infinity of the gamma probability density function.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="correlation" name="correlation" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="DescriptiveStatistics" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/DescriptiveStatistics.java" contentType="-13" returnType="float" type="2">
          <operand name="data1" position="0" type="container" />
          <operand name="data2" position="1" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the correlation of two data sequences</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="normal_inverse" name="normal_inverse" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="Distributions" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/Distributions.java" contentType="-13" returnType="float" type="2">
          <operand name="area" position="0" type="float" />
          <operand name="mean" position="1" type="float" />
          <operand name="sd" position="2" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the x in the normal distribution with the given mean and standard deviation, to the left of which lies the given area. normal.Inverse returns the value in terms of standard deviations from the mean, so we need to adjust it for the given mean and standard deviation.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="kurtosis" name="kurtosis" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="DescriptiveStatistics" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/DescriptiveStatistics.java" contentType="-13" returnType="float" type="2">
          <operand name="data" position="0" type="container" />
        </operands>
        <operands class="ummisco/gaml/extensions/stats/Stats2/DescriptiveStatistics.java" contentType="-13" returnType="float" type="2">
          <operand name="moment4" position="0" type="float" />
          <operand name="standardDeviation" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the kurtosis (aka excess) of a data sequenceReturns the kurtosis (aka excess) of a data sequence</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="skew" name="skew" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="DescriptiveStatistics" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/DescriptiveStatistics.java" contentType="-13" returnType="float" type="2">
          <operand name="data" position="0" type="container" />
        </operands>
        <operands class="ummisco/gaml/extensions/stats/Stats2/DescriptiveStatistics.java" contentType="-13" returnType="float" type="2">
          <operand name="moment3" position="0" type="float" />
          <operand name="standardDeviation" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the skew of a data sequence, which is moment(data,3,mean) / standardDeviation3Returns the skew of a data sequence.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="chi_square" id="pchisq" name="pchisq" projectName="ummisco.gaml.extensions.stats">
      <operatorsCategories>
        <category id="Distributions" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="ak" id="chi_square" name="chi_square" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="Distributions" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/Distributions.java" contentType="-13" returnType="float" type="2">
          <operand name="x" position="0" type="float" />
          <operand name="df" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the area under the left hand tail (from 0 to x) of the Chi square probability density function with df degrees of freedom.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" alternativeNameOf="normal_density" id="dnorm" name="dnorm" projectName="ummisco.gaml.extensions.stats">
      <operatorsCategories>
        <category id="Distributions" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="normal_density" name="normal_density" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="Distributions" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/Distributions.java" contentType="-13" returnType="float" type="2">
          <operand name="x" position="0" type="float" />
          <operand name="mean" position="1" type="float" />
          <operand name="sd" position="2" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the probability of x in the normal distribution with the given mean and standard deviation.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="incomplete_beta" name="incomplete_beta" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="GammaFunction" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/GammaFunction.java" contentType="-13" returnType="float" type="2">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="float" />
          <operand name="x" position="2" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the regularized integral of the beta function with arguments a and b, from zero to x.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="quantile" name="quantile" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="DescriptiveStatistics" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/DescriptiveStatistics.java" contentType="-13" returnType="float" type="2">
          <operand name="data" position="0" type="container" />
          <operand name="phi" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the phi-quantile; that is, an element elem for which holds that phi percent of data elements are less than elem. The quantile need not necessarily be contained in the data sequence, it can be a linear interpolation.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="auto_correlation" name="auto_correlation" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="DescriptiveStatistics" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/DescriptiveStatistics.java" contentType="-13" returnType="float" type="2">
          <operand name="data" position="0" type="container" />
          <operand name="lag" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the auto-correlation of a data sequence</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="gamma_distribution" id="pgamma" name="pgamma" projectName="ummisco.gaml.extensions.stats">
      <operatorsCategories>
        <category id="Distributions" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="ak" id="gamma_distribution" name="gamma_distribution" projectName="ummisco.gaml.extensions.stats">
      <operatorCategories>
        <category id="Distributions" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="ummisco/gaml/extensions/stats/Stats2/Distributions.java" contentType="-13" returnType="float" type="2">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="float" />
          <operand name="x" position="2" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the integral from zero to x of the gamma probability density function.</result>
        <comment>incomplete_gamma(a,x) is equal to pgamma(a,1,x).</comment>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" alternativeNameOf="!=" id="&lt;&gt;" name="&lt;&gt;" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Comparison operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="ak" id="accumulate" name="accumulate" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Iterator operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-25" returnType="list" type="-13">
          <operand name="original" position="0" type="container" />
          <operand name="filter" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns a new flat list, in which each element is the evaluation of the right-hand operand. If this evaluation returns a list, the elements of this result are added directly to the list returned</result>
        <comment>accumulate is dedicated to the application of a same computation on each element of a container (and returns a list). In the right-hand operand, the keyword each can be used to represent, in turn, each of the left-hand operand elements.</comment>
        <seeAlso>
          <see id="collect" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[a1,a2,a3] accumulate (each neighbours_at 10)" equals="a flat list of all the neighbours of these three agents" isExecutable="false" isTestOnly="false" test="false" type="list" />
              <example code="[1,2,4] accumulate ([2,4])" equals="[2,4,2,4,2,4]" isExecutable="true" isTestOnly="false" test="true" type="list&lt;int&gt;" />
              <example code="[1,2,4] accumulate (each * 2)" equals="[2,4,8]" isExecutable="true" isTestOnly="false" test="true" type="list&lt;int&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="count" name="count" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Iterator operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="int" type="-13">
          <operand name="original" position="0" type="container" />
          <operand name="filter" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns an int, equal to the number of elements of the left-hand operand that make the right-hand operand evaluate to true.</result>
        <comment>in the right-hand operand, the keyword each can be used to represent, in turn, each of the elements.</comment>
        <seeAlso>
          <see id="group_by" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[1,2,3,4,5,6,7,8] count (each &gt; 3)" equals="5" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="// Number of nodes of graph g2 without any out edge" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="graph g2 &lt;- graph([]);" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="g2 count (length(g2 out_edges_of each) = 0  ) " equals="the total number of out edges" isExecutable="true" isTestOnly="false" test="false" type="int" />
              <example code="// Number of agents node with x &gt; 32" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="int n &lt;- (list(node) count (round(node(each).location.x) &gt; 32);" isExecutable="false" isTestOnly="false" test="false" type="int" />
              <example code="[1::2, 3::4, 5::6] count (each &gt; 4)" equals="1" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left-hand operand is nil, count throws an error" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="split_lines" name="split_lines" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="13" returnType="list&lt;geometry&gt;" type="-13">
          <operand name="geoms" position="0" type="container&lt;geometry&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of geometries resulting after cutting the lines at their intersections.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="split_lines([line([{0,10}, {20,10}]), line([{0,10}, {20,10}])])" equals="a list of four polylines: line([{0,10}, {10,10}]), line([{10,10}, {20,10}]), line([{10,0}, {10,10}]) and line([{10,10}, {10,20}])" isExecutable="true" isTestOnly="false" test="false" type="list&lt;geometry&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="as_int" name="as_int" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Casting operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Cast.java" contentType="-13" returnType="int" type="-13">
          <operand name="string" position="0" type="string" />
          <operand name="radix" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>parses the string argument as a signed integer in the radix specified by the second argument.</result>
        <seeAlso>
          <see id="int" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="'20' as_int 10" equals="20" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="'20' as_int 8" equals="16" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="'20' as_int 16" equals="32" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="'1F' as_int 16" equals="31" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="'hello' as_int 32" equals="18306744" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left operand is nil or empty, as_int returns 0" />
          <usage descUsageElt="if the left operand does not represent an integer in the specified radix, as_int throws an exception " />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="scaled_to" name="scaled_to" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="bounds" position="1" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>allows to restrict the size of a geometry so that it fits in the envelope {width, height, depth} defined by the second operand</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="shape scaled_to {10,10}" equals="a geometry corresponding to the geometry of the agent applying the operator scaled so that it fits a square of 10x10" isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="trace" name="trace" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Matrix-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-13" returnType="float" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">The trace of the given matrix (the sum of the elements on the main diagonal).</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="trace(matrix([[1,2],[3,4]]))" equals="5" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="is_skill" name="is_skill" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Casting operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Cast.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="unknown" />
          <operand name="skill" position="1" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns true if the left operand is an agent whose species implementes the right-hand skill name</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="agentA is_skill 'moving'" equals="true" isExecutable="false" isTestOnly="false" test="false" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="at_distance" name="at_distance" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial queries operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-20" returnType="list&lt;agent&gt;" type="-13">
          <operand name="list" position="0" type="msi.gama.util.IContainer&lt;?,? extends msi.gama.metamodel.shape.IShape&gt;" />
          <operand name="distance" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of agents among the left-operand list that are located at a distance &lt;= the right operand from the caller agent (in its topology)</result>
        <seeAlso>
          <see id="neighbours_at" />
          <see id="neighbours_of" />
          <see id="agent_closest_to" />
          <see id="agents_inside" />
          <see id="closest_to" />
          <see id="inside" />
          <see id="overlapping" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[ag1, ag2, ag3] at_distance 20" equals="the agents of the list located at a distance &lt;= 20 from the caller agent (in the same order)." isExecutable="false" isTestOnly="false" test="false" type="list&lt;agent&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="smooth" name="smooth" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="13" returnType="geometry" type="-13">
          <operand name="geometry" position="0" type="geometry" />
          <operand name="fit" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns a 'smoothed' geometry, where straight lines are replaces by polynomial (bicubic) curves. The first parameter is the original geometry, the second is the 'fit' parameter which can be in the range 0 (loose fit) to 1 (tightest fit).</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="smooth(square(10), 0.0)" equals="a 'rounded' square" isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="weight_of" name="weight_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="float" type="-13">
          <operand name="graph" position="0" type="graph" />
          <operand name="edge" position="1" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the weight of the given edge (right-hand operand) contained in the graph given in right-hand operand.</result>
        <comment>In a localized graph, an edge has a weight by default (the distance between both vertices).</comment>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphFromMap &lt;-  as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]);" isExecutable="true" isTestOnly="false" test="true" type="float" />
              <example code="graphFromMap weight_of(link({1,5}::{12,45}))" equals="1.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left-operand (the graph) is nil, returns nil" />
          <usage descUsageElt="if the right-hand operand is not an edge of the given graph, weight_of checks whether it is a node of the graph and tries to return its weight" />
          <usage descUsageElt="if the right-hand operand is neither a node, nor an edge, returns 1." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="edges" name="edges" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/statements/AbstractContainerStatement.java" contentType="-13" returnType="container" type="-20">
          <operand name="nodes" position="0" type="container" />
        </operands>
      </combinaisonIO>
    </operator>
    <operator alphabetOrder="ak" alternativeNameOf="+" id="buffer" name="buffer" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="ak" alternativeNameOf="+" id="enlarged_by" name="enlarged_by" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="overlapping" name="overlapping" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial queries operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-20" returnType="list&lt;agent&gt;" type="-13">
          <operand name="list" position="0" type="msi.gama.util.IContainer&lt;?,? extends msi.gama.metamodel.shape.IShape&gt;" />
          <operand name="source" position="1" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of agents among the left-operand list, species or meta-population (addition of species), overlapping the operand (casted as a geometry).</result>
        <seeAlso>
          <see id="neighbours_at" />
          <see id="neighbours_of" />
          <see id="agent_closest_to" />
          <see id="agents_inside" />
          <see id="closest_to" />
          <see id="inside" />
          <see id="agents_overlapping" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[ag1, ag2, ag3] overlapping(self)" equals="return the agents among ag1, ag2 and ag3 that overlap the shape of the agent applying the operator." isExecutable="false" isTestOnly="false" test="false" type="list&lt;agent&gt;" />
              <example code="(species1 + species2) overlapping self" isExecutable="false" isTestOnly="false" test="false" type="list&lt;agent&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="eval_gaml" name="eval_gaml" projectName="msi.gama.core">
      <operatorCategories>
        <category id="System" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/System.java" contentType="-13" returnType="unknown" type="-13">
          <operand name="gaml" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>evaluates the given GAML string.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="eval_gaml(&quot;2+3&quot;)" equals="5" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="neighbours_at" name="neighbours_at" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial queries operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-18" returnType="list" type="-13">
          <operand name="agent" position="0" type="geometry" />
          <operand name="distance" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>a list, containing all the agents of the same species than the left argument (if it is an agent) located at a distance inferior or equal to the right-hand operand to the left-hand operand (geometry, agent, point).</result>
        <comment>The topology used to compute the neighbourhood  is the one of the left-operand if this one is an agent; otherwise the one of the agent applying the operator.</comment>
        <seeAlso>
          <see id="neighbours_of" />
          <see id="closest_to" />
          <see id="overlapping" />
          <see id="agents_overlapping" />
          <see id="agents_inside" />
          <see id="agent_closest_to" />
          <see id="at_distance" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="(self neighbours_at (10))" equals="all the agents located at a distance lower or equal to 10 to the agent applying the operator." isExecutable="true" isTestOnly="false" test="false" type="list" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" alternativeNameOf="one_of" id="any" name="any" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Containers-related operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="one_of" name="one_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gama/util/IContainer.java" contentType="-13" returnType="ValueType" type="-20">
          <operand name="msi.gama.util.icontainer&lt;keytype,valuetype&gt;" position="0" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">one of the values stored in this container  at a random key</result>
        <comment>the one_of operator behavior depends on the nature of the operand</comment>
        <seeAlso>
          <see id="contains" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if it is a graph, one_of returns one of the lists of edges" />
          <usage descUsageElt="if it is a file, one_of returns one of the elements of the content of the file (that is also a container)" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if the operand is empty, one_of returns nil">
            <examples>
              <example code="one_of([])" equals="nil" isExecutable="true" isTestOnly="true" test="true" type="unknown" />
            </examples>
          </usage>
          <usage descUsageElt="if it is a list or a matrix, one_of returns one of the values of the list or of the matrix">
            <examples>
              <example code="any ([1,2,3])" equals="1, 2 or 3" isExecutable="true" isTestOnly="false" test="false" type="int" var="i" />
              <example code="[1,2,3] contains i" equals="true" isExecutable="true" isTestOnly="true" test="true" type="bool" />
              <example code="string sMat &lt;- one_of(matrix([[&quot;c11&quot;,&quot;c12&quot;,&quot;c13&quot;],[&quot;c21&quot;,&quot;c22&quot;,&quot;c23&quot;]])); &#x9;// sMat equals &quot;c11&quot;,&quot;c12&quot;,&quot;c13&quot;, &quot;c21&quot;,&quot;c22&quot; or &quot;c23&quot;" isExecutable="true" isTestOnly="false" test="true" type="ValueType" />
              <example code="matrix([[&quot;c11&quot;,&quot;c12&quot;,&quot;c13&quot;],[&quot;c21&quot;,&quot;c22&quot;,&quot;c23&quot;]]) contains sMat" equals="true" isExecutable="true" isTestOnly="true" test="true" type="bool" />
            </examples>
          </usage>
          <usage descUsageElt="if it is a map, one_of returns one the value of a random pair of the map">
            <examples>
              <example code="int im &lt;- one_of ([2::3, 4::5, 6::7]);&#x9;// im equals 3, 5 or 7" isExecutable="true" isTestOnly="false" test="true" type="ValueType" />
              <example code="[2::3, 4::5, 6::7].values contains im" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage descUsageElt="if it is a population, one_of returns one of the agents of the population">
            <examples>
              <example code="agent b &lt;- one_of(agents);" isExecutable="true" isTestOnly="true" test="true" type="ValueType" />
              <example code="bug b &lt;- one_of(bug);  &#x9;// Given a previously defined species bug, b is one of the created bugs, e.g. bug3" isExecutable="false" isTestOnly="false" test="false" type="ValueType" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="or" name="or" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Logical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Logic.java" contentType="-13" returnType="bool" type="-13">
          <operand name="left" position="0" type="bool" />
          <operand name="right" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>a bool value, equal to the logical or between the left-hand operand and the rigth-hand operand.</result>
        <comment>both operands are always casted to bool before applying the operator. Thus, an expression like 1 or 0 is accepted and returns true.</comment>
        <seeAlso>
          <see id="bool" />
          <see id="and" />
          <see id="!" />
        </seeAlso>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="matrix_with" name="matrix_with" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Casting operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Cast.java" contentType="-17" returnType="matrix" type="-13">
          <operand name="size" position="0" type="point" />
          <operand name="init" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>creates a matrix with a size provided by the first operand, and filled with the second operand</result>
        <comment>Note that both components of the right operand point should be positive, otherwise an exception is raised.</comment>
        <seeAlso>
          <see id="matrix" />
          <see id="as_matrix" />
        </seeAlso>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="indented_by" name="indented_by" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Strings-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="string" type="-13">
          <operand name="s" position="0" type="string" />
          <operand name="nb" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Converts a (possibly multiline) string by indenting it by a number -- specified by the second operand -- of tabulations to the right</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="hexagon" name="hexagon" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
        <category id="3D" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="size" position="0" type="point" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="size" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">A hexagon geometry which the given with and height</result>
        <comment>the centre of the hexagon is by default the location of the current agent in which has been called this operator.the centre of the hexagon is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="circle" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="hexagon({10,5})" equals="a geometry as a hexagon of width of 10 and height of 5." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="hexagon(10)" equals="a geometry as a hexagon of width of 10 and height of 10." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns nil if the operand is nil." />
          <usage descUsageElt="returns nil if the operand is nil." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="replace" name="replace" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Strings-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="string" type="-13">
          <operand name="target" position="0" type="string" />
          <operand name="pattern" position="1" type="string" />
          <operand name="replacement" position="2" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the String resulting by replacing for the first operand all the sub-strings corresponding the the second operand by the thrid operand</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="replace('to be or not to be,that is the question','to', 'do')" equals="'do be or not do be,that is the question'" isExecutable="true" isTestOnly="false" test="true" type="string" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="binomial" name="binomial" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Random operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Random.java" contentType="-13" returnType="int" type="-13">
          <operand name="point" position="0" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A value from a random variable following a binomial distribution. The operand {n,p} represents the number of experiments n and the success probability p.</result>
        <comment>The binomial distribution is the discrete probability distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields success with probability p, cf. Binomial distribution on Wikipedia.</comment>
        <seeAlso>
          <see id="poisson" />
          <see id="gauss" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="binomial({15,0.6})" equals="a random positive integer" isExecutable="true" isTestOnly="false" test="false" type="int" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="contains_edge" name="contains_edge" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="bool" type="3">
          <operand name="graph" position="0" type="graph" />
          <operand name="edge" position="1" type="unknown" />
        </operands>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="bool" type="3">
          <operand name="graph" position="0" type="graph" />
          <operand name="edge" position="1" type="pair" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">returns true if the graph(left-hand operand) contains the given edge (righ-hand operand), false otherwise</result>
        <seeAlso>
          <see id="contains_vertex" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphFromMap &lt;-  as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]);" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="graphFromMap contains_edge link({1,5}::{12,45})" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left-hand operand is nil, returns false" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if the right-hand operand is a pair, returns true if it exists an edge between the two elements of the pair in the graph">
            <examples>
              <example code="graphEpidemio contains_edge (node(0)::node(3))" equals="true" isExecutable="false" isTestOnly="false" test="false" type="bool" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="interleave" name="interleave" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-22" returnType="list" type="-13">
          <operand name="cc" position="0" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>a new list containing the interleaved elements of the containers contained in the operand</result>
        <comment>the operand should be a list of lists of elements. The result is a list of elements.</comment>
        <usagesExamples>
          <usage>
            <examples>
              <example code="interleave([1,2,4,3,5,7,6,8])" equals="[1,2,4,3,5,7,6,8]" isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="interleave([['e11','e12','e13'],['e21','e22','e23'],['e31','e32','e33']])" equals="['e11','e21','e31','e12','e22','e32','e13','e23','e33']" isExecutable="true" isTestOnly="false" test="true" type="list" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" alternativeNameOf="truncated_gauss" id="TGauss" name="TGauss" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Random operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="log" name="log" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="x" position="0" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="x" position="0" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the logarithm (base 10) of the operand.</result>
        <seeAlso>
          <see id="ln" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="an exception is raised if the operand is equals or less than zero." />
        </usagesNoExample>
        <usagesExamples>
          <usage>
            <examples>
              <example code="log(10)" equals="1.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="log(1)" equals="0.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="rgbtriangle" name="rgbtriangle" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="side_size" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A triangle geometry which side size is given by the operand.</result>
        <comment>the centre of the triangle is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="circle" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="triangle(5)" equals="a geometry as a triangle with side_size = 5." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns nil if the operand is nil." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="max_of" name="max_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Iterator operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="unknown" type="-17">
          <operand name="container" position="0" type="container" />
          <operand name="filter" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>the maximum value of the right-hand expression evaluated on each of the elements of the left-hand operand</result>
        <comment>in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.</comment>
        <seeAlso>
          <see id="min_of" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph([]) max_of([])" isExecutable="true" isTestOnly="true" raises="error" test="true" type="unknown" />
              <example code="[1,2,4,3,5,7,6,8] max_of (each * 100 )" equals="800" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
              <example code="graph g2 &lt;- as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]);" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
              <example code="g2.vertices max_of (g2 degree_of( each ))" equals="2" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
              <example code="(list(node) max_of (round(node(each).location.x))" equals="96" isExecutable="false" isTestOnly="false" test="false" type="unknown" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="As of GAMA 1.6, if the left-hand operand is nil or empty, max_of throws an error" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if the left-operand is a map, the keyword each will contain each value">
            <examples>
              <example code="[1::2, 3::4, 5::6] max_of (each + 3)" equals="9" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="with_max_of" name="with_max_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Iterator operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="unknown" type="-20">
          <operand name="container" position="0" type="container" />
          <operand name="filter" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>one of elements of the left-hand operand that maximizes the value of the right-hand operand</result>
        <comment>in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.</comment>
        <seeAlso>
          <see id="where" />
          <see id="with_min_of" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[1,2,3,4,5,6,7,8] with_max_of (each )" equals="8" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
              <example code="graph g2 &lt;- graph([]);" isExecutable="true" isTestOnly="true" test="true" type="unknown" />
              <example code="g2 with_max_of (length(g2 out_edges_of each)  ) " equals="node4" isExecutable="true" isTestOnly="false" test="false" type="unknown" />
              <example code="(list(node) with_max_of (round(node(each).location.x))" equals="node3" isExecutable="false" isTestOnly="false" test="false" type="unknown" />
              <example code="[1::2, 3::4, 5::6] with_max_of (each)" equals="6" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left-hand operand is nil, with_max_of returns the default value of the right-hand operand" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="polygon" name="polygon" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="points" position="0" type="msi.gama.util.IContainer&lt;?,? extends msi.gama.metamodel.shape.IShape&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A polygon geometry from the given list of points.</result>
        <seeAlso>
          <see id="around" />
          <see id="circle" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="polygon([{0,0}, {0,10}, {10,10}, {10,0}])" equals="a polygon geometry composed of the 4 points." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the operand is nil, returns the point geometry {0,0}" />
          <usage descUsageElt="if the operand is composed of a single point, returns a point geometry" />
          <usage descUsageElt="if the operand is composed of 2 points, returns a polyline geometry." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="!=" name="!=" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Comparison operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="unknown" />
          <operand name="b" position="1" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">true if both operands are different, false otherwise</result>
        <seeAlso>
          <see id="=" />
          <see id="&gt;" />
          <see id="&lt;" />
          <see id="&gt;=" />
          <see id="&lt;=" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="3 != 3.0" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="4 != 4.7" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="3.0 != 3.0" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="4.0 != 4.7" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="3.0 != 3" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="4.7 != 4" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="[2,3] != [2,3]" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="[2,4] != [2,3]" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="rows_list" name="rows_list" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Matrix-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="5" returnType="list&lt;list&gt;" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns a list of the rows of the matrix, with each row as a list of elements</result>
        <seeAlso>
          <see id="columns_list" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="rows_list(matrix([[&quot;el11&quot;,&quot;el12&quot;,&quot;el13&quot;],[&quot;el21&quot;,&quot;el22&quot;,&quot;el23&quot;],[&quot;el31&quot;,&quot;el32&quot;,&quot;el33&quot;]]))" equals="[[&quot;el11&quot;,&quot;el21&quot;,&quot;el31&quot;],[&quot;el12&quot;,&quot;el22&quot;,&quot;el32&quot;],[&quot;el13&quot;,&quot;el23&quot;,&quot;el33&quot;]]" isExecutable="true" isTestOnly="false" test="true" type="list&lt;list&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="all_pairs_shortest_path" name="all_pairs_shortest_path" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
        <category id="Path-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="1" returnType="matrix" type="8">
          <operand name="graph" position="0" type="graph" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the successor matrix of shortest paths betwenn all node pairs (rows: source, columns: target): a cell (i,j) will thus contains the next node in the shortest path between i and j.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="all_pairs_shortest_paths(my_graph)" equals="shortest_paths_matrix will contain all pairs of shortest paths" isExecutable="false" isTestOnly="false" test="false" type="matrix" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="hierarchical_clustering" name="hierarchical_clustering" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial statistical operators" />
        <category id="Statistical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="5" returnType="list" type="-13">
          <operand name="agents" position="0" type="container&lt;agent&gt;" />
          <operand name="distance" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A tree (list of list) contained groups of agents clustered by distance considering a distance min between two groups.</result>
        <comment>use of hierarchical clustering with Minimum for linkage criterion between two groups of agents.</comment>
        <seeAlso>
          <see id="simple_clustering_by_distance" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[ag1, ag2, ag3, ag4, ag5] hierarchical_clustering 20.0" equals="for example, can return [[[ag1],[ag3]], [ag2], [[[ag4],[ag5]],[ag6]]" isExecutable="false" isTestOnly="false" test="false" type="list" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="to_GAMA_CRS" name="to_GAMA_CRS" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="code" position="1" type="string" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result />
        <usages>
          <usage descUsageElt="returns the geometry corresponding to the transfomartion of the given geometry to the GAMA CRS (Coordinate Reference System) assuming the given geometry is referenced by given CRS">
            <examples>
              <example code="to_GAMA_CRS({121,14}, &quot;EPSG:4326&quot;)" equals="a geometry corresponding to the agent geometry transformed into the GAMA CRS" isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage descUsageElt="returns the geometry corresponding to the transfomartion of the given geometry to the GAMA CRS (Coordinate Reference System) assuming the given geometry is referenced by the current CRS, the one corresponding to the world's agent one">
            <examples>
              <example code="to_GAMA_CRS({121,14})" equals="a geometry corresponding to the agent geometry transformed into the GAMA CRS" isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="electre_DM" name="electre_DM" projectName="msi.gama.core">
      <operatorCategories>
        <category id="multicriteria operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/extensions/multi_criteria/MulticriteriaAnalyzeOperator.java" contentType="-13" returnType="int" type="-13">
          <operand name="cands" position="0" type="list&lt;list&gt;" />
          <operand name="criteriaMap" position="1" type="java.util.List&lt;java.util.Map&lt;java.lang.String,java.lang.Object&gt;&gt;" />
          <operand name="fuzzyCut" position="2" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>The index of the best candidate according to a method based on the ELECTRE methods. The principle of the ELECTRE methods is to compare the possible candidates by pair. These methods analyses the possible outranking relation existing between two candidates. An candidate outranks another if this one is at least as good as the other one. The ELECTRE methods are based on two concepts: the concordance and the discordance. The concordance characterises the fact that, for an outranking relation to be validated, a sufficient majority of criteria should be in favor of this assertion. The discordance characterises the fact that, for an outranking relation to be validated, none of the criteria in the minority should oppose too strongly this assertion. These two conditions must be true for validating the outranking assertion. More information about the ELECTRE methods can be found in [http://www.springerlink.com/content/g367r44322876223/	Figueira,  J., Mousseau, V., Roy, B.: ELECTRE Methods. In: Figueira, J., Greco, S., and Ehrgott, M., (Eds.), Multiple Criteria Decision Analysis: State of the Art Surveys, Springer, New York, 133--162 (2005)]. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion: A criterion is a map that contains fives elements: a name, a weight, a preference value (p), an indifference value (q) and a veto value (v). The preference value represents the threshold from which the difference between two criterion values allows to prefer one vector of values over another. The indifference value represents the threshold from which the difference between two criterion values is considered significant. The veto value represents the threshold from which the difference between two criterion values disqualifies the candidate that obtained the smaller value; the last operand is the fuzzy cut.</result>
        <seeAlso>
          <see id="weighted_means_DM" />
          <see id="promethee_DM" />
          <see id="evidence_theory_DM" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="electre_DM([[1.0, 7.0],[4.0,2.0],[3.0, 3.0]], [[&quot;name&quot;::&quot;utility&quot;, &quot;weight&quot; :: 2.0,&quot;p&quot;::0.5, &quot;q&quot;::0.0, &quot;s&quot;::1.0, &quot;maximize&quot; :: true],[&quot;name&quot;::&quot;price&quot;, &quot;weight&quot; :: 1.0,&quot;p&quot;::0.5, &quot;q&quot;::0.0, &quot;s&quot;::1.0, &quot;maximize&quot; :: false]])" equals="0" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns -1 is the list of candidates is nil or empty" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="add_point" name="add_point" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Points-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="p" position="1" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A geometry resulting from the addition of the right point (coordinate) to the left-hand geometry</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="polygon([{10,10},{10,20},{20,20}]) add_point {20,10}" equals="polygon([{10,10},{10,20},{20,20},{20,10}])" isExecutable="true" isTestOnly="false" test="true" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="clean" name="clean" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A geometry corresponding to the cleaning of the operand (geometry, agent, point)</result>
        <comment>The cleaning corresponds to a buffer with a distance of 0.0</comment>
        <usagesExamples>
          <usage>
            <examples>
              <example code="clean(self)" equals="returns the geometry resulting from the cleaning of the geometry of the agent applying the operator." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="and" name="and" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Logical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Logic.java" contentType="-13" returnType="bool" type="-13">
          <operand name="left" position="0" type="bool" />
          <operand name="right" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>a bool value, equal to the logical and between the left-hand operand and the rigth-hand operand.</result>
        <comment>both operands are always casted to bool before applying the operator. Thus, an expression like (1 and 0) is accepted and returns false.</comment>
        <seeAlso>
          <see id="bool" />
          <see id="or" />
          <see id="!" />
        </seeAlso>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="atan2" name="atan2" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="y" position="0" type="float" />
          <operand name="x" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">the atan2 value of the two operands.</result>
        <comment>The function atan2 is the arctangent function with two arguments. The purpose of using two arguments instead of one is to gather information on the signs of the inputs in order to return the appropriate quadrant of the computed angle, which is not possible for the single-argument arctangent function.</comment>
        <seeAlso>
          <see id="atan" />
          <see id="acos" />
          <see id="asin" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="atan2 (0,0)" equals="0.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="undirected" name="undirected" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="g" position="0" type="graph" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>the operand graph becomes an undirected graph.</result>
        <comment>the operator alters the operand graph, it does not create a new one.</comment>
        <seeAlso>
          <see id="directed" />
        </seeAlso>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="tan_rad" name="tan_rad" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="v" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the value (in [-1,1]) of the trigonometric tangent of the operand (in decimal degrees). The argument is casted to an int before being evaluated.</result>
        <seeAlso>
          <see id="cos" />
          <see id="sin" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="Operand values out of the range [0-359] are normalized. Notice that tan(360) does not return 0.0 but -2.4492935982947064E-16" />
          <usage descUsageElt="The tangent is only defined for any real number except 90 + k `*` 180 (k an positive or negative integer). Nevertheless notice that tan(90) returns 1.633123935319537E16 (whereas we could except infinity)." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="sum" name="sum" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Statistical operators" />
        <category id="Containers-related operators" />
        <category id="Color-related operators" />
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Stats.java" contentType="-13" returnType="unknown" type="-20">
          <operand name="expr" position="0" type="any expression" />
        </operands>
        <operands class="msi/gaml/operators/Stats.java" contentType="-13" returnType="float" type="15">
          <operand name="g" position="0" type="graph" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">the sum of all the elements of the operand</result>
        <comment>the sum operator behavior depends on the nature of the operand</comment>
        <seeAlso>
          <see id="mul" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if it is a population or a list of other types: sum transforms all elements into float and sums them" />
          <usage descUsageElt="if it is a map, sum returns the sum of the value of all elements" />
          <usage descUsageElt="if it is a file, sum returns the sum of the content of the file (that is also a container)" />
          <usage descUsageElt="if it is a graph, sum returns the sum of the list of the elements of the graph (that can be the list of edges or vertexes depending on the graph)" />
          <usage descUsageElt="if it is a matrix of int, float or object, sum returns the sum of all the numerical elements (i.e. all elements for integer and float matrices)" />
          <usage descUsageElt="if it is a matrix of geometry, sum returns the sum of the list of the geometries" />
          <usage descUsageElt="if it is a matrix of other types: sum transforms all elements into float and sums them" />
          <usage descUsageElt="if it is a list of colors: sum will sum them and return the blended resulting color" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if it is a list of int or float: sum returns the sum of all the elements">
            <examples>
              <example code="sum ([12,10,3])" equals="25" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
          <usage descUsageElt="if it is a list of points: sum returns the sum of all points as a point (each coordinate is the sum of the corresponding coordinate of each element)">
            <examples>
              <example code="sum([{1.0,3.0},{3.0,5.0},{9.0,1.0},{7.0,8.0}])" equals="{20.0,17.0}" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="flip" name="flip" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Random operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Random.java" contentType="-13" returnType="bool" type="-13">
          <operand name="probability" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>true or false given the probability represented by the operand</result>
        <seeAlso>
          <see id="rnd" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="flip (0.66666)" equals="2/3 chances to return true." isExecutable="true" isTestOnly="false" test="false" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="flip 0 always returns false, flip 1 true" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="as" name="as" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Casting operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Cast.java" contentType="-19" returnType="unknown" type="-17">
          <operand name="val" position="0" type="unknown" />
          <operand name="expr" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>casting of the first argument into a given type</result>
        <comment>It is equivalent to the application of the type operator on the left operand.</comment>
        <usagesExamples>
          <usage>
            <examples>
              <example code="3.5 as int" equals="int(3.5)" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="agents_overlapping" name="agents_overlapping" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial queries operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="11" returnType="list&lt;agent&gt;" type="-13">
          <operand name="source" position="0" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of agents overlapping the operand (casted as a geometry).</result>
        <seeAlso>
          <see id="neighbours_at" />
          <see id="neighbours_of" />
          <see id="agent_closest_to" />
          <see id="agents_inside" />
          <see id="closest_to" />
          <see id="inside" />
          <see id="overlapping" />
          <see id="at_distance" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="agents_overlapping(self)" equals="the agents that overlap the shape of the agent applying the operator." isExecutable="true" isTestOnly="false" test="false" type="list&lt;agent&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="sort_by" id="sort" name="sort" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Containers-related operators" />
        <category id="Iterator operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="sort_by" name="sort_by" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Iterator operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-20" returnType="list" type="-13">
          <operand name="original" position="0" type="container" />
          <operand name="filter" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns a list, containing the elements of the left-hand operand sorted in ascending order by the value of the right-hand operand when it is evaluated on them.</result>
        <comment>the left-hand operand is casted to a list before applying the operator. In the right-hand operand, the keyword each can be used to represent, in turn, each of the elements.</comment>
        <seeAlso>
          <see id="group_by" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[1,2,4,3,5,7,6,8] sort_by (each)" equals="[1,2,3,4,5,6,7,8]" isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="graph g2 &lt;- graph([]);" isExecutable="true" isTestOnly="true" test="true" type="list" />
              <example code="g2 sort_by (length(g2 out_edges_of each) )" equals="[node9, node7, node10, node8, node11, node6, node5, node4]" isExecutable="true" isTestOnly="false" test="false" type="list" />
              <example code="(list(node) sort_by (round(node(each).location.x))" equals="[node5, node1, node0, node2, node3]" isExecutable="false" isTestOnly="false" test="false" type="list" />
              <example code="[1::2, 5::6, 3::4] sort_by (each)" equals="[2, 4, 6]" isExecutable="true" isTestOnly="false" test="true" type="list" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left-hand operand is nil, sort_by throws an error" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="line" id="polyline" name="polyline" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="ak" id="is_finite" name="is_finite" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="bool" type="-13">
          <operand name="d" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns whether the argument is a finite number or not</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="is_finite(4.66)" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="is_finite(#infinity)" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="char" name="char" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Strings-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="string" type="-13">
          <operand name="s" position="0" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result />
        <usages>
          <usage descUsageElt="converts ACSII integer value to character">
            <examples>
              <example code="char (34)" equals="'&quot;'" isExecutable="true" isTestOnly="false" test="true" type="string" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="angle_between" name="angle_between" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Points-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="int" type="-13">
          <operand name="p0" position="0" type="point" />
          <operand name="p1" position="1" type="point" />
          <operand name="p2" position="2" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>the angle between vectors P0P1 and P0P2 (P0, P1, P2 being the three point operands)</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="angle_between({5,5},{10,5},{5,10})" equals="90" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="grid_cells_to_graph" name="grid_cells_to_graph" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="13" returnType="graph" type="-13">
          <operand name="vertices" position="0" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">creates a graph from a list of cells (operand). An edge is created between neighbours.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="my_cell_graph&lt;-grid_cells_to_graph(cells_list)" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="append_vertically" name="append_vertically" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Matrix-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gama/util/matrix/GamaMatrix.java" contentType="-21" returnType="matrix" type="-13">
          <operand name="msi.gama.util.matrix.gamamatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="b" position="1" type="matrix" />
        </operands>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-21" returnType="matrix" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="b" position="1" type="matrix" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">A matrix resulting from the concatenation of the columns  of the two given matrices. If not both numerical or both object matrices, returns the first matrix.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="matrix([[1,2],[3,4]]) append_vertically matrix([[1,2],[3,4]])" equals="matrix([[1,2,1,2],[3,4,3,4]])" isExecutable="true" isTestOnly="false" test="true" type="matrix" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="tan" name="tan" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="v" position="0" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="v" position="0" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the value (in [-1,1]) of the trigonometric tangent of the operand (in decimal degrees). The argument is casted to an int before being evaluated.</result>
        <seeAlso>
          <see id="cos" />
          <see id="sin" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="Operand values out of the range [0-359] are normalized. Notice that tan(360) does not return 0.0 but -2.4492935982947064E-16" />
          <usage descUsageElt="The tangent is only defined for any real number except 90 + k `*` 180 (k an positive or negative integer). Nevertheless notice that tan(90) returns 1.633123935319537E16 (whereas we could except infinity)." />
        </usagesNoExample>
        <usagesExamples>
          <usage>
            <examples>
              <example code="tan (0)" equals="0.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
              <example code="tan(90)" equals="1.633123935319537E16" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="link" name="link" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="points" position="0" type="pair" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A link between the 2 elements of the pair.</result>
        <comment>The geometry of the link is the intersection of the two geometries when they intersect, and a line between their centroids when they do not.</comment>
        <seeAlso>
          <see id="around" />
          <see id="circle" />
          <see id="cone" />
          <see id="line" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="link (geom1::geom2)" equals="a link geometry between geom1 and geom2." isExecutable="false" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the operand is nil, link returns a point {0,0}" />
          <usage descUsageElt="if one of the elements of the pair is a list of geometries or a species, link will consider the union of the geometries or of the geometry of each agent of the species" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="inverse" name="inverse" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Matrix-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-13" returnType="msi.gama.util.matrix.IMatrix&lt;java.lang.Double&gt;" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">The inverse matrix of the given matrix. If no inverse exists, returns a matrix that has properties that resemble that of an inverse.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="inverse(matrix([[5,-3],[6,-4]]))" equals="[2.0000000000000004,-0.9999999999999998]" isExecutable="true" isTestOnly="false" test="true" type="msi.gama.util.matrix.IMatrix&lt;java.lang.Double&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="sin_rad" name="sin_rad" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="rv" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the value (in [-1,1]) of the sinus of the operand (in decimal degrees). The argument is casted to an int before being evaluated.</result>
        <seeAlso>
          <see id="cos" />
          <see id="tan" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="sin(360)" equals="0.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="Operand values out of the range [0-359] are normalized." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="columns_list" name="columns_list" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Matrix-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="5" returnType="list&lt;list&gt;" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns a list of the columns of the matrix, with each column as a list of elements</result>
        <seeAlso>
          <see id="rows_list" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="columns_list(matrix([[&quot;el11&quot;,&quot;el12&quot;,&quot;el13&quot;],[&quot;el21&quot;,&quot;el22&quot;,&quot;el23&quot;],[&quot;el31&quot;,&quot;el32&quot;,&quot;el33&quot;]]))" equals="[[&quot;el11&quot;,&quot;el12&quot;,&quot;el13&quot;],[&quot;el21&quot;,&quot;el22&quot;,&quot;el23&quot;],[&quot;el31&quot;,&quot;el32&quot;,&quot;el33&quot;]]" isExecutable="true" isTestOnly="false" test="true" type="list&lt;list&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="empty" name="empty" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Strings-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gama/util/IContainer.java" contentType="-13" returnType="bool" type="-13">
          <operand name="msi.gama.util.icontainer&lt;keytype,valuetype&gt;" position="0" type="container" />
        </operands>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="bool" type="-13">
          <operand name="s" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">true if the operand is empty, false otherwise.</result>
        <comment>the empty operator behavior depends on the nature of the operand</comment>
        <usagesNoExample>
          <usage descUsageElt="if it is a map, empty returns true if the map contains no key-value mappings, and false otherwise" />
          <usage descUsageElt="if it is a file, empty returns true if the content of the file (that is also a container) is empty, and false otherwise" />
          <usage descUsageElt="if it is a population, empty returns true if there is no agent in the population, and false otherwise" />
          <usage descUsageElt="if it is a graph, empty returns true if it contains no vertex and no edge, and false otherwise" />
          <usage descUsageElt="if it is a matrix of int, float or object, it will return true if all elements are respectively 0, 0.0 or null, and false otherwise" />
          <usage descUsageElt="if it is a matrix of geometry, it will return true if the matrix contains no cell, and false otherwise" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if it is a list, empty returns true if there is no element in the list, and false otherwise">
            <examples>
              <example code="empty([])" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage descUsageElt="if it is a string, empty returns true if the string does not contain any character, and false otherwise">
            <examples>
              <example code="empty ('abced')" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="to_gaml" name="to_gaml" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Casting operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Cast.java" contentType="-13" returnType="string" type="-13">
          <operand name="val" position="0" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the litteral description of an expression or description -- action, behavior, species, aspect, even model -- in gaml</result>
        <seeAlso>
          <see id="to_java" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="to_gaml(0)" equals="'0'" isExecutable="true" isTestOnly="false" test="true" type="string" />
              <example code="to_gaml(3.78)" equals="'3.78'" isExecutable="true" isTestOnly="false" test="true" type="string" />
              <example code="to_gaml(true)" equals="'true'" isExecutable="true" isTestOnly="false" test="true" type="string" />
              <example code="to_gaml({23, 4.0})" equals="'{23.0,4.0,0.0}'" isExecutable="true" isTestOnly="false" test="true" type="string" />
              <example code="to_gaml(5::34)" equals="'5::34'" isExecutable="true" isTestOnly="false" test="true" type="string" />
              <example code="to_gaml(rgb(255,0,125))" equals="'rgb (255, 0, 125,255)'" isExecutable="true" isTestOnly="false" test="true" type="string" />
              <example code="to_gaml('hello')" equals="&quot;'hello'&quot;" isExecutable="true" isTestOnly="false" test="true" type="string" />
              <example code="to_gaml([1,5,9,3])" equals="'[1,5,9,3]'" isExecutable="true" isTestOnly="false" test="true" type="string" />
              <example code="to_gaml(['a'::345, 'b'::13, 'c'::12])" equals="&quot;(['a'::345,'b'::13,'c'::12] as map )&quot;" isExecutable="true" isTestOnly="false" test="true" type="string" />
              <example code="to_gaml([[3,5,7,9],[2,4,6,8]])" equals="'[[3,5,7,9],[2,4,6,8]]'" isExecutable="true" isTestOnly="false" test="true" type="string" />
              <example code="to_gaml(a_graph)" equals="([((1 as node)::(3 as node))::(5 as edge),((0 as node)::(3 as node))::(3 as edge),((1 as node)::(2 as node))::(1 as edge),((0 as node)::(2 as node))::(2 as edge),((0 as node)::(1 as node))::(0 as edge),((2 as node)::(3 as node))::(4 as edge)] as map ) as graph" isExecutable="false" isTestOnly="false" test="false" type="string" />
              <example code="to_gaml(node1)" equals=" 1 as node" isExecutable="false" isTestOnly="false" test="false" type="string" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="translated_by" name="translated_by" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="p" position="1" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A geometry resulting from the application of a translation by the right-hand operand distance to the left-hand operand (geometry, agent, point)</result>
        <seeAlso>
          <see id="rotated_by" />
          <see id="transformed_by" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="self translated_by {10,10,10}" equals="the geometry resulting from applying the translation to the left-hand geometry (or agent)." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="gamma_index" name="gamma_index" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="float" type="-13">
          <operand name="graph" position="0" type="graph" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the gamma index of the graph (A measure of connectivity that considers the relationship between the number of observed links and the number of possible links: gamma = e/(3 `*` (v - 2)) - for planar graph.</result>
        <seeAlso>
          <see id="alpha_index" />
          <see id="beta_index" />
          <see id="nb_cycles" />
          <see id="connectivity_index" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphEpidemio &lt;- graph([]);" isExecutable="true" isTestOnly="false" test="true" type="float" />
              <example code="gamma_index(graphEpidemio)" equals="the gamma index of the graph" isExecutable="true" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="dead" name="dead" projectName="msi.gama.core">
      <operatorCategories>
        <category id="System" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/System.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="agent" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>true if the agent is dead, false otherwise.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="dead(agent_A)" equals="true or false" isExecutable="false" isTestOnly="false" test="false" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="closest_to" name="closest_to" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial queries operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="agent" type="-20">
          <operand name="list" position="0" type="msi.gama.util.IContainer&lt;?,? extends msi.gama.metamodel.shape.IShape&gt;" />
          <operand name="source" position="1" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>An agent among the left-operand list of agents, species or meta-population (addition of species), the closest to the operand (casted as a geometry).</result>
        <comment>the distance is computed in the topology of the calling agent (the agent in which this operator is used), with the distance algorithm specific to the topology.</comment>
        <seeAlso>
          <see id="neighbours_at" />
          <see id="neighbours_of" />
          <see id="inside" />
          <see id="overlapping" />
          <see id="agents_overlapping" />
          <see id="agents_inside" />
          <see id="agent_closest_to" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[ag1, ag2, ag3] closest_to(self)" equals="return the closest agent among ag1, ag2 and ag3 to the agent applying the operator." isExecutable="false" isTestOnly="false" test="false" type="agent" />
              <example code="(species1 + species2) closest_to self" isExecutable="false" isTestOnly="false" test="false" type="agent" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="every" name="every" projectName="msi.gama.core">
      <operatorCategories>
        <category id="System" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/System.java" contentType="-13" returnType="bool" type="-13">
          <operand name="period" position="0" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>true every operand time step, false otherwise</result>
        <comment>the value of the every operator depends deeply on the time step. It can be used to do something not every step.</comment>
        <usagesExamples>
          <usage>
            <examples>
              <example code="if every(2) {write &quot;the time step is even&quot;;}" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="&#x9;     else {write &quot;the time step is odd&quot;;}" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="mod" name="mod" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="int" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the remainder of the integer division of the left-hand operand by the rigth-hand operand.</result>
        <seeAlso>
          <see id="div" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="40 mod 3" equals="1" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if operands are float, they are truncated" />
          <usage descUsageElt="if the right-hand operand is equal to zero, raises an exception." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="adjacency" name="adjacency" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="msi.gama.util.matrix.GamaFloatMatrix" type="-13">
          <operand name="graph" position="0" type="graph" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>adjacency matrix of the given graph.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="add_edge" name="add_edge" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="15">
          <operand name="g" position="0" type="graph" />
          <operand name="nodes" position="1" type="pair" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>add an edge between a source vertex and a target vertex (resp. the left and the right element of the pair operand)</result>
        <comment>if the edge already exists, the graph is unchanged</comment>
        <seeAlso>
          <see id="add_node" />
          <see id="graph" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph &lt;- graph add_edge (source::target);" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="rgbcube" name="rgbcube" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="side_size" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A cube geometry which side size is equal to the operand.</result>
        <comment>the centre of the cube is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="circle" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="cube(10)" equals="a geometry as a square of side size 10." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns nil if the operand is nil." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="is" name="is" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Casting operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Cast.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="unknown" />
          <operand name="b" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns true if the left operand is of the right operand type, false otherwise</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="0 is int" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="an_agent is node" equals="true" isExecutable="false" isTestOnly="false" test="false" type="bool" />
              <example code="1 is float" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="?" name="?" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Logical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Logic.java" contentType="-19" returnType="unknown" type="-17">
          <operand name="left" position="0" type="bool" />
          <operand name="right" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>It is used in combinaison with the : operator: if the left-hand operand evaluates to true, returns the value of the left-hand operand of the :, otherwise that of the right-hand operand of the :</result>
        <comment>These functional tests can be combined together.</comment>
        <seeAlso>
          <see id=":" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[10, 19, 43, 12, 7, 22] collect ((each &gt; 20) ? 'above' : 'below')" equals="['below', 'below', 'above', 'below', 'below', 'above']" isExecutable="true" isTestOnly="false" test="true" type="lis&lt;string&gt;" />
              <example code="rgb color &lt;- (flip(0.3) ? #red : (flip(0.9) ? #blue : #green));" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="gauss" name="gauss" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Random operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Random.java" contentType="-13" returnType="float" type="-13">
          <operand name="mean" position="0" type="float" />
          <operand name="sd" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Random.java" contentType="-13" returnType="float" type="-13">
          <operand name="point" position="0" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A value from a normally distributed random variable with expected value (mean) and variance (standardDeviation). The probability density function of such a variable is a Gaussian.A value from a normally distributed random variable with expected value (mean) and variance (standardDeviation). The probability density function of such a variable is a Gaussian.</result>
        <seeAlso>
          <see id="truncated_gauss" />
          <see id="poisson" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="gauss(0,0.3)" equals="0.22354" isExecutable="true" isTestOnly="false" test="false" type="float" />
              <example code="gauss(0,0.3)" equals="-0.1357" isExecutable="true" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="gauss({0,0.3})" equals="0.22354" isExecutable="true" isTestOnly="false" test="false" type="float" />
              <example code="gauss({0,0.3})" equals="-0.1357" isExecutable="true" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="when the operand is a point, it is read as {mean, standardDeviation}" />
          <usage descUsageElt="when standardDeviation value is 0.0, it always returns the mean value" />
          <usage descUsageElt="when the operand is a point, it is read as {mean, standardDeviation}" />
          <usage descUsageElt="when standardDeviation value is 0.0, it always returns the mean value" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="as_date" name="as_date" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Strings-related operators" />
        <category id="Time-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="string" type="-13">
          <operand name="time" position="0" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="string" type="-13">
          <operand name="time" position="0" type="float" />
          <operand name="pattern" position="1" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">converts a number of seconds in the model (for instance, the 'time' variable) into a string that represents the period elapsed since the beginning of the simulation using year, month, day, hour, minutes and seconds following a given pattern (right-hand operand). GAMA uses a special calendar for internal model times, where months have 30 days and years 12 months.</result>
        <seeAlso>
          <see id="as_time" />
        </seeAlso>
        <usages>
          <usage descUsageElt="used as an unary operator, it uses a defined pattern with years, months, days">
            <examples>
              <example code="as_date(22324234)" equals="&quot;8 months, 18 days&quot;" isExecutable="true" isTestOnly="false" test="true" type="string" />
            </examples>
          </usage>
          <usage descUsageElt="Pattern should include : &quot;%Y %M %D %h %m %s&quot; for outputting years, months, days, hours, minutes, seconds">
            <examples>
              <example code="22324234 as_date &quot;%M m %D d %h h %m m %s seconds&quot;" equals="&quot;8 m 18 d 9 h 10 m 34 seconds&quot;" isExecutable="true" isTestOnly="false" test="true" type="string" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="mean_deviation" name="mean_deviation" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Statistical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Stats.java" contentType="-13" returnType="float" type="-13">
          <operand name="values" position="0" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>the deviation from the mean of all the elements of the operand. See &lt;A href= "http://en.wikipedia.org/wiki/Absolute_deviation" &gt;Mean_deviation&lt;/A&gt; for more details.</result>
        <comment>The operator casts all the numerical element of the list into float. The elements that are not numerical are discarded.</comment>
        <seeAlso>
          <see id="mean" />
          <see id="standard_deviation" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="mean_deviation ([4.5, 3.5, 5.5, 7.0])" equals="1.125" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="degree_of" name="degree_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="int" type="1">
          <operand name="graph" position="0" type="graph" />
          <operand name="vertex" position="1" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the degree (in+out) of a vertex (right-hand operand) in the graph given as left-hand operand.</result>
        <seeAlso>
          <see id="in_degree_of" />
          <see id="out_degree_of" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphFromMap &lt;- graph([]);" isExecutable="true" isTestOnly="true" test="true" type="int" />
              <example code="graphFromMap degree_of (node(3))" equals="3" isExecutable="true" isTestOnly="false" test="false" type="int" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="frequency_of" name="frequency_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Statistical operators" />
        <category id="Iterator operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Stats.java" contentType="1" returnType="map" type="-13">
          <operand name="original" position="0" type="container" />
          <operand name="filter" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns a map with keys equal to the application of the right-hand argument (like collect) and values equal to the frequency of this key (i.e. how many times it has been obtained)</result>
        <seeAlso>
          <see id="as_map" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[ag1, ag2, ag3, ag4] frequency_of each.size" equals="the different sizes as keys and the number of agents of this size as values" isExecutable="false" isTestOnly="false" test="false" type="map" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="intersects" name="intersects" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial properties operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="bool" type="-13">
          <operand name="g1" position="0" type="geometry" />
          <operand name="g2" position="1" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A boolean, equal to true if the left-geometry (or agent/point) intersects the right-geometry (or agent/point).</result>
        <seeAlso>
          <see id="disjoint_from" />
          <see id="crosses" />
          <see id="overlaps" />
          <see id="partially_overlaps" />
          <see id="touches" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="square(5) intersects {10,10}" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if one of the operand is null, returns false." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="ceil" name="ceil" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="d" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Maps the operand to the smallest following integer, i.e. the smallest integer not less than x.</result>
        <seeAlso>
          <see id="floor" />
          <see id="round" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="ceil(3)" equals="3.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
              <example code="ceil(3.5)" equals="4.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
              <example code="ceil(-4.7)" equals="-4.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="touches" name="touches" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial properties operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="bool" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="g2" position="1" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A boolean, equal to true if the left-geometry (or agent/point) touches the right-geometry (or agent/point).</result>
        <comment>returns true when the left-operand only touches the right-operand. When one geometry covers partially (or fully) the other one, it returns false.</comment>
        <seeAlso>
          <see id="disjoint_from" />
          <see id="crosses" />
          <see id="overlaps" />
          <see id="partially_overlaps" />
          <see id="intersects" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="polyline([{10,10},{20,20}]) touches {15,15}" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polyline([{10,10},{20,20}]) touches {10,10}" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="{15,15} touches {15,15}" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polyline([{10,10},{20,20}]) touches polyline([{10,10},{5,5}])" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polyline([{10,10},{20,20}]) touches polyline([{5,5},{15,15}])" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polyline([{10,10},{20,20}]) touches polyline([{15,15},{25,25}])" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) touches polygon([{15,15},{15,25},{25,25},{25,15}])" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) touches polygon([{10,20},{20,20},{20,30},{10,30}])" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) touches polygon([{10,10},{0,10},{0,0},{10,0}])" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) touches {15,15}" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) touches {10,15}" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if one of the operand is null, returns false." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="cos" name="cos" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="rv" position="0" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="rv" position="0" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the value (in [-1,1]) of the cosinus of the operand (in decimal degrees).  The argument is casted to an int before being evaluated.</result>
        <seeAlso>
          <see id="sin" />
          <see id="tan" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="Operand values out of the range [0-359] are normalized." />
        </usagesNoExample>
        <usagesExamples>
          <usage>
            <examples>
              <example code="cos (0)" equals="1.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
              <example code="cos(360)" equals="1.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
              <example code="cos(-720)" equals="1.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="squircle" name="squircle" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="xRadius" position="0" type="float" />
          <operand name="power" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A mix of square and circle geometry (see : http://en.wikipedia.org/wiki/Squircle), which side size is equal to the first operand and power is equal to the second operand</result>
        <comment>the centre of the ellipse is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="super_ellipse" />
          <see id="rectangle" />
          <see id="square" />
          <see id="circle" />
          <see id="ellipse" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="squircle(4,4)" equals="a geometry as a squircle of side 4 with a power of 4." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns a point if the side operand is lower or equal to 0." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="path_between" name="path_between" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
        <category id="Path-related operators" />
        <category id="Spatial operators" />
        <category id="Spatial relations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-20" returnType="path" type="-13">
          <operand name="graph" position="0" type="graph" />
          <operand name="source" position="1" type="geometry" />
          <operand name="target" position="2" type="geometry" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-20" returnType="path" type="17">
          <operand name="graph" position="0" type="topology" />
          <operand name="nodes" position="1" type="container&lt;geometry&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">The shortest path between a list of two objects in a graph</result>
        <seeAlso>
          <see id="towards" />
          <see id="direction_to" />
          <see id="distance_between" />
          <see id="direction_between" />
          <see id="path_to" />
          <see id="distance_to" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="path_between (my_graph, ag1, ag2)" equals="A path between ag1 and ag2" isExecutable="false" isTestOnly="false" test="false" type="path" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="my_topology path_between [ag1, ag2]" equals="A path between ag1 and ag2" isExecutable="false" isTestOnly="false" test="false" type="path" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="standard_deviation" name="standard_deviation" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Statistical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Stats.java" contentType="-13" returnType="float" type="-13">
          <operand name="values" position="0" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>the standard deviation on the elements of the operand. See &lt;A href="http://en.wikipedia.org/wiki/Standard_deviation"&gt;Standard_deviation&lt;/A&gt; for more details.</result>
        <comment>The operator casts all the numerical element of the list into float. The elements that are not numerical are discarded.</comment>
        <seeAlso>
          <see id="mean" />
          <see id="mean_deviation" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="standard_deviation ([4.5, 3.5, 5.5, 7.0])" equals="1.2930100540985752" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="eigenvalues" name="eigenvalues" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Matrix-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-13" returnType="list&lt;float&gt;" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">The eigen values (matrix) of the given matrix</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="eigenvalues(matrix([[5,-3],[6,-4]]))" equals="[2.0000000000000004,-0.9999999999999998]" isExecutable="true" isTestOnly="false" test="true" type="list&lt;float&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="simplification" name="simplification" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g1" position="0" type="geometry" />
          <operand name="distanceTolerance" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A geometry corresponding to the simplification of the operand (geometry, agent, point) considering a tolerance distance.</result>
        <comment>The algorithm used for the simplification is Douglas-Peucker</comment>
        <usagesExamples>
          <usage>
            <examples>
              <example code="self simplification 0.1" equals="the geometry resulting from the application of the Douglas-Peuker algorithm on the geometry of the agent applying the operator with a tolerance distance of 0.1." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="crs" name="crs" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="string" type="-13">
          <operand name="gisFile" position="0" type="file" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>the Coordinate Reference System (CRS) of the GIS file</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="crs(my_shapefile)" equals="the crs of the shapefile" isExecutable="false" isTestOnly="false" test="false" type="string" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="around" name="around" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="width" position="0" type="float" />
          <operand name="toBeCastedIntoGeometry" position="1" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A geometry resulting from the difference between a buffer around the right-operand casted in geometry at a distance left-operand (right-operand buffer left-operand) and the right-operand casted as geometry.</result>
        <seeAlso>
          <see id="circle" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="10 around circle(5)" equals="the ring geometry between 5 and 10." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns a circle geometry of radius right-operand if the left-operand is nil" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="points_at" name="points_at" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Points-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="7" returnType="list&lt;point&gt;" type="-13">
          <operand name="nbLoc" position="0" type="int" />
          <operand name="distance" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of left-operand number of points located at a the right-operand distance to the agent location.</result>
        <seeAlso>
          <see id="any_location_in" />
          <see id="any_point_in" />
          <see id="closest_points_with" />
          <see id="farthest_point_to" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="3 points_at(20.0)" equals="returns [pt1, pt2, pt3] with pt1, pt2 and pt3 located at a distance of 20.0 to the agent location" isExecutable="true" isTestOnly="false" test="false" type="list&lt;point&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="corR" name="corR" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Statistical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Stats.java" contentType="-13" returnType="unknown" type="2">
          <operand name="l1" position="0" type="container" />
          <operand name="l2" position="1" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the Pearson correlation coefficient of two given vectors (right-hand operands) in given variable  (left-hand operand).</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="list X &lt;- [1, 2, 3];" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
              <example code="list Y &lt;- [1, 2, 4];" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
              <example code="corR(X, Y)" equals="0.981980506061966" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the lengths of two vectors in the right-hand aren't equal, returns 0" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="nb_cycles" name="nb_cycles" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="int" type="1">
          <operand name="graph" position="0" type="graph" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the maximum number of independent cycles in a graph. This number (u) is estimated through the number of nodes (v), links (e) and of sub-graphs (p): u = e - v + p.</result>
        <seeAlso>
          <see id="alpha_index" />
          <see id="beta_index" />
          <see id="gamma_index" />
          <see id="connectivity_index" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphEpidemio &lt;- graph([]);" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="nb_cycles(graphEpidemio)" equals="the number of cycles in the graph" isExecutable="true" isTestOnly="false" test="false" type="int" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="masked_by" name="masked_by" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="source" position="0" type="geometry" />
          <operand name="obstacles" position="1" type="container&lt;geometry&gt;" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="source" position="0" type="geometry" />
          <operand name="obstacles" position="1" type="container&lt;geometry&gt;" />
          <operand name="precision" position="2" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result />
        <usagesExamples>
          <usage>
            <examples>
              <example code="perception_geom masked_by obstacle_list" equals="the geometry representing the part of perception_geom visible from the agent position considering the list of obstacles obstacle_list." isExecutable="false" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="perception_geom masked_by obstacle_list" equals="the geometry representing the part of perception_geom visible from the agent position considering the list of obstacles obstacle_list." isExecutable="false" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="distance_between" name="distance_between" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial relations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="float" type="-13">
          <operand name="t" position="0" type="topology" />
          <operand name="geometries" position="1" type="container&lt;geometry&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A distance between a list of geometries (geometries, agents, points) considering a topology.</result>
        <seeAlso>
          <see id="towards" />
          <see id="direction_to" />
          <see id="distance_to" />
          <see id="direction_between" />
          <see id="path_between" />
          <see id="path_to" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="my_topology distance_between [ag1, ag2, ag3]" equals="the distance between ag1, ag2 and ag3 considering the topology my_topology" isExecutable="false" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="truncated_gauss" name="truncated_gauss" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Random operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Random.java" contentType="-13" returnType="float" type="-13">
          <operand name="list" position="0" type="list" />
        </operands>
        <operands class="msi/gaml/operators/Random.java" contentType="-13" returnType="float" type="-13">
          <operand name="p" position="0" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A random value from a normally distributed random variable in the interval ]mean - standardDeviation; mean + standardDeviation[.</result>
        <seeAlso>
          <see id="gauss" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="truncated_gauss ([0.5, 0.0])" equals="0.5" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="truncated_gauss ({0, 0.3})" equals="an float between -0.3 and 0.3" isExecutable="true" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the operand is a list, only the two first elements are taken into account as [mean, standardDeviation]" />
          <usage descUsageElt="when truncated_gauss is called with a list of only one element mean, it will always return 0.0" />
          <usage descUsageElt="when the operand is a point, it is read as {mean, standardDeviation}" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="osm_file" name="osm_file" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Files.java" contentType="-13" returnType="file" type="-13">
          <operand name="s" position="0" type="string" />
          <operand name="filteringOption" position="1" type="msi.gama.util.GamaMap&lt;java.lang.String,msi.gama.util.GamaList&gt;" />
        </operands>
        <operands class="msi/gaml/operators/Files.java" contentType="-13" returnType="file" type="-13">
          <operand name="s" position="0" type="string" />
          <operand name="filteringOption" position="1" type="msi.gama.util.GamaMap&lt;java.lang.String,msi.gama.util.GamaList&gt;" />
          <operand name="code" position="2" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">opens a file that a is a kind of OSM file with some filtering.opens a file that a is a kind of OSM file with some filtering, forcing the initial CRS to be the one indicated by the second int parameter (see http://spatialreference.org/ref/epsg/). If this int parameter is equal to 0, the data is considered as already projected.</result>
        <comment>The file should have a OSM file extension, cf. file type definition for supported file extensions.The file should have a OSM file extension, cf. file type definition for supported file extensions.</comment>
        <seeAlso>
          <see id="file" />
          <see id="properties" />
          <see id="image" />
          <see id="text" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="file myOSMfile &lt;- osm_file(&quot;../includes/rouen.osm&quot;, [&quot;highway&quot;::[&quot;primary&quot;,&quot;motorway&quot;]]);" isExecutable="true" isTestOnly="false" test="false" type="file" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="file myOSMfile2 &lt;- osm_file(&quot;../includes/rouen.osm&quot;,[&quot;highway&quot;::[&quot;primary&quot;,&quot;motorway&quot;]], 0);" isExecutable="true" isTestOnly="false" test="false" type="file" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="If the specified string does not refer to an existing OSM file, an exception is risen." />
          <usage descUsageElt="If the specified string does not refer to an existing OSM file, an exception is risen." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="variance" name="variance" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Statistical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Stats.java" contentType="-13" returnType="float" type="-13">
          <operand name="values" position="0" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>the variance of the elements of the operand. See &lt;A href="http://en.wikipedia.org/wiki/Variance"&gt;Variance&lt;/A&gt; for more details.</result>
        <comment>The operator casts all the numerical element of the list into float. The elements that are not numerical are discarded.</comment>
        <seeAlso>
          <see id="mean" />
          <see id="median" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="variance ([4.5, 3.5, 5.5, 7.0])" equals="1.671875" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="circle" name="circle" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="radius" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A circle geometry which radius is equal to the operand.</result>
        <comment>the centre of the circle is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="circle(10)" equals="a geometry as a circle of radius 10." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns a point if the operand is lower or equal to 0." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="box" name="box" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
        <category id="3D" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="p" position="0" type="point" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="x" position="0" type="float" />
          <operand name="y" position="1" type="float" />
          <operand name="z" position="2" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">A box geometry which side sizes are given by the operands.</result>
        <comment>the centre of the box is by default the location of the current agent in which has been called this operator.the centre of the box is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="circle" />
          <see id="sphere" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="square" />
          <see id="cube" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="box({10, 5 , 5})" equals="a geometry as a rectangle with width = 10, heigh = 5 depth= 5." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="box(10, 5 , 5)" equals="a geometry as a rectangle with width = 10, heigh = 5 depth= 5." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns nil if the operand is nil." />
          <usage descUsageElt="returns nil if the operand is nil." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="with_optimizer_type" name="with_optimizer_type" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="graph" position="0" type="graph" />
          <operand name="optimizerType" position="1" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>changes the shortest path computation method of the griven graph</result>
        <comment>the right-hand operand can be "Djikstra", "Bellmann", "Astar" to use the associated algorithm. Note that these methods are dynamic: the path is computed when needed. In contrarily, if the operand is another string, a static method will be used, i.e. all the shortest are previously computed.</comment>
        <seeAlso>
          <see id="set_verbose" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graphEpidemio &lt;- graphEpidemio with_optimizer_type &quot;static&quot;;" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="new_folder" name="new_folder" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Files.java" contentType="4" returnType="file" type="-13">
          <operand name="folder" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>opens an existing repository or create a new folder if it does not exist.</result>
        <seeAlso>
          <see id="folder" />
          <see id="file" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="file dirNewT &lt;- new_folder(&quot;incl/&quot;);   &#x9;// dirNewT represents the repository &quot;../incl/&quot;" isExecutable="true" isTestOnly="false" test="true" type="file" />
              <example code="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// eventually creates the directory ../incl" isExecutable="true" isTestOnly="false" test="true" type="file" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="If the specified string does not refer to an existing repository, the repository is created." />
          <usage descUsageElt="If the string refers to an existing file, an exception is risen." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="teapot" name="teapot" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
        <category id="3D" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="size" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A teapot geometry which radius is equal to the operand.</result>
        <comment>the centre of the teapot is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="teapot(10)" equals="a geometry as a circle of radius 10 but displays a teapot." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns a point if the operand is lower or equal to 0." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="where" id="select" name="select" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Containers-related operators" />
        <category id="Iterator operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="where" name="where" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Iterator operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-20" returnType="list" type="-13">
          <operand name="original" position="0" type="container" />
          <operand name="filter" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>a list containing all the elements of the left-hand operand that make the right-hand operand evaluate to true.</result>
        <comment>in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.</comment>
        <seeAlso>
          <see id="first_with" />
          <see id="last_with" />
          <see id="where" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[1,2,3,4,5,6,7,8] where (each &gt; 3)" equals="[4, 5, 6, 7, 8] " isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="graph g2 &lt;- graph([]);" isExecutable="true" isTestOnly="true" test="true" type="list" />
              <example code="g2 where (length(g2 out_edges_of each) = 0 )" equals="[node9, node7, node10, node8, node11]" isExecutable="true" isTestOnly="false" test="false" type="list" />
              <example code="(list(node) where (round(node(each).location.x) &gt; 32)" equals="[node2, node3]" isExecutable="false" isTestOnly="false" test="false" type="list" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left-hand operand is a list nil, where returns a new empty list" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if the left-operand is a map, the keyword each will contain each value">
            <examples>
              <example code="[1::2, 3::4, 5::6] where (each &gt;= 4)" equals="[4, 6]" isExecutable="true" isTestOnly="false" test="true" type="list" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="paths_between" name="paths_between" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
        <category id="Path-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-20" returnType="list&lt;path&gt;" type="5">
          <operand name="graph" position="0" type="graph" />
          <operand name="sourTarg" position="1" type="pair" />
          <operand name="k" position="2" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>The K shortest paths between a list of two objects in a graph</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="paths_between(my_graph, ag1:: ag2, 2)" equals="the 2 shortest paths (ordered by length) between ag1 and ag2" isExecutable="false" isTestOnly="false" test="false" type="list&lt;path&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="as_path" name="as_path" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
        <category id="Path-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-20" returnType="path" type="17">
          <operand name="edgesNodes" position="0" type="list&lt;geometry&gt;" />
          <operand name="graph" position="1" type="graph" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>create a graph path from the list of shape</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[road1,road2,road3] as_path my_graph" equals="a path road1-&gt;road2-&gt;road3 of my_graph" isExecutable="false" isTestOnly="false" test="false" type="path" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="target_of" name="target_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="unknown" type="-23">
          <operand name="graph" position="0" type="graph" />
          <operand name="edge" position="1" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the target of the edge (right-hand operand) contained in the graph given in left-hand operand.</result>
        <seeAlso>
          <see id="source_of" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphEpidemio &lt;- generate_barabasi_albert( [&quot;edges_specy&quot;::edge,&quot;vertices_specy&quot;::node,&quot;size&quot;::3,&quot;m&quot;::5] );" isExecutable="false" isTestOnly="false" test="false" type="unknown" />
              <example code="graphEpidemio source_of(edge(3))" equals="node1" isExecutable="false" isTestOnly="false" test="false" type="unknown" />
              <example code="graph graphFromMap &lt;-  as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]);" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
              <example code="graphFromMap target_of(link({1,5}::{12,45}))" equals="{12,45}" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the lef-hand operand (the graph) is nil, returns nil" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="geometric_mean" name="geometric_mean" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Statistical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Stats.java" contentType="-13" returnType="float" type="-13">
          <operand name="values" position="0" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>the geometric mean of the elements of the operand. See &lt;A href="http://en.wikipedia.org/wiki/Geometric_mean"&gt;Geometric_mean&lt;/A&gt; for more details.</result>
        <comment>The operator casts all the numerical element of the list into float. The elements that are not numerical are discarded.</comment>
        <seeAlso>
          <see id="mean" />
          <see id="median" />
          <see id="harmonic_mean" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="geometric_mean ([4.5, 3.5, 5.5, 7.0])" equals="4.962326343467649" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="slice" name="slice" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="radius" position="0" type="float" />
          <operand name="ratio" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>An sphere geometry which radius is equal to the operand made of 2 hemisphere.</result>
        <comment>the centre of the sphere is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
          <see id="hemisphere" />
          <see id="pie3D" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="slice(10,0.3)" equals="a circle geometry of radius 10, displayed as a slice." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns a point if the operand is lower or equal to 0." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="min_of" name="min_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Iterator operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="unknown" type="-17">
          <operand name="container" position="0" type="container" />
          <operand name="filter" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>the minimum value of the right-hand expression evaluated on each of the elements of the left-hand operand</result>
        <comment>in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.</comment>
        <seeAlso>
          <see id="max_of" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph([]) min_of([])" isExecutable="true" isTestOnly="true" raises="error" test="true" type="unknown" />
              <example code="[1,2,4,3,5,7,6,8] min_of (each * 100 )" equals="100" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
              <example code="graph g2 &lt;- as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]);" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
              <example code="g2 min_of (length(g2 out_edges_of each) )" equals="0" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
              <example code="(list(node) min_of (round(node(each).location.x))" equals="4" isExecutable="false" isTestOnly="false" test="false" type="unknown" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left-hand operand is nil or empty, min_of throws an error" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if the left-operand is a map, the keyword each will contain each value">
            <examples>
              <example code="[1::2, 3::4, 5::6] min_of (each + 3)" equals="5" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="-" id="reduced_by" name="reduced_by" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="ak" id="directed" name="directed" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="g" position="0" type="graph" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>the operand graph becomes a directed graph.</result>
        <comment>the operator alters the operand graph, it does not create a new one.</comment>
        <seeAlso>
          <see id="undirected" />
        </seeAlso>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="rewire_n" name="rewire_n" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="g" position="0" type="graph" />
          <operand name="count" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>rewires the given count of edges.</result>
        <comment>If there are too many edges, all the edges will be rewired.</comment>
        <seeAlso>
          <see id="rewire_p" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphEpidemio &lt;- as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]);" isExecutable="true" isTestOnly="true" test="true" type="graph" />
              <example code="graphEpidemio rewire_n 10" equals="the graph with 3 egdes rewired" isExecutable="true" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="topology" name="topology" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Casting operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Cast.java" contentType="13" returnType="topology" type="-13">
          <operand name="val" position="0" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>casting of the operand to a topology.</result>
        <seeAlso>
          <see id="geometry" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="topology(0)" equals="nil" isExecutable="true" isTestOnly="false" test="true" type="topology" />
              <example code="topology(a_graph)&#x9;--: Multiple topology in POLYGON ((24.712119771887785 7.867357373616512, 24.712119771887785 61.283226839310565, 82.4013676510046  7.867357373616512)) at location[53.556743711446195;34.57529210646354]" isExecutable="false" isTestOnly="false" test="false" type="topology" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the operand is a topology, returns the topology itself;" />
          <usage descUsageElt="if the operand is a spatial graph, returns the graph topology associated;" />
          <usage descUsageElt="if the operand is a population, returns the topology of the population;" />
          <usage descUsageElt="if the operand is a shape or a geometry, returns the continuous topology bounded by the geometry;" />
          <usage descUsageElt="if the operand is a matrix, returns the grid topology associated" />
          <usage descUsageElt="if the operand is another kind of container, returns the multiple topology associated to the container" />
          <usage descUsageElt="otherwise, casts the operand to a geometry and build a topology from it." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="crosses" name="crosses" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial properties operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="bool" type="-13">
          <operand name="g1" position="0" type="geometry" />
          <operand name="g2" position="1" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A boolean, equal to true if the left-geometry (or agent/point) crosses the right-geometry (or agent/point).</result>
        <seeAlso>
          <see id="disjoint_from" />
          <see id="intersects" />
          <see id="overlaps" />
          <see id="partially_overlaps" />
          <see id="touches" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="polyline([{10,10},{20,20}]) crosses polyline([{10,20},{20,10}])" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polyline([{10,10},{20,20}]) crosses {15,15}" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polyline([{0,0},{25,25}]) crosses polygon([{10,10},{10,20},{20,20},{20,10}])" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if one of the operand is null, returns false." />
          <usage descUsageElt="if one operand is a point, returns false." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="evidence_theory_DM" name="evidence_theory_DM" projectName="msi.gama.core">
      <operatorCategories>
        <category id="multicriteria operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/extensions/multi_criteria/MulticriteriaAnalyzeOperator.java" contentType="-13" returnType="int" type="-13">
          <operand name="cands" position="0" type="list&lt;list&gt;" />
          <operand name="criteriaMap" position="1" type="java.util.List&lt;java.util.Map&lt;java.lang.String,java.lang.Object&gt;&gt;" />
          <operand name="simple" position="2" type="bool" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>The index of the best candidate according to a method based on the Evidence theory. This theory, which was proposed by Shafer ([http://www.glennshafer.com/books/amte.html Shafer G (1976) A mathematical theory of evidence, Princeton University Press]), is based on the work of Dempster ([http://projecteuclid.org/DPubS?service=UI&amp;version=1.0&amp;verb=Display&amp;handle=euclid.aoms/1177698950 Dempster A (1967) Upper and lower probabilities induced by multivalued mapping. Annals of Mathematical Statistics, vol.  38, pp. 325--339]) on lower and upper probability distributions. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion: A criterion is a map that contains seven elements: a name, a first threshold s1, a second threshold s2, a value for the assertion "this candidate is the best" at threshold s1 (v1p), a value for the assertion "this candidate is the best" at threshold s2 (v2p), a value for the assertion "this candidate is not the best" at threshold s1 (v1c), a value for the assertion "this candidate is not the best" at threshold s2 (v2c). v1p, v2p, v1c and v2c have to been defined in order that: v1p + v1c &lt;= 1.0; v2p + v2c &lt;= 1.0.; the last operand allows to use a simple version of this multi-criteria decision making method (simple if true)</result>
        <seeAlso>
          <see id="weighted_means_DM" />
          <see id="electre_DM" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="evidence_theory_DM([[1.0, 7.0],[4.0,2.0],[3.0, 3.0]], [[&quot;name&quot;::&quot;utility&quot;, &quot;s1&quot; :: 0.0,&quot;s2&quot;::1.0, &quot;v1p&quot;::0.0, &quot;v2p&quot;::1.0, &quot;v1c&quot;::0.0, &quot;v2c&quot;::0.0, &quot;maximize&quot; :: true],[&quot;name&quot;::&quot;price&quot;,  &quot;s1&quot; :: 0.0,&quot;s2&quot;::1.0, &quot;v1p&quot;::0.0, &quot;v2p&quot;::1.0, &quot;v1c&quot;::0.0, &quot;v2c&quot;::0.0, &quot;maximize&quot; :: true]], true)" equals="0" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns -1 is the list of candidates is nil or empty" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="median" name="median" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Statistical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Stats.java" contentType="-13" returnType="float" type="-13">
          <operand name="values" position="0" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>the median of all the elements of the operand.</result>
        <comment>The operator casts all the numerical element of the list into float. The elements that are not numerical are discarded.</comment>
        <seeAlso>
          <see id="mean" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="median ([4.5, 3.5, 5.5, 7.0])" equals="5.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="square" name="square" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="side_size" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A square geometry which side size is equal to the operand.</result>
        <comment>the centre of the square is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="circle" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="square(10)" equals="a geometry as a square of side size 10." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns nil if the operand is nil." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="promethee_DM" name="promethee_DM" projectName="msi.gama.core">
      <operatorCategories>
        <category id="multicriteria operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/extensions/multi_criteria/MulticriteriaAnalyzeOperator.java" contentType="-13" returnType="int" type="-13">
          <operand name="cands" position="0" type="list&lt;list&gt;" />
          <operand name="criteriaMap" position="1" type="java.util.List&lt;java.util.Map&lt;java.lang.String,java.lang.Object&gt;&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>The index of the best candidate according to the Promethee II method. This method is based on a comparison per pair of possible candidates along each criterion: all candidates are compared to each other by pair and ranked. More information about this method can be found in [http://www.sciencedirect.com/science?_ob=ArticleURL&amp;_udi=B6VCT-4VF56TV-1&amp;_user=10&amp;_coverDate=01%2F01%2F2010&amp;_rdoc=1&amp;_fmt=high&amp;_orig=search&amp;_sort=d&amp;_docanchor=&amp;view=c&amp;_searchStrId=1389284642&amp;_rerunOrigin=google&amp;_acct=C000050221&amp;_version=1&amp;_urlVersion=0&amp;_userid=10&amp;md5=d334de2a4e0d6281199a39857648cd36 Behzadian, M., Kazemzadeh, R., Albadvi, A., M., A.: PROMETHEE: A comprehensive literature review on methodologies and applications. European Journal of Operational Research(2009)]. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion: A criterion is a map that contains fours elements: a name, a weight, a preference value (p) and an indifference value (q). The preference value represents the threshold from which the difference between two criterion values allows to prefer one vector of values over another. The indifference value represents the threshold from which the difference between two criterion values is considered significant.</result>
        <seeAlso>
          <see id="weighted_means_DM" />
          <see id="electre_DM" />
          <see id="evidence_theory_DM" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="promethee_DM([[1.0, 7.0],[4.0,2.0],[3.0, 3.0]], [[&quot;name&quot;::&quot;utility&quot;, &quot;weight&quot; :: 2.0,&quot;p&quot;::0.5, &quot;q&quot;::0.0, &quot;s&quot;::1.0, &quot;maximize&quot; :: true],[&quot;name&quot;::&quot;price&quot;, &quot;weight&quot; :: 1.0,&quot;p&quot;::0.5, &quot;q&quot;::0.0, &quot;s&quot;::1.0, &quot;maximize&quot; :: false]])" equals="1" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns -1 is the list of candidates is nil or empty" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="." id="of" name="of" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="System" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="without_holes" id="solid" name="solid" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="without_holes" name="without_holes" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A geometry corresponding to the operand geometry (geometry, agent, point) without its holes</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="solid(self)" equals="the geometry corresponding to the geometry of the agent applying the operator without its holes." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="in_edges_of" name="in_edges_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-20" returnType="list" type="5">
          <operand name="graph" position="0" type="graph" />
          <operand name="vertex" position="1" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the list of the in-edges of a vertex (right-hand operand) in the graph given as left-hand operand.</result>
        <seeAlso>
          <see id="out_edges_of" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphFromMap &lt;- graph([]);" isExecutable="true" isTestOnly="true" test="true" type="list" />
              <example code="graphFromMap in_edges_of node({12,45})" equals="[LineString]" isExecutable="true" isTestOnly="false" test="false" type="list" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="meanR" name="meanR" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Statistical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Stats.java" contentType="-13" returnType="unknown" type="-20">
          <operand name="l" position="0" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the mean value of given vector (right-hand operand) in given variable  (left-hand operand).</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="list&lt;int&gt; X &lt;- [2, 3, 1];" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
              <example code="meanR(X)" equals="2" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="overlaps" name="overlaps" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="bool" type="-13">
          <operand name="g1" position="0" type="geometry" />
          <operand name="g2" position="1" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A boolean, equal to true if the left-geometry (or agent/point) overlaps the right-geometry (or agent/point).</result>
        <seeAlso>
          <see id="disjoint_from" />
          <see id="crosses" />
          <see id="intersects" />
          <see id="partially_overlaps" />
          <see id="touches" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="polyline([{10,10},{20,20}]) overlaps polyline([{15,15},{25,25}])" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps polygon([{15,15},{15,25},{25,25},{25,15}])" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps {25,25}" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps polygon([{35,35},{35,45},{45,45},{45,35}])" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps polyline([{10,10},{20,20}])" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps {15,15}" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps polygon([{0,0},{0,30},{30,30}, {30,0}])" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps polygon([{15,15},{15,25},{25,25},{25,15}])" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps polygon([{10,20},{20,20},{20,30},{10,30}])" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if one of the operand is null, returns false." />
          <usage descUsageElt="if one operand is a point, returns true if the point is included in the geometry" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="generate_complete_graph" name="generate_complete_graph" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/GraphsGraphstream.java" contentType="-13" returnType="graph" type="-13">
          <operand name="vertices_specy" position="0" type="species" />
          <operand name="edges_specy" position="1" type="species" />
          <operand name="size" position="2" type="int" />
          <operand name="isSychronized" position="3" type="bool" />
        </operands>
        <operands class="msi/gaml/operators/GraphsGraphstream.java" contentType="-13" returnType="graph" type="-13">
          <operand name="vertices_specy" position="0" type="species" />
          <operand name="edges_specy" position="1" type="species" />
          <operand name="size" position="2" type="int" />
          <operand name="layoutRadius" position="3" type="float" />
          <operand name="isSychronized" position="4" type="bool" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns a fully connected graph.returns a fully connected graph.</result>
        <comment>Arguments should include following elements:Arguments should include following elements:</comment>
        <seeAlso>
          <see id="generate_barabasi_albert" />
          <see id="generate_watts_strogatz" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- generate_complete_graph(" isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;myVertexSpecy," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;myEdgeSpecy," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;10," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;true);" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- generate_complete_graph(" isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;myVertexSpecy," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;myEdgeSpecy," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;10, 25," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;true);" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="&quot;vertices_specy&quot;: the species of vertices" />
          <usage descUsageElt="&quot;edges_specy&quot;: the species of edges" />
          <usage descUsageElt="&quot;size&quot;: the graph will contain size nodes." />
          <usage descUsageElt="&quot;synchronized&quot;: is the graph and the species of vertices and edges synchronized?" />
          <usage descUsageElt="&quot;vertices_specy&quot;: the species of vertices" />
          <usage descUsageElt="&quot;edges_specy&quot;: the species of edges" />
          <usage descUsageElt="&quot;size&quot;: the graph will contain size nodes." />
          <usage descUsageElt="&quot;layoutRadius&quot;: nodes of the graph will be located on a circle with radius layoutRadius and centered in the environment." />
          <usage descUsageElt="&quot;synchronized&quot;: is the graph and the species of vertices and edges synchronized?" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="rnd_choice" name="rnd_choice" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Random operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Random.java" contentType="-13" returnType="int" type="-13">
          <operand name="distribution" position="0" type="list" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns an index of the given list with a probability following the (normalized) distribution described in the list (a form of lottery)</result>
        <seeAlso>
          <see id="rnd" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="rnd_choice([0.2,0.5,0.3])" equals="2/10 chances to return 0, 5/10 chances to return 1, 3/10 chances to return 2" isExecutable="true" isTestOnly="false" test="false" type="int" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="as_intersection_graph" name="as_intersection_graph" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="13" returnType="graph" type="-13">
          <operand name="vertices" position="0" type="container" />
          <operand name="tolerance" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>creates a graph from a list of vertices (left-hand operand). An edge is created between each pair of vertices with an intersection (with a given tolerance).</result>
        <comment>as_intersection_graph is more efficient for a list of geometries (but less accurate) than as_distance_graph.</comment>
        <seeAlso>
          <see id="as_distance_graph" />
          <see id="as_edge_graph" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="list(ant) as_intersection_graph 0.5" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="." name="." projectName="msi.gama.core">
      <operatorCategories>
        <category id="System" />
        <category id="Matrix-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/System.java" contentType="-19" returnType="unknown" type="-17">
          <operand name="a" position="0" type="agent" />
          <operand name="s" position="1" type="any expression" />
        </operands>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-20" returnType="matrix" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="other" position="1" type="matrix" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">It has two different uses: it can be the dot product between 2 matrices or return an evaluation of the expresion (right-hand operand) in the scope the given agent.</result>
        <usagesNoExample>
          <usage descUsageElt="if the agent is nil or dead, throws an exception" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if the left operand is an agent, it evaluates of the expresion (right-hand operand) in the scope the given agent">
            <examples>
              <example code="agent1.location" equals="the location of the agent agent1" isExecutable="false" isTestOnly="false" test="false" type="unknown" />
              <example code="map(nil).keys" isExecutable="true" isTestOnly="false" raises="exception" test="true" type="unknown" />
            </examples>
          </usage>
          <usage descUsageElt="if both operands are matrix, returns the dot product of them">
            <examples>
              <example code="matrix([[1,1],[1,2]]) . matrix([[1,1],[1,2]])" equals="matrix([[2,3],[3,5]])" isExecutable="true" isTestOnly="false" test="true" type="matrix" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="covers" name="covers" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial properties operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="bool" type="-13">
          <operand name="g1" position="0" type="geometry" />
          <operand name="g2" position="1" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A boolean, equal to true if the left-geometry (or agent/point) covers the right-geometry (or agent/point).</result>
        <seeAlso>
          <see id="disjoint_from" />
          <see id="crosses" />
          <see id="overlaps" />
          <see id="partially_overlaps" />
          <see id="touches" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="square(5) covers square(2)" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if one of the operand is null, returns false." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="internal_at" name="internal_at" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="0" returnType="unknown" type="-13">
          <operand name="shape" position="0" type="geometry" />
          <operand name="indices" position="1" type="list" />
        </operands>
        <operands class="msi/gama/util/IContainer/Addressable.java" contentType="-13" returnType="ValueType" type="-20">
          <operand name="msi.gama.util.icontainer&lt;keytype,valuetype&gt;.addressable&lt;keytype,valuetype&gt;" position="0" type="msi.gama.util.IContainer&lt;KeyType,ValueType&gt;.Addressable&lt;KeyType,ValueType&gt;" />
          <operand name="indices" position="1" type="msi.gama.util.IList&lt;KeyType&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>For internal use only. Corresponds to the implementation of the access to containers with [index]For internal use only. Corresponds to the implementation of the access to containers with [index]</result>
        <seeAlso>
          <see id="at" />
        </seeAlso>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="layout" name="layout" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="graph" position="0" type="graph" />
          <operand name="layoutEngine" position="1" type="string" />
        </operands>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="graph" position="0" type="graph" />
          <operand name="layoutEngine" position="1" type="string" />
          <operand name="timeout" position="2" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="graph" position="0" type="graph" />
          <operand name="layoutEngine" position="1" type="string" />
          <operand name="timeout" position="2" type="int" />
          <operand name="options" position="3" type="map&lt;string,unknown&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">layouts a GAMA graph.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="path_to" name="path_to" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial relations operators" />
        <category id="Path-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="path" type="17">
          <operand name="g" position="0" type="geometry" />
          <operand name="g1" position="1" type="geometry" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="path" type="17">
          <operand name="g" position="0" type="point" />
          <operand name="g1" position="1" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">A path between two geometries (geometries, agents or points) considering the topology of the agent applying the operator.</result>
        <seeAlso>
          <see id="towards" />
          <see id="direction_to" />
          <see id="distance_between" />
          <see id="direction_between" />
          <see id="path_between" />
          <see id="distance_to" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="ag1 path_to ag2" equals="the path between ag1 and ag2 considering the topology of the agent applying the operator" isExecutable="false" isTestOnly="false" test="false" type="path" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="split_at" name="split_at" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="13" returnType="list&lt;geometry&gt;" type="-13">
          <operand name="geom" position="0" type="geometry" />
          <operand name="pt" position="1" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>The two part of the left-operand lines split at the given right-operand point</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="polyline([{1,2},{4,6}]) split_at {7,6}" equals="[polyline([{1.0,2.0},{7.0,6.0}]), polyline([{7.0,6.0},{4.0,6.0}])]" isExecutable="true" isTestOnly="false" test="true" type="list&lt;geometry&gt;" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left-operand is a point or a polygon, returns an empty list" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="as_grid" name="as_grid" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
        <category id="Grid-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="13" returnType="matrix" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="dim" position="1" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A matrix of square geometries (grid with 8-neighbourhood) with dimension given by the rigth-hand operand ({nb_cols, nb_lines}) corresponding to the square tessellation of the left-hand operand geometry (geometry, agent)</result>
        <seeAlso>
          <see id="as_4_grid" />
          <see id="as_hexagonal_grid" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="self as_grid {10, 5}" equals="a matrix of square geometries (grid with 8-neighbourhood) with 10 columns and 5 lines corresponding to the square tessellation of the geometry of the agent applying the operator." isExecutable="true" isTestOnly="false" test="false" type="matrix" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" alternativeNameOf="towards" id="direction_to" name="direction_to" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Spatial operators" />
        <category id="Spatial relations operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="towards" name="towards" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial relations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="int" type="-13">
          <operand name="agent" position="0" type="geometry" />
          <operand name="target" position="1" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>The direction (in degree) between the two geometries (geometries, agents, points) considering the topology of the agent applying the operator.</result>
        <seeAlso>
          <see id="distance_between" />
          <see id="distance_to" />
          <see id="direction_between" />
          <see id="path_between" />
          <see id="path_to" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="ag1 towards ag2" equals="the direction between ag1 and ag2 and ag3 considering the topology of the agent applying the operator" isExecutable="false" isTestOnly="false" test="false" type="int" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="sphere" name="sphere" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
        <category id="3D" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="radius" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A sphere geometry which radius is equal to the operand.</result>
        <comment>the centre of the sphere is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="sphere(10)" equals="a geometry as a circle of radius 10 but displays a sphere." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns a point if the operand is lower or equal to 0." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="antislice" name="antislice" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="radius" position="0" type="float" />
          <operand name="ratio" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A sphere geometry which radius is equal to the operand made of 2 hemispheres.</result>
        <comment>the centre of the sphere is by default the location of the current agent that is calling this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
          <see id="hemisphere" />
          <see id="pie3D" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="antislice(10,0.3)" equals="a circle geometry of radius 10, displayed as an antislice." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns a point if the operand is lower or equal to 0." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="split_geometry" id="to_squares" name="to_squares" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorsCategories>
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="13" returnType="list&lt;geometry&gt;" type="5">
          <operand name="geom" position="0" type="geometry" />
          <operand name="nbSquares" position="1" type="int" />
          <operand name="overlaps" position="2" type="bool" />
          <operand name="precision" position="3" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="13" returnType="list&lt;geometry&gt;" type="5">
          <operand name="geom" position="0" type="geometry" />
          <operand name="dimension" position="1" type="float" />
          <operand name="overlaps" position="2" type="bool" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="13" returnType="list&lt;geometry&gt;" type="5">
          <operand name="geom" position="0" type="geometry" />
          <operand name="nbSquares" position="1" type="int" />
          <operand name="overlaps" position="2" type="bool" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of a given number of squares from the decomposition of the geometry into squares (geometry, nb_square, overlaps, precision_coefficient), if overlaps = true, add the squares that overlap the border of the geometry, coefficient_precision should be close to 1.0A list of squares of the size corresponding to the given size that result from the decomposition of the geometry into squares (geometry, size, overlaps), if overlaps = true, add the squares that overlap the border of the geometryA list of a given number of squares from the decomposition of the geometry into squares (geometry, nb_square, overlaps), if overlaps = true, add the squares that overlap the border of the geometry</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="to_squares(self, 10, true, 0.99)" equals="the list of 10 squares corresponding to the discretisation into squares of the geometry of the agent applying the operator. The squares overlapping the border of the geometry are kept" isExecutable="true" isTestOnly="false" test="false" type="list&lt;geometry&gt;" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="to_squares(self, 10.0, true)" equals="the list of squares of side size 10.0 corresponding to the discretisation into squares of the geometry of the agent applying the operator. The squares overlapping the border of the geometry are kept" isExecutable="true" isTestOnly="false" test="false" type="list&lt;geometry&gt;" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="to_squares(self, 10, true)" equals="the list of 10 squares corresponding to the discretisation into squares of the geometry of the agent applying the operator. The squares overlapping the border of the geometry are kept" isExecutable="true" isTestOnly="false" test="false" type="list&lt;geometry&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="beta_index" name="beta_index" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="float" type="-13">
          <operand name="graph" position="0" type="graph" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the beta index of the graph (Measures the level of connectivity in a graph and is expressed by the relationship between the number of links (e) over the number of nodes (v) : beta = e/v.</result>
        <seeAlso>
          <see id="alpha_index" />
          <see id="gamma_index" />
          <see id="nb_cycles" />
          <see id="connectivity_index" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphEpidemio &lt;- graph([]);" isExecutable="true" isTestOnly="false" test="true" type="float" />
              <example code="beta_index(graphEpidemio)" equals="the beta index of the graph" isExecutable="true" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="generate_barabasi_albert" name="generate_barabasi_albert" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/GraphsGraphstream.java" contentType="-13" returnType="graph" type="-13">
          <operand name="vertices_specy" position="0" type="species" />
          <operand name="edges_specy" position="1" type="species" />
          <operand name="size" position="2" type="int" />
          <operand name="m" position="3" type="int" />
          <operand name="isSychronized" position="4" type="bool" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns a random scale-free network (following Barabasi-Albert (BA) model).</result>
        <comment>The Barabasi-Albert (BA) model is an algorithm for generating random scale-free networks using a preferential attachment mechanism. A scale-free network is a network whose degree distribution follows a power law, at least asymptotically.Such networks are widely observed in natural and human-made systems, including the Internet, the world wide web, citation networks, and some social networks. [From Wikipedia article]The map operand should includes following elements:</comment>
        <seeAlso>
          <see id="generate_watts_strogatz" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph&lt;yourNodeSpecy,yourEdgeSpecy&gt; graphEpidemio &lt;- generate_barabasi_albert(" isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;yourNodeSpecy," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;yourEdgeSpecy," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;3," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;5," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;true);" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="&quot;edges_specy&quot;: the species of edges" />
          <usage descUsageElt="&quot;vertices_specy&quot;: the species of vertices" />
          <usage descUsageElt="&quot;size&quot;: the graph will contain (size + 1) nodes" />
          <usage descUsageElt="&quot;m&quot;: the number of edges added per novel node" />
          <usage descUsageElt="&quot;synchronized&quot;: is the graph and the species of vertices and edges synchronized?" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="grayscale" name="grayscale" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Color-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="c" position="0" type="rgb" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Converts rgb color to grayscale value</result>
        <comment>r=red, g=greeb, b=blue. Between 0 and 255 and gray = 0.299 `*` red + 0.587 `*` green + 0.114 `*` blue (Photoshop value)</comment>
        <seeAlso>
          <see id="rgb" />
          <see id="hsb" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="grayscale (rgb(255,0,0))" equals="to a dark grey" isExecutable="false" isTestOnly="false" test="false" type="rgb" />
              <example code="grayscale (rgb(255,0,0))" equals="rgb(76,76,76)" isExecutable="true" isTestOnly="true" test="true" type="rgb" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="nodes" name="nodes" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/statements/AbstractContainerStatement.java" contentType="-13" returnType="container" type="-20">
          <operand name="nodes" position="0" type="container" />
        </operands>
      </combinaisonIO>
    </operator>
    <operator alphabetOrder="lz" id="source_of" name="source_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="unknown" type="-23">
          <operand name="graph" position="0" type="graph" />
          <operand name="edge" position="1" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the source of the edge (right-hand operand) contained in the graph given in left-hand operand.</result>
        <seeAlso>
          <see id="target_of" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphEpidemio &lt;- generate_barabasi_albert( [&quot;edges_specy&quot;::edge,&quot;vertices_specy&quot;::node,&quot;size&quot;::3,&quot;m&quot;::5] );" isExecutable="false" isTestOnly="false" test="false" type="unknown" />
              <example code="graphEpidemio source_of(edge(3))" equals="node1" isExecutable="false" isTestOnly="false" test="false" type="unknown" />
              <example code="graph graphFromMap &lt;-  as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]);" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
              <example code="graphFromMap source_of(link({1,5}::{12,45}))" equals="{1,5}" isExecutable="true" isTestOnly="false" test="true" type="point" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the lef-hand operand (the graph) is nil, throws an Exception" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="among" name="among" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-19" returnType="list" type="-13">
          <operand name="number" position="0" type="int" />
          <operand name="c" position="1" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns a list of length the value of the left-hand operand, containing random elements from the right-hand operand. As of GAMA 1.6, the order in which the elements are returned can be different than the order in which they appear in the right-hand container</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="3 among [1,2,4,3,5,7,6,8]" equals="[1,2,8] (for example)" isExecutable="true" isTestOnly="false" test="false" type="list&lt;int&gt;" />
              <example code="3 among g2" equals="[node6,node11,node7]" isExecutable="false" isTestOnly="false" test="false" type="list" />
              <example code="3 among list(node)" equals="[node1,node11,node4]" isExecutable="false" isTestOnly="false" test="false" type="list" />
              <example code="1 among [1::2,3::4]" equals="2 or 4" isExecutable="true" isTestOnly="false" test="false" type="list&lt;int&gt;" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the right-hand operand is empty, among returns a new empty list. If it is nil, it throws an error." />
          <usage descUsageElt="if the left-hand operand is greater than the length of the right-hand operand, among returns the right-hand operand (converted as a list). If it is smaller or equal to zero, it returns an empty list" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="harmonic_mean" name="harmonic_mean" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Statistical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Stats.java" contentType="-13" returnType="float" type="-13">
          <operand name="values" position="0" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>the harmonic mean of the elements of the operand. See &lt;A href="http://en.wikipedia.org/wiki/Harmonic_mean"&gt;Harmonic_mean&lt;/A&gt; for more details.</result>
        <comment>The operator casts all the numerical element of the list into float. The elements that are not numerical are discarded.</comment>
        <seeAlso>
          <see id="mean" />
          <see id="median" />
          <see id="geometric_mean" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="harmonic_mean ([4.5, 3.5, 5.5, 7.0])" equals="4.804159445407279" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="envelope" name="envelope" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="obj" position="0" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A 3D geometry that represents the box that surrounds the geometries or the surface described by the arguments. More general than geometry(arguments).envelope, as it allows to pass int, double, point, image files, shape files, asc files, or any list combining these arguments, in which case the envelope will be correctly expanded. If an envelope cannot be determined from the arguments, a default one of dimensions (0,100, 0, 100, 0, 100) is returned</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="farthest_point_to" name="farthest_point_to" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Points-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="point" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="p" position="1" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>the farthest point of the left-operand to the left-point.</result>
        <seeAlso>
          <see id="any_location_in" />
          <see id="any_point_in" />
          <see id="closest_points_with" />
          <see id="points_at" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="geom farthest_point_to(pt)" equals="the closest point of geom to pt" isExecutable="false" isTestOnly="false" test="false" type="point" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="copy_between" name="copy_between" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Strings-related operators" />
        <category id="List-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="string" type="-13">
          <operand name="target" position="0" type="string" />
          <operand name="beginIndex" position="1" type="int" />
          <operand name="endIndex" position="2" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-20" returnType="list" type="-13">
          <operand name="l1" position="0" type="list" />
          <operand name="begin" position="1" type="int" />
          <operand name="end" position="2" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns a copy of the first operand between the indexes determined by the second (inclusive) and third operands (exclusive)</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="copy_between(&quot;abcabcabc&quot;, 2,6)" equals="&quot;cabc&quot;" isExecutable="true" isTestOnly="false" test="true" type="string" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code=" copy_between ([4, 1, 6, 9 ,7], 1, 3)" equals="[1, 6]" isExecutable="true" isTestOnly="false" test="true" type="list" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="If the first operand is empty, returns an empty object of the same type" />
          <usage descUsageElt="If the second operand is greater than or equal to the third operand, return an empty object of the same type" />
          <usage descUsageElt="If the first operand is nil, raises an error" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="fact" name="fact" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="int" type="-13">
          <operand name="n" position="0" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns the factorial of the operand.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="fact(4)" equals="24" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the operand is less than 0, fact returns 0." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="direction_between" name="direction_between" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial relations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="int" type="-13">
          <operand name="t" position="0" type="topology" />
          <operand name="geometries" position="1" type="container&lt;geometry&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A direction (in degree) between a list of two geometries (geometries, agents, points) considering a topology.</result>
        <seeAlso>
          <see id="towards" />
          <see id="direction_to" />
          <see id="distance_to" />
          <see id="distance_between" />
          <see id="path_between" />
          <see id="path_to" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="my_topology direction_between [ag1, ag2]" equals="the direction between ag1 and ag2 considering the topology my_topology" isExecutable="false" isTestOnly="false" test="false" type="int" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="*" id="scaled_by" name="scaled_by" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="poisson" name="poisson" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Random operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Random.java" contentType="-13" returnType="int" type="-13">
          <operand name="mean" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A value from a random variable following a Poisson distribution (with the positive expected number of occurence lambda as operand).</result>
        <comment>The Poisson distribution is a discrete probability distribution that expresses the probability of a given number of events occurring in a fixed interval of time and/or space if these events occur with a known average rate and independently of the time since the last event, cf. Poisson distribution on Wikipedia.</comment>
        <seeAlso>
          <see id="binomial" />
          <see id="gauss" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="poisson(3.5)" equals="a random positive integer" isExecutable="true" isTestOnly="false" test="false" type="int" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="div" name="div" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="int" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="int" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="int" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="int" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the truncation of the division of the left-hand operand by the right-hand operand.</result>
        <seeAlso>
          <see id="mod" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="40.1 div 4.5" equals="8" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="40 div 4.1" equals="9" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="40 div 3" equals="13" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="40.5 div 3" equals="13" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the right-hand operand is equal to zero, raises an exception." />
          <usage descUsageElt="if the right-hand operand is equal to zero, raises an exception." />
          <usage descUsageElt="if the right-hand operand is equal to zero, raises an exception." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="as_system_date" name="as_system_date" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Strings-related operators" />
        <category id="Time-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="string" type="-13">
          <operand name="time" position="0" type="float" />
          <operand name="pattern" position="1" type="string" />
        </operands>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="string" type="-13">
          <operand name="time" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">converts a number of milliseconds in the system (for instance, the 'machine_time' variable) into a string that represents the current date represented by these milliseconds  using year, month, day, hour, minutes, seconds and time-zone offset following a given pattern (right-hand operand)</result>
        <usages>
          <usage descUsageElt="Pattern should include : &quot;%Y %M %N %D %E %h %m %s %z&quot; for outputting years, months, name of month, days, name of days, hours, minutes, seconds and the time-zone. A null or empty pattern will return the complete date as defined by the ISO 8601 standard yyyy-MM-ddThh:mm:ss w/o the time-zone offset. Names are defined using the locale of the system">
            <examples>
              <example code="2147483647 as_date &quot; %D %Y %M / %h:%m:%s %z&quot;" equals="&quot;06 2015 05 / 23:58:57 +07&quot;" isExecutable="true" isTestOnly="false" test="true" type="string" />
            </examples>
          </usage>
        </usages>
        <comment>as_system_date operator is a particular case (using a particular pattern) of the as_system_date operator.</comment>
        <seeAlso>
          <see id="as_system_time" />
          <see id="as_system_date" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="as_system_date(2147483647)" equals="&quot;2015-05-06&quot;" isExecutable="true" isTestOnly="false" test="true" type="string" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="hemisphere" name="hemisphere" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="radius" position="0" type="float" />
          <operand name="ratio" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>An hemisphere geometry which radius is equal to the operand.</result>
        <comment>the centre of the hemisphere is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
          <see id="hemisphere" />
          <see id="pie3D" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="hemisphere(10,0.5)" equals="a geometry as a circle of radius 10 but displays an hemisphere." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns a point if the operand is lower or equal to 0." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="point" name="point" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Points-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="x" position="0" type="int" />
          <operand name="y" position="1" type="float" />
          <operand name="z" position="2" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="x" position="0" type="float" />
          <operand name="y" position="1" type="float" />
          <operand name="z" position="2" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="x" position="0" type="int" />
          <operand name="y" position="1" type="int" />
          <operand name="z" position="2" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="x" position="0" type="float" />
          <operand name="y" position="1" type="int" />
          <operand name="z" position="2" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="x" position="0" type="float" />
          <operand name="y" position="1" type="int" />
          <operand name="z" position="2" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="x" position="0" type="int" />
          <operand name="y" position="1" type="int" />
          <operand name="z" position="2" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="x" position="0" type="float" />
          <operand name="y" position="1" type="float" />
          <operand name="z" position="2" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>internal use only. Use the standard construction {x,y} instead.internal use only. Use the standard construction {x,y} instead.internal use only. Use the standard construction {x,y} instead.internal use only. Use the standard construction {x,y} instead.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" alternativeNameOf="determinant" id="det" name="det" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Matrix-related operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="ak" id="determinant" name="determinant" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Matrix-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-13" returnType="float" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">The determinant of the given matrix</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="determinant(matrix([[1,2],[3,4]]))" equals="-2" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="round" name="round" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="v" position="0" type="point" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="int" type="-13">
          <operand name="v" position="0" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="int" type="-13">
          <operand name="v" position="0" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the rounded value of the operand.</result>
        <seeAlso>
          <see id="round" />
          <see id="int" />
          <see id="with_precision" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="{12345.78943,  12345.78943, 12345.78943} with_precision 2" equals="{12345.79,12345.79,12345.79}" isExecutable="true" isTestOnly="false" test="true" type="point" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="round (0.51)" equals="1" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="round (100.2)" equals="100" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="round(-0.51)" equals="-1" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the operand is an int, round returns it" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="!" id="not" name="not" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Logical operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="ak" id="!" name="!" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Logical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Logic.java" contentType="-13" returnType="bool" type="-13">
          <operand name="b" position="0" type="bool" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>opposite boolean value.</result>
        <seeAlso>
          <see id="bool" />
          <see id="and" />
          <see id="or" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="! (true)" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the parameter is not boolean, it is casted to a boolean value." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="convex_hull" name="convex_hull" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A geometry corresponding to the convex hull of the operand.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="convex_hull(self)" equals="the convex hull of the geometry of the agent applying the operator" isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="max" name="max" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Statistical operators" />
        <category id="Containers-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Stats.java" contentType="-13" returnType="unknown" type="-20">
          <operand name="l" position="0" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">the maximum element found in the operand</result>
        <comment>the max operator behavior depends on the nature of the operand</comment>
        <seeAlso>
          <see id="min" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if it is a population of a list of other type: max transforms all elements into integer and returns the maximum of them" />
          <usage descUsageElt="if it is a map, max returns the maximum among the list of all elements value" />
          <usage descUsageElt="if it is a file, max returns the maximum of the content of the file (that is also a container)" />
          <usage descUsageElt="if it is a graph, max returns the maximum of the list of the elements of the graph (that can be the list of edges or vertexes depending on the graph)" />
          <usage descUsageElt="if it is a matrix of int, float or object, max returns the maximum of all the numerical elements (thus all elements for integer and float matrices)" />
          <usage descUsageElt="if it is a matrix of geometry, max returns the maximum of the list of the geometries" />
          <usage descUsageElt="if it is a matrix of another type, max returns the maximum of the elements transformed into float" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if it is a list of int of float, max returns the maximum of all the elements">
            <examples>
              <example code="max ([100, 23.2, 34.5])" equals="100.0" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
            </examples>
          </usage>
          <usage descUsageElt="if it is a list of points: max returns the maximum of all points as a point (i.e. the point with the greatest coordinate on the x-axis, in case of equality the point with the greatest coordinate on the y-axis is chosen. If all the points are equal, the first one is returned. )">
            <examples>
              <example code="max([{1.0,3.0},{3.0,5.0},{9.0,1.0},{7.0,8.0}])" equals="{9.0,1.0}" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="distance_to" name="distance_to" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial relations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="float" type="-13">
          <operand name="source" position="0" type="geometry" />
          <operand name="target" position="1" type="geometry" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="float" type="-13">
          <operand name="source" position="0" type="point" />
          <operand name="target" position="1" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">A distance between two geometries (geometries, agents or points) considering the topology of the agent applying the operator.</result>
        <seeAlso>
          <see id="towards" />
          <see id="direction_to" />
          <see id="distance_between" />
          <see id="direction_between" />
          <see id="path_between" />
          <see id="path_to" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="ag1 distance_to ag2" equals="the distance between ag1 and ag2 considering the topology of the agent applying the operator" isExecutable="false" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="pacman" name="pacman" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="radius" position="0" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="radius" position="0" type="float" />
          <operand name="ratio" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>An pacman geometry which radius is equal to first argument.An pacman geometry with a dynamic opening mouth which radius is equal to first argument.</result>
        <comment>the centre of the sphere is by default the location of the current agent in which has been called this operator.the centre of the sphere is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
          <see id="hemisphere" />
          <see id="pie3D" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="pacman(1)" equals="a geometry as a circle of radius 10 but displays a sphere." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="pacman(1,0.2)" equals="a geometry as a circle of radius 10 but displays a sphere." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns a point if the operand is lower or equal to 0." />
          <usage descUsageElt="returns a point if the operand is lower or equal to 0." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="with_min_of" name="with_min_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Iterator operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="unknown" type="-20">
          <operand name="container" position="0" type="container" />
          <operand name="filter" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>one of elements of the left-hand operand that minimizes the value of the right-hand operand</result>
        <comment>in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.</comment>
        <seeAlso>
          <see id="where" />
          <see id="with_max_of" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[1,2,3,4,5,6,7,8] with_min_of (each )" equals="1" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
              <example code="graph g2 &lt;- graph([]);" isExecutable="true" isTestOnly="true" test="true" type="unknown" />
              <example code="g2 with_min_of (length(g2 out_edges_of each)  )" equals="node11" isExecutable="true" isTestOnly="false" test="false" type="unknown" />
              <example code="(list(node) with_min_of (round(node(each).location.x))" equals="node0" isExecutable="false" isTestOnly="false" test="false" type="unknown" />
              <example code="[1::2, 3::4, 5::6] with_min_of (each)" equals="2" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left-hand operand is nil, with_max_of returns the default value of the right-hand operand" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="signum" name="signum" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="int" type="-13">
          <operand name="d" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns -1 if the argument is negative, +1 if it is positive, 0 if it is equal to zero or not a number</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="signum(-12)" equals="-1" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="signum(14)" equals="1" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="signum(0)" equals="0" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="out_edges_of" name="out_edges_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-20" returnType="list" type="5">
          <operand name="graph" position="0" type="graph" />
          <operand name="vertex" position="1" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">returns the list of the out-edges of a vertex (right-hand operand) in the graph given as left-hand operand.</result>
        <seeAlso>
          <see id="in_edges_of" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphFromMap &lt;- graph([]);" isExecutable="true" isTestOnly="true" test="true" type="list" />
              <example code="graphFromMap out_edges_of (node(3))" equals="3" isExecutable="true" isTestOnly="false" test="false" type="list" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="+" id="union" name="union" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Spatial operators" />
      </operatorsCategories>
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Spatial operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-21" returnType="list" type="-13">
          <operand name="source" position="0" type="container" />
          <operand name="l" position="1" type="container" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="elements" position="0" type="container&lt;geometry&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns a new list containing all the elements of both containers without duplicated elements.</result>
        <seeAlso>
          <see id="inter" />
          <see id="+" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[1,2,3,4,5,6] union [2,4,9]" equals="[1,2,3,4,5,6,9]" isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="[1,2,3,4,5,6] union [0,8]" equals="[1,2,3,4,5,6,0,8]" isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="[1,3,2,4,5,6,8,5,6] union [0,8]" equals="[1,3,2,4,5,6,8,0]" isExecutable="true" isTestOnly="false" test="true" type="list" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="union([geom1, geom2, geom3])" equals="a geometry corresponding to union between geom1, geom2 and geom3" isExecutable="false" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left or right operand is nil, union throws an error" />
          <usage descUsageElt="if the right-operand is a container of points, geometries or agents, returns the geometry resulting from the union all the geometries" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="geometry_collection" name="geometry_collection" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="geometries" position="0" type="container&lt;geometry&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A geometry collection (multi-geometry) composed of the given list of geometries.</result>
        <seeAlso>
          <see id="around" />
          <see id="circle" />
          <see id="cone" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygone" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
          <see id="line" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="geometry_collection([{0,0}, {0,10}, {10,10}, {10,0}])" equals="a geometry composed of the 4 points (multi-point)." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the operand is nil, returns the point geometry {0,0}" />
          <usage descUsageElt="if the operand is composed of a single geometry, returns a copy of the geometry." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="ellipse" name="ellipse" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="xRadius" position="0" type="float" />
          <operand name="yRadius" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>An ellipse geometry which x-radius is equal to the first operand and y-radius is equal to the second operand</result>
        <comment>the centre of the ellipse is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
          <see id="circle" />
          <see id="squircle" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="ellipse(10, 10)" equals="a geometry as an ellipse of width 10 and height 10." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns a point if both operands are lower or equal to 0, a line if only one is." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="row_at" name="row_at" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Matrix-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-20" returnType="list" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="num_line" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the row at a num_line (rigth-hand operand)</result>
        <seeAlso>
          <see id="column_at" />
          <see id="columns_list" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="matrix([[&quot;el11&quot;,&quot;el12&quot;,&quot;el13&quot;],[&quot;el21&quot;,&quot;el22&quot;,&quot;el23&quot;],[&quot;el31&quot;,&quot;el32&quot;,&quot;el33&quot;]]) row_at 2" equals="[&quot;el13&quot;,&quot;el23&quot;,&quot;el33&quot;]" isExecutable="true" isTestOnly="false" test="true" type="list" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="inside" name="inside" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial queries operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-20" returnType="list&lt;agent&gt;" type="-13">
          <operand name="list" position="0" type="msi.gama.util.IContainer&lt;?,? extends msi.gama.metamodel.shape.IShape&gt;" />
          <operand name="source" position="1" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of agents among the left-operand list, species or meta-population (addition of species), covered by the operand (casted as a geometry).</result>
        <seeAlso>
          <see id="neighbours_at" />
          <see id="neighbours_of" />
          <see id="closest_to" />
          <see id="overlapping" />
          <see id="agents_overlapping" />
          <see id="agents_inside" />
          <see id="agent_closest_to" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[ag1, ag2, ag3] inside(self)" equals="the agents among ag1, ag2 and ag3 that are covered by the shape of the right-hand argument." isExecutable="false" isTestOnly="false" test="false" type="list&lt;agent&gt;" />
              <example code="(species1 + species2) inside (self)" equals="the agents among species species1 and species2 that are covered by the shape of the right-hand argument." isExecutable="false" isTestOnly="false" test="false" type="list&lt;agent&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="agent_from_geometry" name="agent_from_geometry" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
        <category id="Path-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="agent" type="11">
          <operand name="path" position="0" type="path" />
          <operand name="geom" position="1" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the agent corresponding to given geometry (right-hand operand) in the given path (left-hand operand).</result>
        <seeAlso>
          <see id="path" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="geometry line &lt;- one_of(path_followed.segments);" isExecutable="false" isTestOnly="false" test="false" type="agent" />
              <example code="road ag &lt;- road(path_followed agent_from_geometry line);" isExecutable="false" isTestOnly="false" test="false" type="agent" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left-hand operand is nil, returns nil" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="skeletonize" name="skeletonize" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="13" returnType="list&lt;geometry&gt;" type="-13">
          <operand name="g" position="0" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of geometries (polylines) corresponding to the skeleton of the operand geometry (geometry, agent)</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="skeletonize(self)" equals="the list of geometries corresponding to the skeleton of the geometry of the agent applying the operator." isExecutable="true" isTestOnly="false" test="false" type="list&lt;geometry&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="as_map" name="as_map" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Map-related operators" />
        <category id="Iterator operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-19" returnType="map" type="-13">
          <operand name="original" position="0" type="container" />
          <operand name="filter" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>produces a new map from the evaluation of the right-hand operand for each element of the left-hand operand</result>
        <comment>the right-hand operand should be a pair</comment>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[1,2,3,4,5,6,7,8] as_map (each::(each * 2))" equals="[1::2, 2::4, 3::6, 4::8, 5::10, 6::12, 7::14, 8::16]" isExecutable="true" isTestOnly="false" test="true" type="map&lt;int,int&gt;" />
              <example code="[1::2,3::4,5::6] as_map (each::(each * 2))" equals="[2::4, 4::8, 6::12] " isExecutable="true" isTestOnly="false" test="true" type="map&lt;int,int&gt;" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left-hand operand is nil, as_map throws an error." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="neighbours_of" name="neighbours_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
        <category id="Spatial operators" />
        <category id="Spatial queries operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-23" returnType="list" type="5">
          <operand name="graph" position="0" type="graph" />
          <operand name="vertex" position="1" type="unknown" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="11" returnType="list" type="-13">
          <operand name="t" position="0" type="topology" />
          <operand name="agent" position="1" type="agent" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="11" returnType="list" type="-13">
          <operand name="t" position="0" type="topology" />
          <operand name="agent" position="1" type="geometry" />
          <operand name="distance" position="2" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">a list, containing all the agents of the same species than the argument (if it is an agent) located at a distance inferior or equal to 1 to the right-hand operand agent considering the left-hand operand topology.</result>
        <seeAlso>
          <see id="predecessors_of" />
          <see id="successors_of" />
          <see id="neighbours_at" />
          <see id="closest_to" />
          <see id="overlapping" />
          <see id="agents_overlapping" />
          <see id="agents_inside" />
          <see id="agent_closest_to" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graphEpidemio neighbours_of (node(3))" equals="[node0,node2]" isExecutable="false" isTestOnly="false" test="false" type="list" />
              <example code="graphFromMap neighbours_of node({12,45})" equals="[{1.0,5.0},{34.0,56.0}]" isExecutable="false" isTestOnly="false" test="false" type="list" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="topology(self) neighbours_of self" equals="returns all the agents located at a distance lower or equal to 1 to the agent applying the operator considering its topology." isExecutable="true" isTestOnly="false" test="false" type="list" />
            </examples>
          </usage>
        </usagesExamples>
        <usages>
          <usage descUsageElt="a list, containing all the agents of the same species than the left argument (if it is an agent) located at a distance inferior or equal to the third argument to the second argument (agent, geometry or point) considering the first operand topology.">
            <examples>
              <example code="neighbours_of (topology(self), self,10)" equals="all the agents located at a distance lower or equal to 10 to the agent applying the operator considering its topology." isExecutable="true" isTestOnly="false" test="false" type="list" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="&lt;=" name="&lt;=" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Comparison operators" />
        <category id="Strings-related operators" />
        <category id="Points-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="string" />
          <operand name="b" position="1" type="string" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="p1" position="0" type="point" />
          <operand name="p" position="1" type="point" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">true if the left-hand operand is less or equal than the right-hand operand, false otherwise.</result>
        <usagesNoExample>
          <usage descUsageElt="if one of the operands is nil, returns false" />
        </usagesNoExample>
        <seeAlso>
          <see id="&gt;" />
          <see id="&lt;" />
          <see id="&gt;=" />
          <see id="=" />
          <see id="!=" />
        </seeAlso>
        <usages>
          <usage descUsageElt="if both operands are String, uses a lexicographic comparison of two strings">
            <examples>
              <example code="'abc' &lt;= 'aeb'" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage descUsageElt="if both operands are points, returns true if and only if the left component (x) of the left operand if less than or equal to x of the right one and if the right component (y) of the left operand is greater than or equal to y of the right one.">
            <examples>
              <example code="{5,7} &lt;= {4,6}" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="{5,7} &lt;= {4,8}" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usages>
        <usagesExamples>
          <usage>
            <examples>
              <example code="3 &lt;= 7" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="3 &lt;= 2.5" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="3.5 &lt;= 3.5" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="7.0 &lt;= 7" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="last_index_of" name="last_index_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Map-related operators" />
        <category id="Species-related operators" />
        <category id="List-related operators" />
        <category id="Matrix-related operators" />
        <category id="Strings-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="unknown" type="-23">
          <operand name="m" position="0" type="msi.gama.util.GamaMap&lt;?,?&gt;" />
          <operand name="o" position="1" type="unknown" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="int" type="-13">
          <operand name="l1" position="0" type="species" />
          <operand name="o" position="1" type="unknown" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="int" type="-13">
          <operand name="l1" position="0" type="list" />
          <operand name="o" position="1" type="unknown" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="point" type="-13">
          <operand name="m" position="0" type="matrix" />
          <operand name="o" position="1" type="unknown" />
        </operands>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="int" type="-13">
          <operand name="target" position="0" type="string" />
          <operand name="pattern" position="1" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">the index of the last occurence of the right operand in the left operand container</result>
        <usagesNoExample>
          <usage descUsageElt="if the left operand is a species, the last index of an agent is the same as its index" />
        </usagesNoExample>
        <comment>The definition of last_index_of and the type of the index depend on the container</comment>
        <seeAlso>
          <see id="at" />
          <see id="index_of" />
          <see id="last_index_of" />
        </seeAlso>
        <usages>
          <usage descUsageElt="if the left operand is a map, last_index_of returns the index as an int (the key of the pair)">
            <examples>
              <example code="[1::2, 3::4, 5::4] last_index_of 4" equals="5" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
            </examples>
          </usage>
          <usage descUsageElt="if the left operand is a list, last_index_of returns the index as an integer">
            <examples>
              <example code="[1,2,3,4,5,6] last_index_of 4" equals="3" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="[4,2,3,4,5,4] last_index_of 4" equals="5" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
          <usage descUsageElt="if the left operand is a matrix, last_index_of returns the index as a point">
            <examples>
              <example code="matrix([[1,2,3],[4,5,4]]) last_index_of 4" equals="{1.0,2.0}" isExecutable="true" isTestOnly="false" test="true" type="point" />
            </examples>
          </usage>
          <usage descUsageElt="if both operands are strings, returns the index within the left-hand string of the rightmost occurrence of the given right-hand string">
            <examples>
              <example code="&quot;abcabcabc&quot; last_index_of &quot;ca&quot;" equals="5" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="rnd" name="rnd" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Random operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Random.java" contentType="-13" returnType="float" type="-13">
          <operand name="min" position="0" type="float" />
          <operand name="max" position="1" type="float" />
          <operand name="step" position="2" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Random.java" contentType="-13" returnType="int" type="-13">
          <operand name="max" position="0" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Random.java" contentType="-13" returnType="point" type="-13">
          <operand name="max" position="0" type="point" />
        </operands>
        <operands class="msi/gaml/operators/Random.java" contentType="-13" returnType="point" type="-13">
          <operand name="min" position="0" type="point" />
          <operand name="max" position="1" type="point" />
        </operands>
        <operands class="msi/gaml/operators/Random.java" contentType="-13" returnType="float" type="-13">
          <operand name="max" position="0" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Random.java" contentType="-13" returnType="int" type="-13">
          <operand name="min" position="0" type="int" />
          <operand name="max" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Random.java" contentType="-13" returnType="int" type="-13">
          <operand name="min" position="0" type="int" />
          <operand name="max" position="1" type="int" />
          <operand name="step" position="2" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Random.java" contentType="-13" returnType="float" type="-13">
          <operand name="min" position="0" type="float" />
          <operand name="max" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Random.java" contentType="-13" returnType="point" type="-13">
          <operand name="min" position="0" type="point" />
          <operand name="max" position="1" type="point" />
          <operand name="step" position="2" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">a random integer in the interval [0, operand]</result>
        <comment>to obtain a probability between 0 and 1, use the expression (rnd n) / n, where n is used to indicate the precision</comment>
        <seeAlso>
          <see id="flip" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if the operand is a point, returns a point with three random float ordinates, each in the interval [0, ordinate of argument]" />
          <usage descUsageElt="if the operand is a float, returns an uniformly distributed float random number in [0.0, to]" />
        </usagesNoExample>
        <usagesExamples>
          <usage>
            <examples>
              <example code="rnd (2.0, 4.0, 0.5)" equals="a float number between 2.0 and 4.0 every 0.5" isExecutable="true" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="rnd (2)" equals="0, 1 or 2" isExecutable="true" isTestOnly="false" test="false" type="int" />
              <example code="rnd (1000) / 1000" equals="a float between 0 and 1 with a precision of 0.001" isExecutable="true" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="rnd ({2.5,3, 0.0})" equals="{x,y} with x in [0.0,2.0], y in [0.0,3.0], z = 0.0" isExecutable="true" isTestOnly="false" test="false" type="point" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="rnd ({2.0, 4.0}, {2.0, 5.0, 10.0})" equals="a point with x = 2.0, y between 2.0 and 4.0 and z between 0.0 and 10.0" isExecutable="true" isTestOnly="false" test="false" type="point" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="rnd(3.4)" equals="a random float between 0.0 and 3.4" isExecutable="true" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="rnd (2, 4)" equals="2, 3 or 4" isExecutable="true" isTestOnly="false" test="false" type="int" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="rnd (2, 12, 4)" equals="2, 6 or 10" isExecutable="true" isTestOnly="false" test="false" type="int" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="rnd (2.0, 4.0)" equals="a float number between 2.0 and 4.0" isExecutable="true" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="rnd ({2.0, 4.0}, {2.0, 5.0, 10.0}, 1)" equals="a point with x = 2.0, y equal to 2.0, 3.0 or 4.0 and z between 0.0 and 10.0 every 1.0" isExecutable="true" isTestOnly="false" test="false" type="point" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="with_precision" name="with_precision" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
        <category id="Spatial operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="v" position="0" type="float" />
          <operand name="precision" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="v" position="0" type="point" />
          <operand name="precision" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Rounds off the value of left-hand operand to the precision given by the value of right-hand operandRounds off the ordinates of the left-hand point to the precision given by the value of right-hand operand</result>
        <seeAlso>
          <see id="round" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="12345.78943 with_precision 2" equals="12345.79" isExecutable="true" isTestOnly="false" test="true" type="float" />
              <example code="123 with_precision 2" equals="123.00" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="{12345.78943, 12345.78943, 12345.78943} with_precision 2 " equals="{12345.79, 12345.79, 12345.79}" isExecutable="true" isTestOnly="false" test="true" type="point" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="successors_of" name="successors_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-23" returnType="list" type="-13">
          <operand name="graph" position="0" type="graph" />
          <operand name="vertex" position="1" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the list of successors (i.e. targets of out edges) of the given vertex (right-hand operand) in the given graph (left-hand operand)</result>
        <seeAlso>
          <see id="predecessors_of" />
          <see id="neighbours_of" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphEpidemio &lt;- as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]);" isExecutable="true" isTestOnly="true" test="true" type="list" />
              <example code="graphEpidemio successors_of ({1,5})" equals="[{12,45}]" isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="graphEpidemio successors_of node({34,56})" equals="[]" isExecutable="true" isTestOnly="false" test="true" type="list" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="at_location" id="translated_to" name="translated_to" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="ak" id="at_location" name="at_location" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="p" position="1" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A geometry resulting from the tran of a translation to the right-hand operand point of the left-hand operand (geometry, agent, point)</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="self at_location {10, 20}" equals="the geometry resulting from a translation to the location {10, 20} of the left-hand geometry (or agent)." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="file_exists" name="file_exists" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Files.java" contentType="-13" returnType="bool" type="-13">
          <operand name="s" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Test whether the parameter is the path to an existing file.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="as_matrix" name="as_matrix" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Casting operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Cast.java" contentType="-26" returnType="matrix" type="-13">
          <operand name="val" position="0" type="unknown" />
          <operand name="size" position="1" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>casts the left operand into a matrix with right operand as preferrenced size</result>
        <comment>This operator is very useful to cast a file containing raster data into a matrix.Note that both components of the right operand point should be positive, otherwise an exception is raised.The operator as_matrix creates a matrix of preferred size. It fills in it with elements of the left operand until the matrix is full If the size is to short, some elements will be omitted. Matrix remaining elements will be filled in by nil.</comment>
        <seeAlso>
          <see id="matrix" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if the right operand is nil, as_matrix is equivalent to the matrix operator" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="agents_at_distance" name="agents_at_distance" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial queries operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="11" returnType="list" type="-13">
          <operand name="distance" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of agents situated at a distance lower than the right argument.</result>
        <seeAlso>
          <see id="neighbours_at" />
          <see id="neighbours_of" />
          <see id="agent_closest_to" />
          <see id="agents_inside" />
          <see id="closest_to" />
          <see id="inside" />
          <see id="overlapping" />
          <see id="at_distance" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="agents_at_distance(20)" equals="all the agents (excluding the caller) which distance to the caller is lower than 20" isExecutable="true" isTestOnly="false" test="false" type="list" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="alpha_index" name="alpha_index" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="float" type="-13">
          <operand name="graph" position="0" type="graph" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the alpha index of the graph (measure of connectivity which evaluates the number of cycles in a graph in comparison with the maximum number of cycles. The higher the alpha index, the more a network is connected: alpha = nb_cycles / (2`*`S-5) - planar graph)</result>
        <seeAlso>
          <see id="beta_index" />
          <see id="gamma_index" />
          <see id="nb_cycles" />
          <see id="connectivity_index" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphEpidemio &lt;- graph([]);" isExecutable="true" isTestOnly="true" test="true" type="float" />
              <example code="alpha_index(graphEpidemio)" equals="the alpha index of the graph" isExecutable="true" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="cone" name="cone" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="p" position="0" type="point" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="p1" position="0" type="int" />
          <operand name="p2" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A cone geometry which min and max angles are given by the operands.A cone geometry which min and max angles are given by the operands.</result>
        <comment>the centre of the cone is by default the location of the current agent in which has been called this operator.the centre of the cone is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="circle" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="cone({0, 45})" equals="a geometry as a cone with min angle is 0 and max angle is 45." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="cone(0, 45)" equals="a geometry as a cone with min angle is 0 and max angle is 45." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns nil if the operand is nil." />
          <usage descUsageElt="returns nil if the operand is nil." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" alternativeNameOf="at" id="@" name="@" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Containers-related operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="sample" name="sample" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Strings-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/statements/WriteStatement.java" contentType="-13" returnType="string" type="-13">
          <operand name="text" position="0" type="string" />
          <operand name="expr" position="1" type="any expression" />
        </operands>
        <operands class="msi/gaml/statements/WriteStatement.java" contentType="-13" returnType="string" type="-13">
          <operand name="expr" position="0" type="any expression" />
        </operands>
      </combinaisonIO>
    </operator>
    <operator alphabetOrder="ak" id="as_4_grid" name="as_4_grid" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
        <category id="Grid-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="13" returnType="matrix" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="dim" position="1" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A matrix of square geometries (grid with 4-neighbourhood) with dimension given by the rigth-hand operand ({nb_cols, nb_lines}) corresponding to the square tessellation of the left-hand operand geometry (geometry, agent)</result>
        <seeAlso>
          <see id="as_grid" />
          <see id="as_hexagonal_grid" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="self as_4_grid {10, 5}" equals="the matrix of square geometries (grid with 4-neighbourhood) with 10 columns and 5 lines corresponding to the square tessellation of the geometry of the agent applying the operator." isExecutable="true" isTestOnly="false" test="false" type="matrix" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="in_degree_of" name="in_degree_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="int" type="1">
          <operand name="graph" position="0" type="graph" />
          <operand name="vertex" position="1" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the in degree of a vertex (right-hand operand) in the graph given as left-hand operand.</result>
        <seeAlso>
          <see id="out_degree_of" />
          <see id="degree_of" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphFromMap &lt;- graph([]);" isExecutable="true" isTestOnly="true" test="true" type="int" />
              <example code="graphFromMap in_degree_of (node(3))" equals="2" isExecutable="true" isTestOnly="false" test="false" type="int" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="mul" id="product" name="product" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Statistical operators" />
        <category id="Containers-related operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="mul" name="mul" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Statistical operators" />
        <category id="Containers-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Stats.java" contentType="-13" returnType="unknown" type="-20">
          <operand name="l" position="0" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">the product of all the elements of the operand</result>
        <comment>the mul operator behavior depends on the nature of the operand</comment>
        <seeAlso>
          <see id="sum" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if it is a list of points: mul returns the product of all points as a point (each coordinate is the product of the corresponding coordinate of each element)" />
          <usage descUsageElt="if it is a list of other types: mul transforms all elements into integer and multiplies them" />
          <usage descUsageElt="if it is a map, mul returns the product of the value of all elements" />
          <usage descUsageElt="if it is a file, mul returns the product of the content of the file (that is also a container)" />
          <usage descUsageElt="if it is a graph, mul returns the product of the list of the elements of the graph (that can be the list of edges or vertexes depending on the graph)" />
          <usage descUsageElt="if it is a matrix of int, float or object, mul returns the product of all the numerical elements (thus all elements for integer and float matrices)" />
          <usage descUsageElt="if it is a matrix of geometry, mul returns the product of the list of the geometries" />
          <usage descUsageElt="if it is a matrix of other types: mul transforms all elements into float and multiplies them" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if it is a list of int or float: mul returns the product of all the elements">
            <examples>
              <example code="mul ([100, 23.2, 34.5])" equals="80040.0" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="of_generic_species" name="of_generic_species" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Species-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-19" returnType="list" type="-13">
          <operand name="agents" position="0" type="container" />
          <operand name="s" position="1" type="species" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>a list, containing the agents of the left-hand operand whose species is that denoted by the right-hand operand and whose species extends the right-hand operand species</result>
        <seeAlso>
          <see id="of_species" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="// species test {}" isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="// species sous_test parent: test {}" isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="[sous_test(0),sous_test(1),test(2),test(3)] of_generic_species test" equals="[sous_test0,sous_test1,test2,test3]" isExecutable="false" isTestOnly="false" test="false" type="list" />
              <example code="[sous_test(0),sous_test(1),test(2),test(3)] of_generic_species sous_test" equals="[sous_test0,sous_test1]" isExecutable="false" isTestOnly="false" test="false" type="list" />
              <example code="[sous_test(0),sous_test(1),test(2),test(3)] of_species test" equals="[test2,test3]" isExecutable="false" isTestOnly="false" test="false" type="list" />
              <example code="[sous_test(0),sous_test(1),test(2),test(3)] of_species sous_test" equals="[sous_test0,sous_test1]" isExecutable="false" isTestOnly="false" test="false" type="list" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="hypot" name="hypot" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="x1" position="0" type="float" />
          <operand name="x2" position="1" type="float" />
          <operand name="y1" position="2" type="float" />
          <operand name="y2" position="3" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns sqrt(x2 +y2) without intermediate overflow or underflow.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="hypot(0,1,0,1)" equals="sqrt(2)" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="If either argument is infinite, then the result is positive infinity. If either argument is NaN and neither argument is infinite, then the result is NaN." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="agents_inside" name="agents_inside" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial queries operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="11" returnType="list&lt;agent&gt;" type="-13">
          <operand name="source" position="0" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of agents covered by the operand (casted as a geometry).</result>
        <seeAlso>
          <see id="agent_closest_to" />
          <see id="agents_overlapping" />
          <see id="closest_to" />
          <see id="inside" />
          <see id="overlapping" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="agents_inside(self)" equals="the agents that are covered by the shape of the agent applying the operator." isExecutable="true" isTestOnly="false" test="false" type="list&lt;agent&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="first_with" name="first_with" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Iterator operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="unknown" type="-20">
          <operand name="original" position="0" type="container" />
          <operand name="filter" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>the first element of the left-hand operand that makes the right-hand operand evaluate to true.</result>
        <comment>in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.</comment>
        <seeAlso>
          <see id="group_by" />
          <see id="last_with" />
          <see id="where" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[1,2,3,4,5,6,7,8] first_with (each &gt; 3)" equals="4" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
              <example code="graph g2 &lt;- graph([]);" isExecutable="true" isTestOnly="true" test="true" type="unknown" />
              <example code="g2 first_with (length(g2 out_edges_of each) = 0)" equals="node9" isExecutable="true" isTestOnly="false" test="false" type="unknown" />
              <example code="(list(node) first_with (round(node(each).location.x) &gt; 32)" equals="node2" isExecutable="false" isTestOnly="false" test="false" type="unknown" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left-hand operand is nil, first_with throws an error. If there is no element that satisfies the condition, it returns nil" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if the left-operand is a map, the keyword each will contain each value">
            <examples>
              <example code="[1::2, 3::4, 5::6] first_with (each &gt;= 4)" equals="4" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
              <example code="[1::2, 3::4, 5::6].pairs first_with (each.value &gt;= 4)" equals="3::4" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="column_at" name="column_at" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Matrix-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-20" returnType="list" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="num_line" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the column at a num_col (rigth-hand operand)</result>
        <seeAlso>
          <see id="row_at" />
          <see id="rows_list" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="matrix([[&quot;el11&quot;,&quot;el12&quot;,&quot;el13&quot;],[&quot;el21&quot;,&quot;el22&quot;,&quot;el23&quot;],[&quot;el31&quot;,&quot;el32&quot;,&quot;el33&quot;]]) column_at 2" equals="[&quot;el31&quot;,&quot;el32&quot;,&quot;el33&quot;]" isExecutable="true" isTestOnly="false" test="true" type="list" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="folder" name="folder" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Files.java" contentType="-13" returnType="file" type="-13">
          <operand name="s" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>opens an existing repository</result>
        <seeAlso>
          <see id="file" />
          <see id="new_folder" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="folder(&quot;../includes/&quot;)" isExecutable="true" isTestOnly="false" raises="error" test="true" type="file" />
              <example code="file dirT &lt;- folder(&quot;../includes/&quot;);" isExecutable="false" isTestOnly="false" test="false" type="file" />
              <example code="&#x9;&#x9;&#x9;&#x9;// dirT represents the repository &quot;../includes/&quot;" isExecutable="true" isTestOnly="false" test="true" type="file" />
              <example code="&#x9;&#x9;&#x9;&#x9;// dirT.contents here contains the list of the names of included files" isExecutable="true" isTestOnly="false" test="true" type="file" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="If the specified string does not refer to an existing repository, an exception is risen." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="copy" name="copy" projectName="msi.gama.core">
      <operatorCategories>
        <category id="System" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/System.java" contentType="-20" returnType="unknown" type="-18">
          <operand name="o" position="0" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns a copy of the operand.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="rgb_to_xyz" name="rgb_to_xyz" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="3D" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="7" returnType="list&lt;point&gt;" type="5">
          <operand name="textureFileName" position="0" type="file" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of point corresponding to RGB value of an image (r:x , g:y, b:z)</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="rgb_to_xyz(texture)" equals="a list of points" isExecutable="false" isTestOnly="false" test="false" type="list&lt;point&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="line" name="line" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="points" position="0" type="container&lt;geometry&gt;" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="points" position="0" type="container&lt;geometry&gt;" />
          <operand name="radius" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A polyline geometry from the given list of points.A polyline geometry from the given list of points represented as a cylinder of radius r.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="polyline([{0,0}, {0,10}, {10,10}, {10,0}])" equals="a polyline geometry composed of the 4 points." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <seeAlso>
          <see id="around" />
          <see id="circle" />
          <see id="cone" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygone" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if the operand is nil, returns the point geometry {0,0}" />
          <usage descUsageElt="if the operand is composed of a single point, returns a point geometry." />
          <usage descUsageElt="if the operand is nil, returns the point geometry {0,0}" />
          <usage descUsageElt="if the operand is composed of a single point, returns a point geometry." />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if a radius is added, the given list of points represented as a cylinder of radius r">
            <examples>
              <example code="polyline([{0,0}, {0,10}, {10,10}, {10,0}],0.2)" equals="a polyline geometry composed of the 4 points." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="remove_duplicates" name="remove_duplicates" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-20" returnType="list" type="-13">
          <operand name="l" position="0" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>produces a set from the elements of the operand (i.e. a list without duplicated elements)</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="remove_duplicates([3,2,5,1,2,3,5,5,5])" equals="[3,2,5,1]" isExecutable="true" isTestOnly="false" test="true" type="list" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the operand is nil, remove_duplicates returns nil" />
          <usage descUsageElt="if the operand is a graph, remove_duplicates returns the set of nodes" />
          <usage descUsageElt="if the operand is a matrix, remove_duplicates returns a matrix withtout duplicated row" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if the operand is a map, remove_duplicates returns the set of values without duplicate">
            <examples>
              <example code="remove_duplicates([1::3,2::4,3::3,5::7])" equals="[3,4,7]" isExecutable="true" isTestOnly="false" test="true" type="list" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="tanh" name="tanh" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="rv" position="0" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="rv" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the value (in the interval [-1,1]) of the hyperbolic tangent of the operand (which can be any real number, expressed in decimal degrees).</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="tanh(0)" equals="0.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
              <example code="tanh(100)" equals="1.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="user_input" name="user_input" projectName="msi.gama.core">
      <operatorCategories>
        <category id="System" />
        <category id="User control operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/System.java" contentType="-13" returnType="map&lt;string,unknown&gt;" type="-13">
          <operand name="title" position="0" type="string" />
          <operand name="expr" position="1" type="any expression" />
        </operands>
        <operands class="msi/gaml/operators/System.java" contentType="-13" returnType="map&lt;string,unknown&gt;" type="-13">
          <operand name="map" position="0" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">asks the user for some values (not defined as parameters)</result>
        <comment>This operator takes a map [string::value] as argument, displays a dialog asking the user for these values, and returns the same map with the modified values (if any). The dialog is modal and will interrupt the execution of the simulation until the user has either dismissed or accepted it. It can be used, for instance, in an init section to force the user to input new values instead of relying on the initial values of parameters :</comment>
        <usagesExamples>
          <usage>
            <examples>
              <example code="map&lt;string,unknown&gt; values2 &lt;- user_input(&quot;Enter numer of agents and locations&quot;,[&quot;Number&quot; :: 100, &quot;Location&quot; :: {10, 10}]);" isExecutable="true" isTestOnly="false" test="true" type="map&lt;string,unknown&gt;" />
              <example code="create bug number: int(values2 at &quot;Number&quot;) with: [location:: (point(values2 at &quot;Location&quot;))];" isExecutable="false" isTestOnly="false" test="false" type="map&lt;string,unknown&gt;" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="map&lt;string,unknown&gt; values &lt;- user_input([&quot;Number&quot; :: 100, &quot;Location&quot; :: {10, 10}]);" isExecutable="true" isTestOnly="false" test="true" type="map&lt;string,unknown&gt;" />
              <example code="assert (values at &quot;Number&quot;) equals: 100;" isExecutable="true" isTestOnly="true" test="true" type="map&lt;string,unknown&gt;" />
              <example code="assert (values at &quot;Location&quot;) equals: {10,10};" isExecutable="true" isTestOnly="true" test="true" type="map&lt;string,unknown&gt;" />
              <example code="create bug number: int(values at &quot;Number&quot;) with: [location:: (point(values at &quot;Location&quot;))];" isExecutable="false" isTestOnly="false" test="false" type="map&lt;string,unknown&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="edge_between" name="edge_between" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-20" returnType="unknown" type="-13">
          <operand name="graph" position="0" type="graph" />
          <operand name="verticePair" position="1" type="pair" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the edge linking two nodes</result>
        <seeAlso>
          <see id="out_edges_of" />
          <see id="in_edges_of" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graphFromMap edge_between node1::node2" equals="edge1" isExecutable="false" isTestOnly="false" test="false" type="unknown" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="sqrt" name="sqrt" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="v" position="0" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="v" position="0" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the square root of the operand.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="sqrt(4)" equals="2.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="sqrt(4)" equals="2.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the operand is negative, an exception is raised" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="triangulate" id="to_triangles" name="to_triangles" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="triangulate" name="triangulate" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="13" returnType="list&lt;geometry&gt;" type="-13">
          <operand name="g" position="0" type="geometry" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="13" returnType="list&lt;geometry&gt;" type="-13">
          <operand name="ls" position="0" type="list&lt;geometry&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">A list of geometries (triangles) corresponding to the Delaunay triangulation of the operand geometry (geometry, agent, point)</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="triangulate(self)" equals="the list of geometries (triangles) corresponding to the Delaunay triangulation of the geometry of the agent applying the operator." isExecutable="true" isTestOnly="false" test="false" type="list&lt;geometry&gt;" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="triangulate(self)" equals="the list of geometries (triangles) corresponding to the Delaunay triangulation of the geometry of the agent applying the operator." isExecutable="true" isTestOnly="false" test="false" type="list&lt;geometry&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="node" name="node" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/statements/AbstractContainerStatement.java" contentType="-13" returnType="unknown" type="-18">
          <operand name="object" position="0" type="unknown" />
          <operand name="weight" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/statements/AbstractContainerStatement.java" contentType="-13" returnType="unknown" type="-18">
          <operand name="nodeObject" position="0" type="unknown" />
        </operands>
      </combinaisonIO>
    </operator>
    <operator alphabetOrder="ak" id="as_edge_graph" name="as_edge_graph" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-20" returnType="graph" type="-13">
          <operand name="edges" position="0" type="container" />
        </operands>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="edges" position="0" type="map" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">creates a graph from the list/map of edges given as operand</result>
        <seeAlso>
          <see id="as_intersection_graph" />
          <see id="as_distance_graph" />
        </seeAlso>
        <usages>
          <usage descUsageElt="if the operand is a list, the graph will be built with elements of the list as vertices">
            <examples>
              <example code="as_edge_graph([{1,5},{12,45},{34,56}])" equals="a graph with these three vertices and reflexive links on each vertices" isExecutable="true" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
          <usage descUsageElt="if the operand is a map, the graph will be built by creating edges from pairs of the map">
            <examples>
              <example code="as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}])" equals="a graph with these three vertices and two edges" isExecutable="true" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="plan" id="polyplan" name="polyplan" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="plan" name="plan" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="points" position="0" type="container&lt;geometry&gt;" />
          <operand name="depth" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A polyline geometry from the given list of points.</result>
        <seeAlso>
          <see id="around" />
          <see id="circle" />
          <see id="cone" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygone" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="polyplan([{0,0}, {0,10}, {10,10}, {10,0}],10)" equals="a polyline geometry composed of the 4 points with a depth of 10." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the operand is nil, returns the point geometry {0,0}" />
          <usage descUsageElt="if the operand is composed of a single point, returns a point geometry." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="rnd_color" name="rnd_color" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Color-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="max" position="0" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>rgb color</result>
        <comment>Return a random color equivalent to rgb(rnd(operand),rnd(operand),rnd(operand))</comment>
        <seeAlso>
          <see id="rgb" />
          <see id="hsb" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="rnd_color(255)" equals="a random color, equivalent to rgb(rnd(255),rnd(255),rnd(255))" isExecutable="true" isTestOnly="false" test="false" type="rgb" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="cone3D" name="cone3D" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
        <category id="3D" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="radius" position="0" type="float" />
          <operand name="height" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A cone geometry which radius is equal to the operand.</result>
        <comment>the centre of the cone is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="cone3D(10.0,10.0)" equals="a geometry as a circle of radius 10 but displays a cone." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns a point if the operand is lower or equal to 0." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" alternativeNameOf="inter" id="intersection" name="intersection" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Spatial operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="ak" id="inter" name="inter" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Spatial operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-20" returnType="list" type="-13">
          <operand name="l1" position="0" type="container" />
          <operand name="l" position="1" type="container" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g1" position="0" type="geometry" />
          <operand name="g2" position="1" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>the intersection of the two operandsA geometry resulting from the intersection between the two geometries</result>
        <comment>both containers are transformed into sets (so without duplicated element, cf. remove_deplicates operator) before the set intersection is computed.</comment>
        <usages>
          <usage descUsageElt="if an operand is a map, it will be transformed into the set of its values">
            <examples>
              <example code="[1::2, 3::4, 5::6] inter [2,4]" equals="[2,4]" isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="[1::2, 3::4, 5::6] inter [1,3]" equals="[]" isExecutable="true" isTestOnly="false" test="true" type="list" />
            </examples>
          </usage>
          <usage descUsageElt="if an operand is a matrix, it will be transformed into the set of the lines">
            <examples>
              <example code="matrix([[1,2,3],[4,5,4]]) inter [3,4]" equals="[3,4]" isExecutable="true" isTestOnly="false" test="true" type="list" />
            </examples>
          </usage>
        </usages>
        <seeAlso>
          <see id="remove_duplicates" />
          <see id="union" />
          <see id="+" />
          <see id="-" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[1,2,3,4,5,6] inter [2,4]" equals="[2,4]" isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="[1,2,3,4,5,6] inter [0,8]" equals="[]" isExecutable="true" isTestOnly="false" test="true" type="list" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="square(10) inter circle(5)" equals="circle(5)" isExecutable="true" isTestOnly="false" test="true" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if an operand is a graph, it will be transformed into the set of its nodes" />
          <usage descUsageElt="returns nil if one of the operands is nil" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="voronoi" name="voronoi" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="13" returnType="list&lt;geometry&gt;" type="-13">
          <operand name="pts" position="0" type="list&lt;point&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">A list of geometries corresponding to the Voronoi diagram built from the list of points</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="voronoi([{10,10},{50,50},{90,90},{10,90},{90,10}])" equals="the list of geometries corresponding to the Voronoi Diagram built from the list of points." isExecutable="true" isTestOnly="false" test="false" type="list&lt;geometry&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="with_weights" name="with_weights" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="graph" position="0" type="graph" />
          <operand name="weights" position="1" type="list" />
        </operands>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="graph" position="0" type="graph" />
          <operand name="weights" position="1" type="map" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">returns the graph (left-hand operand) with weight given in the map (right-hand operand).</result>
        <usagesNoExample>
          <usage descUsageElt="if the right-hand operand is a list, affects the n elements of the list to the n first edges. Note that the ordering of edges may change overtime, which can create some problems..." />
        </usagesNoExample>
        <comment>this operand re-initializes the path finder</comment>
        <usages>
          <usage descUsageElt="if the left-hand operand is a map, the map should contains pairs such as: vertex/edge::double">
            <examples>
              <example code="graph_from_edges (list(ant) as_map each::one_of (list(ant))) with_weights (list(ant) as_map each::each.food)" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="first" name="first" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Strings-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gama/util/IContainer.java" contentType="-13" returnType="ValueType" type="-20">
          <operand name="msi.gama.util.icontainer&lt;keytype,valuetype&gt;" position="0" type="container" />
        </operands>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="string" type="-13">
          <operand name="s" position="0" type="string" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-19" returnType="list" type="-13">
          <operand name="number" position="0" type="int" />
          <operand name="l1" position="1" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">the first value of the operand</result>
        <comment>the first operator behavior depends on the nature of the operand</comment>
        <seeAlso>
          <see id="last" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if it is a map, first returns the first value of the first pair (in insertion order)" />
          <usage descUsageElt="if it is a file, first returns the first element of the content of the file (that is also a container)" />
          <usage descUsageElt="if it is a population, first returns the first agent of the population" />
          <usage descUsageElt="if it is a graph, first returns the first edge (in creation order)" />
          <usage descUsageElt="if it is a matrix, first returns the element at {0,0} in the matrix" />
          <usage descUsageElt="for a matrix of int or float, it will return 0 if the matrix is empty" />
          <usage descUsageElt="for a matrix of object or geometry, it will return nil if the matrix is empty" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if it is a list, first returns the first element of the list, or nil if the list is empty">
            <examples>
              <example code="first ([1, 2, 3])" equals="1" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
          <usage descUsageElt="if it is a string, first returns a string composed of its first character">
            <examples>
              <example code="first ('abce')" equals="'a'" isExecutable="true" isTestOnly="false" test="true" type="string" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="get" name="get" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Files.java" contentType="-13" returnType="unknown" type="-13">
          <operand name="g" position="0" type="agent" />
          <operand name="s" position="1" type="string" />
        </operands>
        <operands class="msi/gaml/operators/Files.java" contentType="-13" returnType="unknown" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="s" position="1" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Reads an attribute of the specified agent (left operand). The attribute name is specified by the right operand.Reads an attribute of the specified geometry (left operand). The attribute name is specified by the right operand.</result>
        <usages>
          <usage descUsageElt="Reading the attribute of another agent">
            <examples>
              <example code="string agent_name &lt;- an_agent get('name');     // reads then 'name' attribute of an_agent then assigns the returned value to the agent_name variable" isExecutable="false" isTestOnly="false" test="false" type="unknown" />
            </examples>
          </usage>
          <usage descUsageElt="Reading the attribute of a geometry">
            <examples>
              <example code="string geom_area &lt;- a_geometry get('area');     // reads then 'area' attribute of 'a_geometry' variable then assigns the returned value to the geom_area variable" isExecutable="false" isTestOnly="false" test="false" type="unknown" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="index_of" name="index_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Map-related operators" />
        <category id="Species-related operators" />
        <category id="Matrix-related operators" />
        <category id="List-related operators" />
        <category id="Strings-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="unknown" type="-13">
          <operand name="m" position="0" type="msi.gama.util.GamaMap&lt;?,?&gt;" />
          <operand name="o" position="1" type="unknown" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="int" type="-13">
          <operand name="s" position="0" type="species" />
          <operand name="o" position="1" type="unknown" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="point" type="-13">
          <operand name="m" position="0" type="matrix" />
          <operand name="o" position="1" type="unknown" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="int" type="-13">
          <operand name="l1" position="0" type="list" />
          <operand name="o" position="1" type="unknown" />
        </operands>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="int" type="-13">
          <operand name="target" position="0" type="string" />
          <operand name="pattern" position="1" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">the index of the first occurence of the right operand in the left operand containerthe index of the first occurence of the right operand in the left operand container</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[1::2, 3::4, 5::6] index_of 4" equals="3" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left operand is a map, index_of returns the index of a value or nil if the value is not mapped" />
          <usage descUsageElt="if the left operator is a species, returns the index of an agent in a species. If the argument is not an agent of this species, returns -1. Use int(agent) instead" />
        </usagesNoExample>
        <comment>The definition of index_of and the type of the index depend on the container</comment>
        <seeAlso>
          <see id="at" />
          <see id="last_index_of" />
        </seeAlso>
        <usages>
          <usage descUsageElt="if the left operand is a matrix, index_of returns the index as a point">
            <examples>
              <example code="matrix([[1,2,3],[4,5,6]]) index_of 4" equals="{1.0,0.0}" isExecutable="true" isTestOnly="false" test="true" type="point" />
            </examples>
          </usage>
          <usage descUsageElt="if the left operand is a list, index_of returns the index as an integer">
            <examples>
              <example code="[1,2,3,4,5,6] index_of 4" equals="3" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="[4,2,3,4,5,4] index_of 4" equals="0" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
          <usage descUsageElt="if both operands are strings, returns the index within the left-hand string of the first occurrence of the given right-hand string">
            <examples>
              <example code=" &quot;abcabcabc&quot; index_of &quot;ca&quot;" equals="2" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="=" name="=" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Comparison operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="unknown" />
          <operand name="b" position="1" type="unknown" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">returns true if both operands are equal, false otherwisereturns true if both operands are equal, false otherwise</result>
        <usages>
          <usage descUsageElt="if both operands are any kind of objects, returns true if they are identical (i.e., the same object) or equal (comparisons between nil values are permitted)">
            <examples>
              <example code="[2,3] = [2,3]" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usages>
        <seeAlso>
          <see id="&gt;" />
          <see id="&lt;" />
          <see id="&gt;=" />
          <see id="&lt;=" />
          <see id="!=" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="4.5 = 4.7" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="3 = 3.0" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="4 = 4.7" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="4.7 = 4" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="4 = 5" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="floor" name="floor" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="d" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Maps the operand to the largest previous following integer, i.e. the largest integer not greater than x.</result>
        <seeAlso>
          <see id="ceil" />
          <see id="round" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="floor(3)" equals="3.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
              <example code="floor(3.5)" equals="3.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
              <example code="floor(-4.7)" equals="-5.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="spherical_pie" name="spherical_pie" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="radius" position="0" type="float" />
          <operand name="ratio" position="1" type="list&lt;float&gt;" />
          <operand name="colors" position="2" type="msi.gama.util.IList&lt;msi.gama.util.GamaColor&gt;" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="radius" position="0" type="float" />
          <operand name="ratio" position="1" type="list&lt;float&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>An sphere geometry which radius is equal to the operand made of n pie.An sphere geometry which radius is equal to the operand made of n pie.</result>
        <comment>the centre of the sphere is by default the location of the current agent in which has been called this operator.the centre of the sphere is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
          <see id="hemisphere" />
          <see id="pie3D" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="spherical_pie(10/2,[0.1,0.9],[#red,#green])" equals="a circle geometry of radius 10, displayed as a sphere with 2 slices." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="spherical_pie(10,[1.0,1.0,1.0])" equals="a circle geometry of radius 10, displayed as a sphere with 4 slices." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns a point if the operand is lower or equal to 0." />
          <usage descUsageElt="returns a point if the operand is lower or equal to 0." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id=":" name=":" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Logical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Logic.java" contentType="-21" returnType="unknown" type="-21">
          <operand name="a" position="0" type="unknown" />
          <operand name="b" position="1" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result />
        <seeAlso>
          <see id="?" />
        </seeAlso>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="betweenness_centrality" name="betweenness_centrality" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="2" returnType="map" type="10">
          <operand name="graph" position="0" type="graph" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns a map containing for each vertex (key), its betweenness centrality (value): number of shortest paths passing through each vertex</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphEpidemio &lt;- graph([]);" isExecutable="true" isTestOnly="false" test="true" type="map" />
              <example code="betweenness_centrality(graphEpidemio)" equals="the betweenness centrality index of the graph" isExecutable="true" isTestOnly="false" test="false" type="map" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="blend" name="blend" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Color-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="c1" position="0" type="rgb" />
          <operand name="c2" position="1" type="rgb" />
          <operand name="r" position="2" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="color1" position="0" type="rgb" />
          <operand name="color2" position="1" type="rgb" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Blend two colors with an optional ratio (c1 `*` r + c2 `*` (1 - r)) between 0 and 1</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="blend(#red, #blue, 0.3)" equals="rgb(76,0,178)" isExecutable="true" isTestOnly="true" test="true" type="rgb" />
              <example code="blend(#red, #blue, 0.3)" equals="to a color between the purple and the blue" isExecutable="false" isTestOnly="false" test="false" type="rgb" />
            </examples>
          </usage>
        </usagesExamples>
        <seeAlso>
          <see id="rgb" />
          <see id="hsb" />
        </seeAlso>
        <usages>
          <usage descUsageElt="If the ratio is ommitted, an even blend is done">
            <examples>
              <example code="blend(#red, #blue)" equals="rgb(127,0,127)" isExecutable="true" isTestOnly="true" test="true" type="rgb" />
              <example code="blend(#red, #blue)" equals="to a color very close to the purple" isExecutable="false" isTestOnly="false" test="false" type="rgb" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="closest_points_with" name="closest_points_with" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Points-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="7" returnType="list&lt;point&gt;" type="5">
          <operand name="a" position="0" type="geometry" />
          <operand name="b" position="1" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of two closest points between the two geometries.</result>
        <seeAlso>
          <see id="any_location_in" />
          <see id="any_point_in" />
          <see id="farthest_point_to" />
          <see id="points_at" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="geom1 closest_points_with(geom2)" equals="[pt1, pt2] with pt1 the closest point of geom1 to geom2 and pt1 the closest point of geom2 to geom1" isExecutable="false" isTestOnly="false" test="false" type="list&lt;point&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="as_time" name="as_time" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Strings-related operators" />
        <category id="Time-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="string" type="-13">
          <operand name="time" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>converts  a number of seconds in the model  (for example, the value of the 'time' variable)  into a string that represents the current number of hours, minutes and seconds of the period elapsed since the beginning of the simulation. As GAMA has no conception of time zones, the time is expressed as if the model was at GMT+00</result>
        <comment>as_time operator is a particular case (using a particular pattern) of the as_date operator.</comment>
        <seeAlso>
          <see id="as_date" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="as_time(22324234)" equals="&quot;09:10:34&quot;" isExecutable="true" isTestOnly="false" test="true" type="string" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="contains_vertex" name="contains_vertex" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="bool" type="3">
          <operand name="graph" position="0" type="graph" />
          <operand name="vertex" position="1" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns true if the graph(left-hand operand) contains the given vertex (righ-hand operand), false otherwise</result>
        <seeAlso>
          <see id="contains_edge" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphFromMap&lt;-  as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]);" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="graphFromMap contains_vertex {1,5}" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left-hand operand is nil, returns false" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="pyramid" name="pyramid" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
        <category id="3D" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="side_size" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A square geometry which side size is given by the operand.</result>
        <comment>the centre of the pyramid is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="circle" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="pyramid(5)" equals="a geometry as a square with side_size = 5." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns nil if the operand is nil." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="index_by" name="index_by" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Iterator operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-20" returnType="map" type="-13">
          <operand name="original" position="0" type="container" />
          <operand name="keyProvider" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>produces a new map from the evaluation of the right-hand operand for each element of the left-hand operand</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[1,2,3,4,5,6,7,8] index_by (each - 1)" equals="[0::1, 1::2, 2::3, 3::4, 4::5, 5::6, 6::7, 7::8]" isExecutable="true" isTestOnly="false" test="true" type="map" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left-hand operand is nil, index_by throws an error." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" alternativeNameOf="any_location_in" id="any_point_in" name="any_point_in" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Spatial operators" />
        <category id="Points-related operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="ak" id="any_location_in" name="any_location_in" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Points-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="point" type="-13">
          <operand name="g" position="0" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A point inside (or touching) the operand-geometry.</result>
        <seeAlso>
          <see id="closest_points_with" />
          <see id="farthest_point_to" />
          <see id="points_at" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="any_location_in(square(5))" equals="a point in the square, for example : {3,4.6}." isExecutable="true" isTestOnly="false" test="false" type="point" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="sin" name="sin" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="rv" position="0" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="rv" position="0" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the value (in [-1,1]) of the sinus of the operand (in decimal degrees). The argument is casted to an int before being evaluated.</result>
        <seeAlso>
          <see id="cos" />
          <see id="tan" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="Operand values out of the range [0-359] are normalized." />
        </usagesNoExample>
        <usagesExamples>
          <usage>
            <examples>
              <example code="sin(360)" equals="0.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="sin (0)" equals="0.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="writable" name="writable" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Files.java" contentType="-13" returnType="file" type="-13">
          <operand name="s" position="0" type="file" />
          <operand name="writable" position="1" type="bool" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Marks the file as read-only or not, depending on the second boolean argument, and returns the first argument</result>
        <comment>A file is created using its native flags. This operator can change them. Beware that this change is system-wide (and not only restrained to GAMA): changing a file to read-only mode (e.g. "writable(f, false)")</comment>
        <seeAlso>
          <see id="file" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="shape_file(&quot;../images/point_eau.shp&quot;) writable false" equals="returns a file in read-only mode" isExecutable="true" isTestOnly="false" test="false" type="file" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="length" name="length" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Strings-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gama/util/IContainer.java" contentType="-13" returnType="int" type="-13">
          <operand name="msi.gama.util.icontainer&lt;keytype,valuetype&gt;" position="0" type="container" />
        </operands>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="int" type="-13">
          <operand name="s" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">the number of elements contained in the operand</result>
        <comment>the length operator behavior depends on the nature of the operand</comment>
        <usagesNoExample>
          <usage descUsageElt="if it is a population, length returns number of agents of the population" />
          <usage descUsageElt="if it is a graph, length returns the number of vertexes or of edges (depending on the way it was created)" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if it is a list or a map, length returns the number of elements in the list or map">
            <examples>
              <example code="length([12,13])" equals="2" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="length([])" equals="0" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
          <usage descUsageElt="if it is a matrix, length returns the number of cells">
            <examples>
              <example code="length(matrix([[&quot;c11&quot;,&quot;c12&quot;,&quot;c13&quot;],[&quot;c21&quot;,&quot;c22&quot;,&quot;c23&quot;]]))" equals="6" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
          <usage descUsageElt="if it is a string, length returns the number of characters">
            <examples>
              <example code="length ('I am an agent')" equals="13" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="group_by" name="group_by" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Iterator operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-18" returnType="map" type="-13">
          <operand name="original" position="0" type="container" />
          <operand name="filter" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns a map, where the keys take the possible values of the right-hand operand and the map values are the list of elements of the left-hand operand associated to the key value</result>
        <comment>in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.</comment>
        <seeAlso>
          <see id="first_with" />
          <see id="last_with" />
          <see id="where" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[1,2,3,4,5,6,7,8] group_by (each &gt; 3)" equals="[false::[1, 2, 3], true::[4, 5, 6, 7, 8]]" isExecutable="true" isTestOnly="false" test="true" type="map" />
              <example code="g2 group_by (length(g2 out_edges_of each) )" equals="[ 0::[node9, node7, node10, node8, node11], 1::[node6], 2::[node5], 3::[node4]]" isExecutable="false" isTestOnly="false" test="false" type="map" />
              <example code="(list(node) group_by (round(node(each).location.x))" equals="[32::[node5], 21::[node1], 4::[node0], 66::[node2], 96::[node3]]" isExecutable="false" isTestOnly="false" test="false" type="map" />
              <example code="[1::2, 3::4, 5::6] group_by (each &gt; 4)" equals="[false::[2, 4], true::[6]]" isExecutable="true" isTestOnly="false" test="true" type="map" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left-hand operand is nil, group_by throws an error" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="even" name="even" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="bool" type="-13">
          <operand name="rv" position="0" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns true if the operand is even and false if it is odd.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="even (3)" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="even(-12)" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the operand is equal to 0, it returns true." />
          <usage descUsageElt="if the operand is a float, it is truncated before" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="contains_all" name="contains_all" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Strings-related operators" />
        <category id="Containers-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="bool" type="-13">
          <operand name="target" position="0" type="string" />
          <operand name="l" position="1" type="list" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="bool" type="-13">
          <operand name="m" position="0" type="container" />
          <operand name="l" position="1" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>true if the left operand contains all the elements of the right operand, false otherwise</result>
        <usages>
          <usage descUsageElt="if the left-operand is a string, test whether the string contains all the element of the list;">
            <examples>
              <example code="&quot;abcabcabc&quot; contains_all [&quot;ca&quot;,&quot;xy&quot;]" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usages>
        <comment>the definition of contains depends on the container</comment>
        <seeAlso>
          <see id="contains" />
          <see id="contains_any" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[1,2,3,4,5,6] contains_all [2,4]" equals="true " isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="[1,2,3,4,5,6] contains_all [2,8]" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="[1::2, 3::4, 5::6] contains_all [1,3]" equals="false " isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="[1::2, 3::4, 5::6] contains_all [2,4]" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the right operand is nil or empty, contains_all returns true" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="grid_at" name="grid_at" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Points-related operators" />
        <category id="Grid-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="agent" type="-20">
          <operand name="s" position="0" type="species" />
          <operand name="val" position="1" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the cell of the grid (right-hand operand) at the position given by the right-hand operand</result>
        <comment>If the left-hand operand is a point of floats, it is used as a point of ints.</comment>
        <usagesExamples>
          <usage>
            <examples>
              <example code="grid_cell grid_at {1,2}" equals="the agent grid_cell with grid_x=1 and grid_y = 2" isExecutable="false" isTestOnly="false" test="false" type="agent" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left-hand operand is not a grid cell species, returns nil" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="curve" name="curve" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="P0" position="0" type="point" />
          <operand name="P1" position="1" type="point" />
          <operand name="P2" position="2" type="point" />
          <operand name="nbPoints" position="3" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="P0" position="0" type="point" />
          <operand name="P1" position="1" type="point" />
          <operand name="P2" position="2" type="point" />
          <operand name="P3" position="3" type="point" />
          <operand name="nbPoints" position="4" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="P0" position="0" type="point" />
          <operand name="P1" position="1" type="point" />
          <operand name="P2" position="2" type="point" />
          <operand name="P3" position="3" type="point" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="P0" position="0" type="point" />
          <operand name="P1" position="1" type="point" />
          <operand name="P2" position="2" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A quadratic Bezier curve geometry built from the three given points composed of a given numnber of points.A cubic Bezier curve geometry built from the four given points composed of a given number of points.A cubic Bezier curve geometry built from the four given points composed of 10 points.A quadratic Bezier curve geometry built from the three given points composed of 10 points.</result>
        <seeAlso>
          <see id="around" />
          <see id="circle" />
          <see id="cone" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygone" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
          <see id="line" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="curve({0,0}, {0,10}, {10,10}, 20)" equals="a quadratic Bezier curve geometry composed of 20 points from p0 to p2." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="curve({0,0}, {0,10}, {10,10})" equals="a cubic Bezier curve geometry composed of 10 points from p0 to p3." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="curve({0,0}, {0,10}, {10,10})" equals="a cubic Bezier curve geometry composed of 10 points from p0 to p3." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="curve({0,0}, {0,10}, {10,10})" equals="a quadratic Bezier curve geometry composed of 10 points from p0 to p2." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the operand is nil, returns nil" />
          <usage descUsageElt="if the last operand (number of points) is inferior to 2, returns nil" />
          <usage descUsageElt="if the operand is nil, returns nil" />
          <usage descUsageElt="if the last operand (number of points) is inferior to 2, returns nil" />
          <usage descUsageElt="if the operand is nil, returns nil" />
          <usage descUsageElt="if the operand is nil, returns nil" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="triangle" name="triangle" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="side_size" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A triangle geometry which side size is given by the operand.</result>
        <comment>the centre of the triangle is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="circle" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="triangle(5)" equals="a geometry as a triangle with side_size = 5." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns nil if the operand is nil." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="remove_node_from" name="remove_node_from" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="node" position="0" type="geometry" />
          <operand name="g" position="1" type="graph" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>removes a node from a graph.</result>
        <comment>all the edges containing this node are also removed.</comment>
        <usagesExamples>
          <usage>
            <examples>
              <example code="node(0) remove_node_from graphEpidemio" equals="the graph without node(0)" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="split_geometry" name="split_geometry" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="13" returnType="list&lt;geometry&gt;" type="-13">
          <operand name="geom" position="0" type="geometry" />
          <operand name="dimension" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="13" returnType="list&lt;geometry&gt;" type="-13">
          <operand name="geom" position="0" type="geometry" />
          <operand name="nbCols" position="1" type="int" />
          <operand name="nbRows" position="2" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="13" returnType="list&lt;geometry&gt;" type="-13">
          <operand name="geom" position="0" type="geometry" />
          <operand name="dimension" position="1" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of geometries that result from the decomposition of the geometry by square cells of the given side size (geometry, size)A list of geometries that result from the decomposition of the geometry according to a grid with the given number of rows and columns (geometry, nb_cols, nb_rows)A list of geometries that result from the decomposition of the geometry by rectangle cells of the given dimension (geometry, {size_x, size_y})</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="to_squares(self, 10.0)" equals="the list of the geometries corresponding to the decomposition of the geometry by squares of side size 10.0" isExecutable="true" isTestOnly="false" test="false" type="list&lt;geometry&gt;" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="to_rectangles(self, 10,20)" equals="the list of the geometries corresponding to the decomposition of the geometry of the agent applying the operator" isExecutable="true" isTestOnly="false" test="false" type="list&lt;geometry&gt;" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="to_rectangles(self, {10.0, 15.0})" equals="the list of the geometries corresponding to the decomposition of the geometry by rectangles of size 10.0, 15.0" isExecutable="true" isTestOnly="false" test="false" type="list&lt;geometry&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="transformed_by" name="transformed_by" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="p" position="1" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A geometry resulting from the application of a rotation and a scaling (rigth-operand : point {angle(degree), scale factor} of the left-hand operand (geometry, agent, point)</result>
        <seeAlso>
          <see id="rotated_by" />
          <see id="translated_by" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="self transformed_by {45, 0.5}" equals="the geometry resulting from 45 degrees rotation and 50% scaling of the geometry of the agent applying the operator." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="append_horizontally" name="append_horizontally" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Matrix-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gama/util/matrix/GamaMatrix.java" contentType="-21" returnType="matrix" type="-13">
          <operand name="msi.gama.util.matrix.gamamatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="b" position="1" type="matrix" />
        </operands>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-21" returnType="matrix" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="b" position="1" type="matrix" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">A matrix resulting from the concatenation of the rows of the two given matrices. If not both numerical or both object matrices, returns the first matrix.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="matrix([[1.0,2.0],[3.0,4.0]]) append_horizontally matrix([[1,2],[3,4]])" equals="matrix([[1.0,2.0],[3.0,4.0],[1.0,2.0],[3.0,4.0]])" isExecutable="true" isTestOnly="false" test="true" type="matrix" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="last_with" name="last_with" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Iterator operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="unknown" type="-20">
          <operand name="original" position="0" type="container" />
          <operand name="filter" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>the last element of the left-hand operand that makes the right-hand operand evaluate to true.</result>
        <comment>in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.</comment>
        <seeAlso>
          <see id="group_by" />
          <see id="first_with" />
          <see id="where" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[1,2,3,4,5,6,7,8] last_with (each &gt; 3)" equals="8" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
              <example code="graph g2 &lt;- graph([]);" isExecutable="true" isTestOnly="true" test="true" type="unknown" />
              <example code="g2 last_with (length(g2 out_edges_of each) = 0 )" equals="node11" isExecutable="false" isTestOnly="false" test="false" type="unknown" />
              <example code="(list(node) last_with (round(node(each).location.x) &gt; 32)" equals="node3" isExecutable="false" isTestOnly="false" test="false" type="unknown" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left-hand operand is nil, last_with throws an error." />
          <usage descUsageElt="If there is no element that satisfies the condition, it returns nil" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if the left-operand is a map, the keyword each will contain each value">
            <examples>
              <example code="[1::2, 3::4, 5::6] last_with (each &gt;= 4)" equals="6" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
              <example code="[1::2, 3::4, 5::6].pairs last_with (each.value &gt;= 4)" equals="5::6" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="last" name="last" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Strings-related operators" />
        <category id="Containers-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="string" type="-13">
          <operand name="s" position="0" type="string" />
        </operands>
        <operands class="msi/gama/util/IContainer.java" contentType="-13" returnType="ValueType" type="-20">
          <operand name="msi.gama.util.icontainer&lt;keytype,valuetype&gt;" position="0" type="container" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-19" returnType="list" type="-13">
          <operand name="number" position="0" type="int" />
          <operand name="l1" position="1" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">the last element of the operand</result>
        <comment>the last operator behavior depends on the nature of the operand</comment>
        <seeAlso>
          <see id="first" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if it is a map, last returns the value of the last pair (in insertion order)" />
          <usage descUsageElt="if it is a file, last returns the last element of the content of the file (that is also a container)" />
          <usage descUsageElt="if it is a population, last returns the last agent of the population" />
          <usage descUsageElt="if it is a graph, last returns a list containing the last edge created" />
          <usage descUsageElt="if it is a matrix, last returns the element at {length-1,length-1} in the matrix" />
          <usage descUsageElt="for a matrix of int or float, it will return 0 if the matrix is empty" />
          <usage descUsageElt="for a matrix of object or geometry, it will return nil if the matrix is empty" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if it is a string, last returns a string composed of its last character, or an empty string if the operand is empty">
            <examples>
              <example code="last ('abce')" equals="'e'" isExecutable="true" isTestOnly="false" test="true" type="string" />
            </examples>
          </usage>
          <usage descUsageElt="if it is a list, last returns the last element of the list, or nil if the list is empty">
            <examples>
              <example code="last ([1, 2, 3])" equals="3" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="/" name="/" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Points-related operators" />
        <category id="Matrix-related operators" />
        <category id="Arithmetic operators" />
        <category id="Color-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="p" position="0" type="point" />
          <operand name="d" position="1" type="float" />
        </operands>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-20" returnType="matrix" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="val" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="c" position="0" type="rgb" />
          <operand name="i" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="p" position="0" type="point" />
          <operand name="d" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="c" position="0" type="rgb" />
          <operand name="i" position="1" type="float" />
        </operands>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="2" returnType="matrix" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="other" position="1" type="matrix" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-20" returnType="matrix" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="val" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the division of the two operands.</result>
        <seeAlso>
          <see id="*" />
          <see id="+" />
          <see id="-" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if the right-hand operand is equal to zero, raises a &quot;Division by zero&quot; exception" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if the left operand is a point, returns a new point with coordinates divided by the right operand">
            <examples>
              <example code="{5, 7.5} / 2.5" equals="{2, 3}" isExecutable="true" isTestOnly="false" test="true" type="point" />
              <example code="{2,5} / 4" equals="{0.5,1.25}" isExecutable="true" isTestOnly="false" test="true" type="point" />
            </examples>
          </usage>
          <usage descUsageElt="if one operand is a color and the other an integer, returns a new color resulting from the division of each component of the color by the right operand">
            <examples>
              <example code="rgb([255, 128, 32]) / 2" equals="rgb([127,64,16])" isExecutable="true" isTestOnly="false" test="true" type="rgb" />
            </examples>
          </usage>
          <usage descUsageElt="if one operand is a color and the other a double, returns a new color resulting from the division of each component of the color by the right operand. The result on each component is then truncated.">
            <examples>
              <example code="rgb([255, 128, 32]) / 2.5" equals="rgb([102,51,13])" isExecutable="true" isTestOnly="false" test="true" type="rgb" />
            </examples>
          </usage>
          <usage descUsageElt="if both operands are numbers (float or int), performs a normal arithmetic division and returns a float.">
            <examples>
              <example code="3 / 5.0" equals="0.6" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="of_species" name="of_species" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Species-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-19" returnType="list" type="-13">
          <operand name="agents" position="0" type="container" />
          <operand name="s" position="1" type="species" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>a list, containing the agents of the left-hand operand whose species is the one denoted by the right-hand operand.The expression agents of_species (species self) is equivalent to agents where (species each = species self); however, the advantage of using the first syntax is that the resulting list is correctly typed with the right species, whereas, in the second syntax, the parser cannot determine the species of the agents within the list (resulting in the need to cast it explicitely if it is to be used in an ask statement, for instance).</result>
        <seeAlso>
          <see id="of_generic_species" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="(self neighbours_at 10) of_species (species (self))" equals="all the neighbouring agents of the same species." isExecutable="false" isTestOnly="false" test="false" type="list" />
              <example code="[test(0),test(1),node(1),node(2)] of_species test" equals="[test0,test1]" isExecutable="false" isTestOnly="false" test="false" type="list" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the right operand is nil, of_species returns the right operand" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="collect" name="collect" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Iterator operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-17" returnType="list" type="-13">
          <operand name="original" position="0" type="container" />
          <operand name="filter" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns a new list, in which each element is the evaluation of the right-hand operand.</result>
        <comment>collect is similar to accumulate except that accumulate always produces flat lists if the right-hand operand returns a list.In addition, collect can be applied to any container.</comment>
        <seeAlso>
          <see id="accumulate" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[1,2,4] collect (each *2)" equals="[2,4,8]" isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="[1,2,4] collect ([2,4])" equals="[[2,4],[2,4],[2,4]]" isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="[1::2, 3::4, 5::6] collect (each + 2)" equals="[4,6,8]" isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="(list(node) collect (node(each).location.x * 2)" equals="the list of nodes with their x multiplied by 2" isExecutable="false" isTestOnly="false" test="false" type="list" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the left-hand operand is nil, collect throws an error" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="connected_components_of" name="connected_components_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="5" returnType="msi.gama.util.IList&lt;msi.gama.util.IList&gt;" type="5">
          <operand name="graph" position="0" type="graph" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the connected components of of a graph, i.e. the list of all vertices that are in the maximally connected component together with the specified vertex.</result>
        <seeAlso>
          <see id="alpha_index" />
          <see id="connectivity_index" />
          <see id="nb_cycles" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph my_graph &lt;- graph([]);" isExecutable="true" isTestOnly="false" test="true" type="msi.gama.util.IList&lt;msi.gama.util.IList&gt;" />
              <example code="connected_components_of (my_graph)" equals="the list of all the components as list" isExecutable="true" isTestOnly="false" test="false" type="msi.gama.util.IList&lt;msi.gama.util.IList&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="mean" name="mean" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Statistical operators" />
        <category id="Containers-related operators" />
        <category id="Color-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Stats.java" contentType="-13" returnType="unknown" type="-20">
          <operand name="expr" position="0" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>the mean of all the elements of the operand</result>
        <comment>the elements of the operand are summed (see sum for more details about the sum of container elements ) and then the sum value is divided by the number of elements.</comment>
        <seeAlso>
          <see id="sum" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="mean ([4.5, 3.5, 5.5, 7.0])" equals="5.125 " isExecutable="true" isTestOnly="false" test="true" type="unknown" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the container contains points, the result will be a point. If the container contains rgb values, the result will be a rgb color" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="in" name="in" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Strings-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="bool" type="-13">
          <operand name="o" position="0" type="unknown" />
          <operand name="source" position="1" type="container" />
        </operands>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="bool" type="-13">
          <operand name="pattern" position="0" type="string" />
          <operand name="target" position="1" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>true if the right operand contains the left operand, false otherwise</result>
        <comment>the definition of in depends on the container</comment>
        <seeAlso>
          <see id="contains" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="2 in [1,2,3,4,5,6]" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="7 in [1,2,3,4,5,6]" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="3 in [1::2, 3::4, 5::6]" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="6 in [1::2, 3::4, 5::6]" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code=" 'bc' in 'abcded'" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the right operand is nil or empty, in returns false" />
          <usage descUsageElt="if both operands are strings, returns true if the left-hand operand patterns is included in to the right-hand string;" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="^" name="^" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the value (always a float) of the left operand raised to the power of the right operand.</result>
        <seeAlso>
          <see id="*" />
          <see id="sqrt" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if the right-hand operand is equal to 0, returns 1" />
          <usage descUsageElt="if it is equal to 1, returns the left-hand operand." />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="Various examples of power">
            <examples>
              <example code="2 ^ 3" equals="8.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
              <example code="4.0^2" equals="16.0" isExecutable="true" isTestOnly="true" test="true" type="float" />
              <example code="4.0^0.5" equals="2.0" isExecutable="true" isTestOnly="true" test="true" type="float" />
              <example code="8^0" equals="1.0" isExecutable="true" isTestOnly="true" test="true" type="float" />
              <example code="8.0^0" equals="1.0" isExecutable="true" isTestOnly="true" test="true" type="float" />
              <example code="8^1" equals="8.0" isExecutable="true" isTestOnly="true" test="true" type="float" />
              <example code="8.0^1" equals="8.0" isExecutable="true" isTestOnly="true" test="true" type="float" />
              <example code="8^1.0" equals="8.0" isExecutable="true" isTestOnly="true" test="true" type="float" />
              <example code="8.0^1.0" equals="8.0" isExecutable="true" isTestOnly="true" test="true" type="float" />
              <example code="2^0.5" equals="sqrt(2)" isExecutable="true" isTestOnly="true" test="true" type="float" />
              <example code="16.81^0.5" equals="sqrt(16.81)" isExecutable="true" isTestOnly="true" test="true" type="float" />
              <example code="assert (10^(-9) = 0) equals: false;" isExecutable="true" isTestOnly="true" test="true" type="float" />
            </examples>
          </usage>
        </usages>
        <usagesExamples>
          <usage>
            <examples>
              <example code="4.84 ^ 0.5" equals="2.2" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="IDW" name="IDW" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="msi.gama.util.GamaMap&lt;msi.gama.metamodel.shape.IShape,java.lang.Double&gt;" type="-13">
          <operand name="geometries" position="0" type="msi.gama.util.IContainer&lt;?,? extends msi.gama.metamodel.shape.IShape&gt;" />
          <operand name="points" position="1" type="msi.gama.util.GamaMap&lt;msi.gama.metamodel.shape.GamaPoint,java.lang.Double&gt;" />
          <operand name="power" position="2" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Inverse Distance Weighting (IDW) is a type of deterministic method for multivariate interpolation with a known scattered set of points. The assigned values to each geometry are calculated with a weighted average of the values available at the known points. See: http://en.wikipedia.org/wiki/Inverse_distance_weighting Usage: IDW (list of geometries, map of points (key: point, value: value), power parameter)</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="IDW([ag1, ag2, ag3, ag4, ag5],[{10,10}::25.0, {10,80}::10.0, {100,10}::15.0], 2)" equals="for example, can return [ag1::12.0, ag2::23.0,ag3::12.0,ag4::14.0,ag5::17.0]" isExecutable="false" isTestOnly="false" test="false" type="msi.gama.util.GamaMap&lt;msi.gama.metamodel.shape.IShape,java.lang.Double&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="shuffle" name="shuffle" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Random operators" />
        <category id="Strings-related operators" />
        <category id="Containers-related operators" />
        <category id="Matrix-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Random.java" contentType="4" returnType="string" type="-13">
          <operand name="target" position="0" type="string" />
        </operands>
        <operands class="msi/gaml/operators/Random.java" contentType="-20" returnType="list" type="-13">
          <operand name="target" position="0" type="container" />
        </operands>
        <operands class="msi/gaml/operators/Random.java" contentType="-20" returnType="matrix" type="-13">
          <operand name="target" position="0" type="matrix" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>The elements of the operand in random order.</result>
        <seeAlso>
          <see id="reverse" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if the operand is empty, returns an empty list (or string, matrix)" />
        </usagesNoExample>
        <usagesExamples>
          <usage>
            <examples>
              <example code="shuffle ('abc')" equals="'bac' (for example)" isExecutable="true" isTestOnly="false" test="false" type="string" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="shuffle ([12, 13, 14])" equals="[14,12,13] (for example)" isExecutable="true" isTestOnly="false" test="false" type="list" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="shuffle (matrix([[&quot;c11&quot;,&quot;c12&quot;,&quot;c13&quot;],[&quot;c21&quot;,&quot;c22&quot;,&quot;c23&quot;]]))" equals="matrix([[&quot;c12&quot;,&quot;c21&quot;,&quot;c11&quot;],[&quot;c13&quot;,&quot;c22&quot;,&quot;c23&quot;]]) (for example)" isExecutable="true" isTestOnly="false" test="false" type="matrix" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="polyhedron" name="polyhedron" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="points" position="0" type="container&lt;geometry&gt;" />
          <operand name="depth" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A polyhedron geometry from the given list of points.</result>
        <seeAlso>
          <see id="around" />
          <see id="circle" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="polyhedron([{0,0}, {0,10}, {10,10}, {10,0}],10)" equals="a polygon geometry composed of the 4 points and of depth 10." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the operand is nil, returns the point geometry {0,0}" />
          <usage descUsageElt="if the operand is composed of a single point, returns a point geometry" />
          <usage descUsageElt="if the operand is composed of 2 points, returns a polyline geometry." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="list_with" name="list_with" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Casting operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Cast.java" contentType="-17" returnType="list" type="-13">
          <operand name="size" position="0" type="int" />
          <operand name="init" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>creates a list with a size provided by the first operand, and filled with the second operand</result>
        <comment>Note that the right operand  should be positive, and that the second one is evaluated for each position  in the list.</comment>
        <seeAlso>
          <see id="list" />
        </seeAlso>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="as_hexagonal_grid" name="as_hexagonal_grid" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
        <category id="Grid-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="13" returnType="list&lt;geometry&gt;" type="-13">
          <operand name="ls" position="0" type="geometry" />
          <operand name="param" position="1" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of geometries (hexagonal) corresponding to the hexagonal tesselation of the first operand geometry</result>
        <seeAlso>
          <see id="as_4_grid" />
          <see id="as_grid" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="self as_hexagonal_grid {10, 5}" equals="list of geometries (hexagonal) corresponding to the hexagonal tesselation of the first operand geometry" isExecutable="true" isTestOnly="false" test="false" type="list&lt;geometry&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="&gt;=" name="&gt;=" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Comparison operators" />
        <category id="Strings-related operators" />
        <category id="Points-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="string" />
          <operand name="b" position="1" type="string" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="p1" position="0" type="point" />
          <operand name="p" position="1" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">true if the left-hand operand is greater or equal than the right-hand operand, false otherwise.</result>
        <seeAlso>
          <see id="&gt;" />
          <see id="&lt;" />
          <see id="&lt;=" />
          <see id="=" />
          <see id="!=" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if one of the operands is nil, returns false" />
        </usagesNoExample>
        <usagesExamples>
          <usage>
            <examples>
              <example code="3.5 &gt;= 7" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="3 &gt;= 2.5" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="3 &gt;= 7" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="3.5 &gt;= 3.5" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
        <usages>
          <usage descUsageElt="if both operands are string, uses a lexicographic comparison of the two strings">
            <examples>
              <example code="'abc' &gt;= 'aeb'" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="'abc' &gt;= 'abc'" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage descUsageElt="if both operands are points, returns true if and only if the left component (x) of the left operand if greater or equal than x of the right one and if the right component (y) of the left operand is greater than or equal to y of the right one.">
            <examples>
              <example code="{5,7} &gt;= {4,6}" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="{5,7} &gt;= {4,8}" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="cylinder" name="cylinder" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
        <category id="3D" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="radius" position="0" type="float" />
          <operand name="depth" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A cylinder geometry which radius is equal to the operand.</result>
        <comment>the centre of the cylinder is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="square" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="cylinder(10,10)" equals="a geometry as a circle of radius 10." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns a point if the operand is lower or equal to 0." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="hsb" name="hsb" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Color-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="h" position="0" type="float" />
          <operand name="s" position="1" type="float" />
          <operand name="b" position="2" type="float" />
          <operand name="a" position="3" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="h" position="0" type="float" />
          <operand name="s" position="1" type="float" />
          <operand name="b" position="2" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="h" position="0" type="float" />
          <operand name="s" position="1" type="float" />
          <operand name="b" position="2" type="float" />
          <operand name="a" position="3" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Converts hsb (h=hue, s=saturation, b=brightness) value to Gama color</result>
        <comment>h,s and b components should be floating-point values between 0.0 and 1.0 and when used alpha should be an integer (between 0 and 255) or a float (between 0 and 1) . Examples: Red=(0.0,1.0,1.0), Yellow=(0.16,1.0,1.0), Green=(0.33,1.0,1.0), Cyan=(0.5,1.0,1.0), Blue=(0.66,1.0,1.0), Magenta=(0.83,1.0,1.0)</comment>
        <seeAlso>
          <see id="rgb" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="hsb (0.5,1.0,1.0,0.0)" equals="rgb(&quot;cyan&quot;,0)" isExecutable="true" isTestOnly="false" test="true" type="rgb" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="hsb (0.0,1.0,1.0)" equals="rgb(&quot;red&quot;)" isExecutable="true" isTestOnly="false" test="true" type="rgb" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="points_on" name="points_on" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Points-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="7" returnType="list" type="5">
          <operand name="geom" position="0" type="geometry" />
          <operand name="distance" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of points of the operand-geometry distant from each other to the float right-operand .</result>
        <seeAlso>
          <see id="closest_points_with" />
          <see id="farthest_point_to" />
          <see id="points_at" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code=" square(5) points_on(2)" equals="a list of points belonging to the exterior ring of the square distant from each other of 2." isExecutable="true" isTestOnly="false" test="false" type="list" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="&lt;" name="&lt;" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Comparison operators" />
        <category id="Points-related operators" />
        <category id="Strings-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="p1" position="0" type="point" />
          <operand name="p" position="1" type="point" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="string" />
          <operand name="b" position="1" type="string" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">true if the left-hand operand is less than the right-hand operand, false otherwise.</result>
        <usages>
          <usage descUsageElt="if both operands are points, returns true if and only if the left component (x) of the left operand if less than or equal to x of the right one and if the right component (y) of the left operand is greater than or equal to y of the right one.">
            <examples>
              <example code="{5,7} &lt; {4,6}" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="{5,7} &lt; {4,8}" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage descUsageElt="if both operands are String, uses a lexicographic comparison of two strings">
            <examples>
              <example code="'abc' &lt; 'aeb'" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usages>
        <seeAlso>
          <see id="&gt;" />
          <see id="&gt;=" />
          <see id="&lt;=" />
          <see id="=" />
          <see id="!=" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if one of the operands is nil, returns false" />
        </usagesNoExample>
        <usagesExamples>
          <usage>
            <examples>
              <example code="3 &lt; 7" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="3.5 &lt; 7.6" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="3.5 &lt; 7" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="3 &lt; 2.5" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="exp" name="exp" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="rv" position="0" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="rv" position="0" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns Euler's number e raised to the power of the operand.</result>
        <seeAlso>
          <see id="ln" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="exp (0)" equals="1.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="the operand is casted to a float before being evaluated." />
          <usage descUsageElt="the operand is casted to a float before being evaluated." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="read" name="read" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Files.java" contentType="-13" returnType="unknown" type="-13">
          <operand name="s" position="0" type="string" />
        </operands>
        <operands class="msi/gaml/operators/Files.java" contentType="-13" returnType="unknown" type="-13">
          <operand name="index" position="0" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Reads an attribute of the agent. The attribute's name is specified by the operand.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="read ('name')" equals="reads the 'name' variable of agent then assigns the returned value to the 'agent_name' variable. " isExecutable="true" isTestOnly="false" test="false" type="unknown" var="agent_name" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="read (2)" equals="reads the second variable of agent then assigns the returned value to the 'second_variable' variable. " isExecutable="true" isTestOnly="false" test="false" type="unknown" var="second_variable" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="between" name="between" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Comparison operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="inf" position="1" type="float" />
          <operand name="sup" position="2" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="inf" position="1" type="int" />
          <operand name="sup" position="2" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns true if the first float operand is bigger than the second float operand and smaller than the third float operandreturns true the first integer operand is bigger than the second integer operand and smaller than the third integer operand</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="between(5.0, 1.0, 10.0)" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="between(5, 1, 10)" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="::" name="::" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Containers.java" contentType="-17" returnType="pair" type="9">
          <operand name="a" position="0" type="any expression" />
          <operand name="b" position="1" type="any expression" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>produces a new pair combining the left and the right operands</result>
        <usagesNoExample>
          <usage descUsageElt="nil is not acceptable as a key (although it is as a value). If such a case happens, :: will throw an appropriate error" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="dem" name="dem" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="3D" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="demFileName" position="0" type="file" />
          <operand name="z_factor" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="demFileName" position="0" type="file" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="demFile" position="0" type="file" />
          <operand name="textureFile" position="1" type="file" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="demFile" position="0" type="file" />
          <operand name="textureFile" position="1" type="file" />
          <operand name="z_factor" position="2" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">A polygon that is equivalent to the surface of the texture</result>
        <usagesNoExample>
          <usage descUsageElt="a point if the operand is lower or equal to 0." />
        </usagesNoExample>
        <usagesExamples>
          <usage>
            <examples>
              <example code="dem(dem,z_factor)" equals="a geometry as a rectangle of weight and height equal to the texture." isExecutable="false" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="dem(dem)" equals="returns a geometry as a rectangle of weight and height equal to the texture." isExecutable="false" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="dem(dem,texture)" equals="a geometry as a rectangle of weight and height equal to the texture." isExecutable="false" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="dem(dem,texture,z_factor)" equals="a geometry as a rectangle of weight and height equal to the texture." isExecutable="false" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="edge" name="edge" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/statements/AbstractContainerStatement.java" contentType="-13" returnType="unknown" type="-18">
          <operand name="object" position="0" type="unknown" />
        </operands>
        <operands class="msi/gaml/statements/AbstractContainerStatement.java" contentType="-13" returnType="unknown" type="-13">
          <operand name="source" position="0" type="unknown" />
          <operand name="target" position="1" type="unknown" />
          <operand name="object" position="2" type="unknown" />
        </operands>
        <operands class="msi/gaml/statements/AbstractContainerStatement.java" contentType="-13" returnType="unknown" type="-18">
          <operand name="edgeObject" position="0" type="unknown" />
          <operand name="weight" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/statements/AbstractContainerStatement.java" contentType="-13" returnType="unknown" type="-18">
          <operand name="pair" position="0" type="pair" />
        </operands>
        <operands class="msi/gaml/statements/AbstractContainerStatement.java" contentType="-13" returnType="unknown" type="-13">
          <operand name="pair" position="0" type="pair" />
          <operand name="weight" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/statements/AbstractContainerStatement.java" contentType="-13" returnType="unknown" type="-13">
          <operand name="source" position="0" type="unknown" />
          <operand name="target" position="1" type="unknown" />
        </operands>
        <operands class="msi/gaml/statements/AbstractContainerStatement.java" contentType="-13" returnType="unknown" type="-13">
          <operand name="pair" position="0" type="pair" />
          <operand name="object" position="1" type="unknown" />
          <operand name="weight" position="2" type="float" />
        </operands>
        <operands class="msi/gaml/statements/AbstractContainerStatement.java" contentType="-13" returnType="unknown" type="-13">
          <operand name="source" position="0" type="unknown" />
          <operand name="target" position="1" type="unknown" />
          <operand name="object" position="2" type="unknown" />
          <operand name="weight" position="3" type="float" />
        </operands>
        <operands class="msi/gaml/statements/AbstractContainerStatement.java" contentType="-13" returnType="unknown" type="-13">
          <operand name="source" position="0" type="unknown" />
          <operand name="target" position="1" type="unknown" />
          <operand name="weight" position="2" type="float" />
        </operands>
      </combinaisonIO>
    </operator>
    <operator alphabetOrder="ak" id="acos" name="acos" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="rv" position="0" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="rv" position="0" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the value (in the interval [0,180], in decimal degrees) of the arccos of the operand (which should be in [-1,1]).</result>
        <seeAlso>
          <see id="asin" />
          <see id="atan" />
          <see id="cos" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="acos (0)" equals="90.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the right-hand operand is outside of the [-1,1] interval, returns NaN" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="ln" name="ln" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="x" position="0" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="x" position="0" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the natural logarithm (base e) of the operand.</result>
        <seeAlso>
          <see id="exp" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="an exception is raised if the operand is less than zero." />
        </usagesNoExample>
        <usagesExamples>
          <usage>
            <examples>
              <example code="ln(exp(1))" equals="1.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="ln(1)" equals="0.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="add_node" name="add_node" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="15">
          <operand name="g" position="0" type="graph" />
          <operand name="node" position="1" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>adds a node in a graph.</result>
        <seeAlso>
          <see id="add_edge" />
          <see id="graph" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph add_node node(0) " equals="the graph with node(0)" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="CRS_transform" name="CRS_transform" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="code" position="1" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result />
        <usages>
          <usage descUsageElt="returns the geometry corresponding to the transfomartion of the given geometry by the current CRS (Coordinate Reference System), the one corresponding to the world's agent one">
            <examples>
              <example code="CRS_transform(shape)" equals="a geometry corresponding to the agent geometry transformed into the current CRS" isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage descUsageElt="returns the geometry corresponding to the transfomartion of the given geometry by the left operand CRS (Coordinate Reference System)">
            <examples>
              <example code="shape CRS_transform(&quot;EPSG:4326&quot;)" equals="a geometry corresponding to the agent geometry transformed into the EPSG:4326 CRS" isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="norm" name="norm" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Points-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="float" type="-13">
          <operand name="p" position="0" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>the norm of the vector with the coordinnates of the point operand.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="norm({3,4})" equals="5.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="use_cache" name="use_cache" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
        <category id="Path-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="g" position="0" type="graph" />
          <operand name="useCache" position="1" type="bool" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>if the second operand is true, the operand graph will store in a cache all the previously computed shortest path (the cache be cleared if the graph is modified).</result>
        <comment>the operator alters the operand graph, it does not create a new one.</comment>
        <seeAlso>
          <see id="path_between" />
        </seeAlso>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="generate_watts_strogatz" name="generate_watts_strogatz" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/GraphsGraphstream.java" contentType="-13" returnType="graph" type="-13">
          <operand name="vertices_specy" position="0" type="species" />
          <operand name="edges_specy" position="1" type="species" />
          <operand name="size" position="2" type="int" />
          <operand name="p" position="3" type="float" />
          <operand name="k" position="4" type="int" />
          <operand name="isSychronized" position="5" type="bool" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns a random small-world network (following Watts-Strogatz model).</result>
        <comment>The Watts-Strogatz model is a random graph generation model that produces graphs with small-world properties, including short average path lengths and high clustering.A small-world network is a type of graph in which most nodes are not neighbors of one another, but most nodes can be reached from every other by a small number of hops or steps. [From Wikipedia article]The map operand should includes following elements:</comment>
        <seeAlso>
          <see id="generate_barabasi_albert" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- generate_watts_strogatz(" isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;myVertexSpecy," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;myEdgeSpecy," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;2," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;0.3," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;2," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;true);" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="&quot;vertices_specy&quot;: the species of vertices" />
          <usage descUsageElt="&quot;edges_specy&quot;: the species of edges" />
          <usage descUsageElt="&quot;size&quot;: the graph will contain (size + 1) nodes. Size must be greater than k." />
          <usage descUsageElt="&quot;p&quot;: probability to &quot;rewire&quot; an edge. So it must be between 0 and 1. The parameter is often called beta in the literature." />
          <usage descUsageElt="&quot;k&quot;: the base degree of each node. k must be greater than 2 and even." />
          <usage descUsageElt="&quot;synchronized&quot;: is the graph and the species of vertices and edges synchronized?" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="to_rectangles" name="to_rectangles" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="13" returnType="list&lt;geometry&gt;" type="-13">
          <operand name="geom" position="0" type="geometry" />
          <operand name="dimension" position="1" type="point" />
          <operand name="overlaps" position="2" type="bool" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="13" returnType="list&lt;geometry&gt;" type="5">
          <operand name="geom" position="0" type="geometry" />
          <operand name="nbCols" position="1" type="int" />
          <operand name="nbRows" position="2" type="int" />
          <operand name="overlaps" position="3" type="bool" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of rectangles of the size corresponding to the given dimension that result from the decomposition of the geometry into rectangles (geometry, dimension, overlaps), if overlaps = true, add the rectangles that overlap the border of the geometryA list of rectangles corresponding to the given dimension that result from the decomposition of the geometry into rectangles (geometry, nb_cols, nb_rows, overlaps) by a grid composed of the given number of columns and rows, if overlaps = true, add the rectangles that overlap the border of the geometry</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="to_rectangles(self, {10.0, 15.0}, true)" equals="the list of rectangles of size {10.0, 15.0} corresponding to the discretisation into rectangles of the geometry of the agent applying the operator. The rectangles overlapping the border of the geometry are kept" isExecutable="true" isTestOnly="false" test="false" type="list&lt;geometry&gt;" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="to_rectangles(self, 5, 20, true)" equals="the list of rectangles corresponding to the discretisation by a grid of 5 columns and 20 rows into rectangles of the geometry of the agent applying the operator. The rectangles overlapping the border of the geometry are kept" isExecutable="true" isTestOnly="false" test="false" type="list&lt;geometry&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="out_degree_of" name="out_degree_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="int" type="1">
          <operand name="graph" position="0" type="graph" />
          <operand name="vertex" position="1" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the out degree of a vertex (right-hand operand) in the graph given as left-hand operand.</result>
        <seeAlso>
          <see id="in_degree_of" />
          <see id="degree_of" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphFromMap &lt;- graph([]);" isExecutable="true" isTestOnly="true" test="true" type="int" />
              <example code="graphFromMap out_degree_of (node(3))" equals="4" isExecutable="true" isTestOnly="false" test="false" type="int" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="atan" name="atan" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="rv" position="0" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="rv" position="0" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the value (in the interval [-90,90], in decimal degrees) of the arctan of the operand (which can be any real number).</result>
        <seeAlso>
          <see id="acos" />
          <see id="asin" />
          <see id="tan" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="atan (1)" equals="45.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="asin" name="asin" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="rv" position="0" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="rv" position="0" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">the arcsin of the operand</result>
        <usagesNoExample>
          <usage descUsageElt="if the right-hand operand is outside of the [-1,1] interval, returns NaN" />
        </usagesNoExample>
        <seeAlso>
          <see id="acos" />
          <see id="atan" />
          <see id="sin" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="asin (0)" equals="0.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="asin (90)" equals="#nan" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="abs" name="abs" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="int" type="-13">
          <operand name="rv" position="0" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="rv" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the absolute value of the operand (so a positive int or float depending on the type of the operand).</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="abs (-10)" equals="10" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="abs (10)" equals="10" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="abs (-0)" equals="0" isExecutable="true" isTestOnly="true" test="true" type="int" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="abs (200 * -1 + 0.5)" equals="199.5" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="file" name="file" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Files.java" contentType="-13" returnType="file" type="-13">
          <operand name="s" position="0" type="string" />
        </operands>
        <operands class="msi/gaml/operators/Files.java" contentType="-13" returnType="file" type="-13">
          <operand name="s" position="0" type="string" />
          <operand name="container" position="1" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>opens a file in read only mode, creates a GAML file object, and tries to determine and store the file content in the contents attribute.Creates a file in read/write mode, setting its contents to the container passed in parameter</result>
        <comment>The file should have a supported extension, see file type deifnition for supported file extensions.The type of container to pass will depend on the type of file (see the management of files in the documentation). Can be used to copy files since files are considered as containers. For example: save file('image_copy.png', file('image.png')); will copy image.png to image_copy.png</comment>
        <seeAlso>
          <see id="folder" />
          <see id="new_folder" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="let fileT type: file value: file(&quot;../includes/Stupid_Cell.Data&quot;); " isExecutable="true" isTestOnly="false" test="true" type="file" />
              <example code="&#x9;&#x9;&#x9;// fileT represents the file &quot;../includes/Stupid_Cell.Data&quot;" isExecutable="true" isTestOnly="false" test="true" type="file" />
              <example code="&#x9;&#x9;&#x9;// fileT.contents here contains a matrix storing all the data of the text file" isExecutable="true" isTestOnly="false" test="true" type="file" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="If the specified string does not refer to an existing file, an exception is risen when the variable is used." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="rectangle" name="rectangle" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="p" position="0" type="point" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="x" position="0" type="float" />
          <operand name="y" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">A rectangle geometry which side sizes are given by the operands.</result>
        <comment>the centre of the rectangle is by default the location of the current agent in which has been called this operator.the centre of the rectangle is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="circle" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="square" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="rectangle({10, 5})" equals="a geometry as a rectangle with width = 10 and heigh = 5." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="rectangle(10, 5)" equals="a geometry as a rectangle with width = 10 and heigh = 5." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns nil if the operand is nil." />
          <usage descUsageElt="returns nil if the operand is nil." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="contains" name="contains" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Strings-related operators" />
        <category id="Containers-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="bool" type="-13">
          <operand name="target" position="0" type="string" />
          <operand name="pattern" position="1" type="string" />
        </operands>
        <operands class="msi/gama/util/IContainer.java" contentType="-13" returnType="bool" type="-13">
          <operand name="msi.gama.util.icontainer&lt;keytype,valuetype&gt;" position="0" type="container" />
          <operand name="o" position="1" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">true, if the container contains the right operand, false otherwise</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="'abcded' contains 'bc'" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
        <comment>the contains operator behavior depends on the nature of the operand</comment>
        <seeAlso>
          <see id="contains_all, contains_any" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if both operands are strings, returns true if the right-hand operand contains the right-hand pattern;" />
          <usage descUsageElt="if it is a map, contains returns true if the operand is a key of the map" />
          <usage descUsageElt="if it is a file, contains returns true it the operand is contained in the file content" />
          <usage descUsageElt="if it is a population, contains returns true if the operand is an agent of the population, false otherwise" />
          <usage descUsageElt="if it is a graph, contains returns true if the operand is a node or an edge of the graph, false otherwise" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if it is a list or a matrix, contains returns true if the list or matrix contains the right operand">
            <examples>
              <example code="[1, 2, 3] contains 2" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="[{1,2}, {3,4}, {5,6}] contains {3,4}" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="transpose" name="transpose" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Matrix-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-13" returnType="matrix" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">The tranposition of the given matrix</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="transpose(matrix([[5,-3],[6,-4]]))" equals="[[5,6],[-3,-4]]" isExecutable="true" isTestOnly="false" test="true" type="matrix" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="agent_closest_to" name="agent_closest_to" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial queries operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="agent" type="11">
          <operand name="source" position="0" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>An agent, the closest to the operand (casted as a geometry).</result>
        <comment>the distance is computed in the topology of the calling agent (the agent in which this operator is used), with the distance algorithm specific to the topology.</comment>
        <seeAlso>
          <see id="neighbours_at" />
          <see id="neighbours_of" />
          <see id="agents_inside" />
          <see id="agents_overlapping" />
          <see id="closest_to" />
          <see id="inside" />
          <see id="overlapping" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="agent_closest_to(self)" equals="the closest agent to the agent applying the operator." isExecutable="true" isTestOnly="false" test="false" type="agent" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="font" name="font" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Casting operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gama/util/GamaFont.java" contentType="-13" returnType="msi.gama.util.GamaFont" type="-13">
          <operand name="name" position="0" type="string" />
          <operand name="size" position="1" type="int" />
          <operand name="style" position="2" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Creates a new font, by specifying its name (either a font face name like 'Lucida Grande Bold' or 'Helvetica', or a logical name like 'Dialog', 'SansSerif', 'Serif', etc.), a size in points and a style, either #bold, #italic or #plain or a combination (addition) of them.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="font ('Helvetica Neue',12, #bold + #italic)" equals="a bold and italic face of the Helvetica Neue family" isExecutable="true" isTestOnly="false" test="false" type="msi.gama.util.GamaFont" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="set_z" name="set_z" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="3D" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="geom" position="0" type="geometry" />
          <operand name="index" position="1" type="int" />
          <operand name="z" position="2" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="geom" position="0" type="geometry" />
          <operand name="coords" position="1" type="msi.gama.util.IContainer&lt;?,java.lang.Double&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Sets the z ordinate of the n-th point of a geometry to the value provided by the third argument</result>
        <seeAlso>
          <see id="add_z" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="loop i from: 0 to: length(shape.points) - 1{set shape &lt;-  set_z (shape, i, 3.0);}" isExecutable="true" isTestOnly="false" test="true" type="geometry" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="shape &lt;- triangle(3) set_z [5,10,14];" isExecutable="true" isTestOnly="false" test="true" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="as_system_time" name="as_system_time" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Strings-related operators" />
        <category id="Time-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="string" type="-13">
          <operand name="time" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>converts  a value of milliseconds in the system  (for example, the value of the 'machine_time' variable)  into a string representing the current hours, minutes and seconds in the current time zone of the machine and the current Locale. This representation follows the ISO 8601 standard hh:mm:ss</result>
        <comment>as_system_time operator is a particular case (using a particular pattern) of the as_system_date operator.</comment>
        <seeAlso>
          <see id="as_system_date" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="as_system_time(2147483647)" equals="&quot;23:58:57&quot;" isExecutable="true" isTestOnly="false" test="true" type="string" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="spatial_graph" name="spatial_graph" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="vertices" position="0" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>allows to create a spatial graph from a container of vertices, without trying to wire them. The container can be empty. Emits an error if the contents of the container are not geometries, points or agents</result>
        <seeAlso>
          <see id="graph" />
        </seeAlso>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="as_distance_graph" name="as_distance_graph" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="13" returnType="graph" type="-13">
          <operand name="vertices" position="0" type="container" />
          <operand name="distance" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="vertices" position="0" type="container" />
          <operand name="params" position="1" type="map" />
        </operands>
        <operands class="msi/gaml/operators/Graphs.java" contentType="13" returnType="graph" type="-13">
          <operand name="vertices" position="0" type="container" />
          <operand name="distance" position="1" type="float" />
          <operand name="edgeSpecies" position="2" type="species" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">creates a graph from a list of vertices (left-hand operand). An edge is created between each pair of vertices close enough (less than a distance, right-hand operand).</result>
        <comment>as_distance_graph is more efficient for a list of points than as_intersection_graph.</comment>
        <usagesExamples>
          <usage>
            <examples>
              <example code="list(ant) as_distance_graph 3.0" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
        </usagesExamples>
        <seeAlso>
          <see id="as_intersection_graph" />
          <see id="as_edge_graph" />
        </seeAlso>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="&gt;" name="&gt;" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Comparison operators" />
        <category id="Strings-related operators" />
        <category id="Points-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="string" />
          <operand name="b" position="1" type="string" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="p1" position="0" type="point" />
          <operand name="p" position="1" type="point" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Comparison.java" contentType="-13" returnType="bool" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">true if the left-hand operand is greater than the right-hand operand, false otherwise.</result>
        <usages>
          <usage descUsageElt="if both operands are String, uses a lexicographic comparison of two strings">
            <examples>
              <example code="'abc' &gt; 'aeb'" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage descUsageElt="if both operands are points, returns true if abd only if the left component (x) of the left operand if greater than x of the right one and if the right component (y) of the left operand is greater than y of the right one.">
            <examples>
              <example code="{5,7} &gt; {4,6}" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="{5,7} &gt; {4,8}" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usages>
        <seeAlso>
          <see id="&lt;" />
          <see id="&gt;=" />
          <see id="&lt;=" />
          <see id="=" />
          <see id="!=" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if one of the operands is nil, returns false" />
        </usagesNoExample>
        <usagesExamples>
          <usage>
            <examples>
              <example code="3.5 &gt; 7" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="3.5 &gt; 7.6" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="3 &gt; 7" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="3 &gt; 2.5" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="*" name="*" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Points-related operators" />
        <category id="Arithmetic operators" />
        <category id="Matrix-related operators" />
        <category id="Color-related operators" />
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="p1" position="0" type="point" />
          <operand name="d" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="int" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-20" returnType="matrix" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="val" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-19" returnType="matrix" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="matrix" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-18" returnType="matrix" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="matrix" />
        </operands>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="c" position="0" type="rgb" />
          <operand name="i" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="float" type="-13">
          <operand name="p1" position="0" type="point" />
          <operand name="p" position="1" type="point" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="coefficient" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-20" returnType="matrix" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="val" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="p1" position="0" type="point" />
          <operand name="d" position="1" type="int" />
        </operands>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-20" returnType="matrix" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="other" position="1" type="matrix" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="coefficients" position="1" type="point" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the product of the two operands.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="2.5 * 2" equals="5.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
        </usagesExamples>
        <seeAlso>
          <see id="+" />
          <see id="-" />
          <see id="/" />
        </seeAlso>
        <usages>
          <usage descUsageElt="if both operands are numbers (float or int), performs a normal arithmetic product and returns a float if one of them is a float.">
            <examples>
              <example code="1 * 1" equals="1" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
          <usage descUsageElt="if one operand is a matrix and the other a number (float or int), performs a normal arithmetic product of the number with each element of the matrix (results are float if the number is a float.">
            <examples>
              <example code="matrix&lt;float&gt; m &lt;- (3.5 * matrix([[2,5],[3,4]]));&#x9;//m equals matrix([[7.0,17.5],[10.5,14]])" isExecutable="true" isTestOnly="false" test="true" type="matrix" />
            </examples>
          </usage>
          <usage descUsageElt="if one operand is a color and the other an integer, returns a new color resulting from the product of each component of the color with the right operand (with a maximum value at 255)">
            <examples>
              <example code="rgb([255, 128, 32]) * 2" equals="rgb([255,255,64])" isExecutable="true" isTestOnly="false" test="true" type="rgb" />
            </examples>
          </usage>
          <usage descUsageElt="if both operands are points, returns their scalar product">
            <examples>
              <example code="{2,5} * {4.5, 5}" equals="34.0" isExecutable="true" isTestOnly="false" test="true" type="float" />
            </examples>
          </usage>
          <usage descUsageElt="if the left-hand operand is a geometry and the rigth-hand operand a float, returns a geometry corresponding to the left-hand operand (geometry, agent, point) scaled by the right-hand operand coefficient">
            <examples>
              <example code="circle(10) * 2" equals="circle(20)" isExecutable="true" isTestOnly="false" test="true" type="geometry" />
            </examples>
          </usage>
          <usage descUsageElt="if the left-hand operator is a point and the right-hand a number, returns a point with coordinates multiplied by the number">
            <examples>
              <example code="{2,5} * 4" equals="{8.0, 20.0}" isExecutable="true" isTestOnly="false" test="true" type="point" />
              <example code="{2, 4} * 2.5" equals="{5.0, 10.0}" isExecutable="true" isTestOnly="false" test="true" type="point" />
            </examples>
          </usage>
          <usage descUsageElt="if the left-hand operand is a geometry and the rigth-hand operand a point, returns a geometry corresponding to the left-hand operand (geometry, agent, point) scaled by the right-hand operand coefficients in the 3 dimensions">
            <examples>
              <example code="shape * {0.5,0.5,2}" equals="a geometry corresponding to the geometry of the agent applying the operator scaled by a coefficient of 0.5 in x, 0.5 in y and 2 in z" isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="rgb" name="rgb" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Color-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="s" position="0" type="string" />
          <operand name="a" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="r" position="0" type="int" />
          <operand name="g" position="1" type="int" />
          <operand name="b" position="2" type="int" />
          <operand name="alpha" position="3" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="r" position="0" type="int" />
          <operand name="g" position="1" type="int" />
          <operand name="b" position="2" type="int" />
          <operand name="alpha" position="3" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="s" position="0" type="rgb" />
          <operand name="a" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="s" position="0" type="rgb" />
          <operand name="a" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="r" position="0" type="int" />
          <operand name="g" position="1" type="int" />
          <operand name="b" position="2" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns a color defined by red, green, blue components and an alpha blending value.</result>
        <seeAlso>
          <see id="hsb" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="rgb (&quot;red&quot;)" equals="rgb(255,0,0)" isExecutable="true" isTestOnly="false" test="true" type="rgb" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="rgb (255,0,0,0.5)" equals="a light red color" isExecutable="true" isTestOnly="false" test="false" type="rgb" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="rgb (255,0,0,125)" equals="a light red color" isExecutable="true" isTestOnly="false" test="false" type="rgb" />
              <example code="rgb (255,0,0,125).alpha" equals="125" isExecutable="true" isTestOnly="true" test="true" type="int" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="rgb(rgb(255,0,0),0.5)" equals="a light red color" isExecutable="true" isTestOnly="false" test="false" type="rgb" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="rgb(rgb(255,0,0),125)" equals="a light red color" isExecutable="true" isTestOnly="false" test="false" type="rgb" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="rgb (255,0,0)" equals="#red" isExecutable="true" isTestOnly="false" test="true" type="rgb" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="It can be used with a name of color and alpha (between 0 and 255)" />
          <usage descUsageElt="It can be used with r=red, g=greeb, b=blue (each between 0 and 255), a=alpha (between 0.0 and 1.0)" />
          <usage descUsageElt="It can be used with r=red, g=greeb, b=blue (each between 0 and 255), a=alpha (between 0 and 255)" />
          <usage descUsageElt="It can be used with a color and an alpha between 0 and 1" />
          <usage descUsageElt="It can be used with a color and an alpha between 0 and 255" />
          <usage descUsageElt="It can be used with r=red, g=greeb, b=blue, each between 0 and 255" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="disjoint_from" name="disjoint_from" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="bool" type="-13">
          <operand name="g1" position="0" type="geometry" />
          <operand name="g2" position="1" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A boolean, equal to true if the left-geometry (or agent/point) is disjoints from the right-geometry (or agent/point).</result>
        <seeAlso>
          <see id="intersects" />
          <see id="crosses" />
          <see id="overlaps" />
          <see id="partially_overlaps" />
          <see id="touches" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="polyline([{10,10},{20,20}]) disjoint_from polyline([{15,15},{25,25}])" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) disjoint_from polygon([{15,15},{15,25},{25,25},{25,15}])" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) disjoint_from {15,15}" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) disjoint_from {25,25}" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) disjoint_from polygon([{35,35},{35,45},{45,45},{45,35}])" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if one of the operand is null, returns true." />
          <usage descUsageElt="if one operand is a point, returns false if the point is included in the geometry." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="cos_rad" name="cos_rad" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="rv" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the value (in [-1,1]) of the cosinus of the operand (in decimal degrees).  The argument is casted to an int before being evaluated.</result>
        <seeAlso>
          <see id="sin" />
          <see id="tan" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="Operand values out of the range [0-359] are normalized." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="partially_overlaps" name="partially_overlaps" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial properties operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="bool" type="-13">
          <operand name="g1" position="0" type="geometry" />
          <operand name="g" position="1" type="geometry" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A boolean, equal to true if the left-geometry (or agent/point) partially overlaps the right-geometry (or agent/point).</result>
        <comment>if one geometry operand fully covers the other geometry operand, returns false (contrarily to the overlaps operator).</comment>
        <seeAlso>
          <see id="disjoint_from" />
          <see id="crosses" />
          <see id="overlaps" />
          <see id="intersects" />
          <see id="touches" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="polyline([{10,10},{20,20}]) partially_overlaps polyline([{15,15},{25,25}])" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps polygon([{15,15},{15,25},{25,25},{25,15}])" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps {25,25}" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps polygon([{35,35},{35,45},{45,45},{45,35}])" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps polyline([{10,10},{20,20}])" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps {15,15}" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps polygon([{0,0},{0,30},{30,30}, {30,0}])" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps polygon([{15,15},{15,25},{25,25},{25,15}])" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps polygon([{10,20},{20,20},{20,30},{10,30}])" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if one of the operand is null, returns false." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="load_shortest_paths" name="load_shortest_paths" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
        <category id="Path-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="graph" position="0" type="graph" />
          <operand name="matrix" position="1" type="matrix" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>put in the graph cache the computed shortest paths contained in the matrix (rows: source, columns: target)</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="load_shortest_paths(shortest_paths_matrix)" equals="return my_graph with all the shortest paths computed" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="+" name="+" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Containers-related operators" />
        <category id="Spatial transformations operators" />
        <category id="Points-related operators" />
        <category id="Strings-related operators" />
        <category id="Arithmetic operators" />
        <category id="Matrix-related operators" />
        <category id="Color-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g1" position="0" type="geometry" />
          <operand name="g2" position="1" type="geometry" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-21" returnType="map" type="-18">
          <operand name="m1" position="0" type="map" />
          <operand name="m2" position="1" type="pair" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="size" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="p1" position="0" type="point" />
          <operand name="p" position="1" type="point" />
        </operands>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="string" type="-13">
          <operand name="a" position="0" type="string" />
          <operand name="b" position="1" type="unknown" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="parameters" position="1" type="map" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-18" returnType="matrix" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="matrix" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="int" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-20" returnType="matrix" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="other" position="1" type="matrix" />
        </operands>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-20" returnType="matrix" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="val" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="c" position="0" type="rgb" />
          <operand name="i" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-21" returnType="map" type="-21">
          <operand name="m1" position="0" type="map" />
          <operand name="m2" position="1" type="map" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="p1" position="0" type="point" />
          <operand name="p" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-21" returnType="container" type="-21">
          <operand name="c1" position="0" type="container" />
          <operand name="c2" position="1" type="container" />
        </operands>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="c1" position="0" type="rgb" />
          <operand name="c2" position="1" type="rgb" />
        </operands>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="string" type="-13">
          <operand name="a" position="0" type="string" />
          <operand name="b" position="1" type="string" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-20" returnType="list" type="-13">
          <operand name="l1" position="0" type="container" />
          <operand name="l" position="1" type="unknown" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="p1" position="0" type="point" />
          <operand name="p" position="1" type="float" />
        </operands>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-20" returnType="matrix" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="val" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-19" returnType="matrix" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="matrix" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the sum, union or concatenation of the two operands.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="['a'::1,'b'::2] + ('c'::3)" equals="['a'::1,'b'::2,'c'::3]" isExecutable="true" isTestOnly="false" test="true" type="map" />
              <example code="['a'::1,'b'::2] + ('c'::3)" equals="['a'::1,'b'::2,'c'::3]" isExecutable="true" isTestOnly="false" test="true" type="map" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="['a'::1,'b'::2] + ['c'::3]" equals="['a'::1,'b'::2,'c'::3]" isExecutable="true" isTestOnly="false" test="true" type="map" />
              <example code="['a'::1,'b'::2] + [5::3.0]" equals="['a'::1.0,'b'::2.0,5::3.0]" isExecutable="true" isTestOnly="false" test="true" type="map" />
            </examples>
          </usage>
        </usagesExamples>
        <seeAlso>
          <see id="-" />
          <see id="/" />
          <see id="*" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if one of the operands is nil, + throws an error" />
          <usage descUsageElt="if both operands are species, returns a special type of list called meta-population" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if the right-operand is a point, a geometry or an agent, returns the geometry resulting from the union between both geometries">
            <examples>
              <example code="geom1 + geom2" equals="a geometry corresponding to union between geom1 and geom2" isExecutable="false" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage descUsageElt="if the left-hand operand is a geometry and the rigth-hand operand a float, returns a geometry corresponding to the left-hand operand (geometry, agent, point) enlarged by the right-hand operand distance">
            <examples>
              <example code="circle(5) + 5" equals="circle(10)" isExecutable="true" isTestOnly="false" test="true" type="geometry" />
            </examples>
          </usage>
          <usage descUsageElt="if both operands are points, returns their sum.">
            <examples>
              <example code="{1, 2} + {4, 5}" equals="{5.0, 7.0}" isExecutable="true" isTestOnly="false" test="true" type="point" />
            </examples>
          </usage>
          <usage descUsageElt="if the left-hand operand is a string, returns the concatenation of the two operands (the left-hand one beind casted into a string)">
            <examples>
              <example code="&quot;hello &quot; + 12" equals="&quot;hello 12&quot;" isExecutable="true" isTestOnly="false" test="true" type="string" />
            </examples>
          </usage>
          <usage descUsageElt="if the left-hand operand is a geometry and the rigth-hand operand a map (with [distance::float, quadrantSegments:: int (the number of line segments used to represent a quadrant of a circle), endCapStyle::int (1: (default) a semi-circle, 2: a straight line perpendicular to the end segment, 3: a half-square)]), returns a geometry corresponding to the left-hand operand (geometry, agent, point) enlarged considering the right-hand operand parameters">
            <examples>
              <example code="shape + [&quot;distance&quot;::5.0, &quot;quadrantSegments&quot;::4, &quot;endCapStyle&quot;:: 2]" equals="a geometry corresponding to the geometry of the agent applying the operator enlarged by a distance of 5, with 4 segments to represent a quadrant of a circle and a straight line perpendicular to the end segment" isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage descUsageElt="if both operands are numbers (float or int), performs a normal arithmetic sum and returns a float if one of them is a float.">
            <examples>
              <example code="1 + 1" equals="2" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="1.0 + 1" equals="2.0" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="1.0 + 2.5" equals="3.5" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
          <usage descUsageElt="if one operand is a color and the other an integer, returns a new color resulting from the sum of each component of the color with the right operand">
            <examples>
              <example code="rgb([255, 128, 32]) + 3" equals="rgb([255,131,35])" isExecutable="true" isTestOnly="false" test="true" type="rgb" />
            </examples>
          </usage>
          <usage descUsageElt="if both operands are list, +returns the concatenation of both lists.">
            <examples>
              <example code="[1,2,3,4,5,6] + [2,4,9]" equals="[1,2,3,4,5,6,2,4,9]" isExecutable="true" isTestOnly="false" test="true" type="list&lt;int&gt;" />
              <example code="[1,2,3,4,5,6] + [0,8]" equals="[1,2,3,4,5,6,0,8]" isExecutable="true" isTestOnly="false" test="true" type="list&lt;int&gt;" />
            </examples>
          </usage>
          <usage descUsageElt="if both operands are colors, returns a new color resulting from the sum of the two operands, component by component">
            <examples>
              <example code="rgb([255, 128, 32]) + rgb('red')" equals="rgb([255,128,32])" isExecutable="true" isTestOnly="false" test="true" type="rgb" />
            </examples>
          </usage>
          <usage descUsageElt="if the right operand is an object of any type (except a container), + returns a list of the elements of the left operand, to which this object has been added">
            <examples>
              <example code="[1,2,3,4,5,6] + 2" equals="[1,2,3,4,5,6,2]" isExecutable="true" isTestOnly="false" test="true" type="list&lt;int&gt;" />
              <example code="[1,2,3,4,5,6] + 0" equals="[1,2,3,4,5,6,0]" isExecutable="true" isTestOnly="false" test="true" type="list&lt;int&gt;" />
            </examples>
          </usage>
          <usage descUsageElt="if the left-hand operand is a point and the right-hand a number, returns a new point with each coordinate as the sum of the operand coordinate with this number.">
            <examples>
              <example code="{1, 2} + 4" equals="{5.0, 6.0,4.0}" isExecutable="true" isTestOnly="false" test="true" type="point" />
              <example code="{1, 2} + 4.5" equals="{5.5, 6.5,4.5}" isExecutable="true" isTestOnly="false" test="true" type="point" />
            </examples>
          </usage>
          <usage descUsageElt="if one operand is a matrix and the other a number (float or int), performs a normal arithmetic sum of the number with each element of the matrix (results are float if the number is a float.">
            <examples>
              <example code="3.5 + matrix([[2,5],[3,4]])" equals="matrix([[5.5,8.5],[6.5,7.5]])" isExecutable="true" isTestOnly="false" test="true" type="matrix" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="min" name="min" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Statistical operators" />
        <category id="Containers-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Stats.java" contentType="-13" returnType="unknown" type="-20">
          <operand name="l" position="0" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">the minimum element found in the operand.</result>
        <comment>the min operator behavior depends on the nature of the operand</comment>
        <seeAlso>
          <see id="max" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if it is a list of points: min returns the minimum of all points as a point (i.e. the point with the smallest coordinate on the x-axis, in case of equality the point with the smallest coordinate on the y-axis is chosen. If all the points are equal, the first one is returned. )" />
          <usage descUsageElt="if it is a population of a list of other types: min transforms all elements into integer and returns the minimum of them" />
          <usage descUsageElt="if it is a map, min returns the minimum among the list of all elements value" />
          <usage descUsageElt="if it is a file, min returns the minimum of the content of the file (that is also a container)" />
          <usage descUsageElt="if it is a graph, min returns the minimum of the list of the elements of the graph (that can be the list of edges or vertexes depending on the graph)" />
          <usage descUsageElt="if it is a matrix of int, float or object, min returns the minimum of all the numerical elements (thus all elements for integer and float matrices)" />
          <usage descUsageElt="if it is a matrix of geometry, min returns the minimum of the list of the geometries" />
          <usage descUsageElt="if it is a matrix of another type, min returns the minimum of the elements transformed into float" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if it is a list of int or float: min returns the minimum of all the elements">
            <examples>
              <example code="min ([100, 23.2, 34.5])" equals="23.2" isExecutable="true" isTestOnly="false" test="true" type="unknown" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="rotated_by" name="rotated_by" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g1" position="0" type="geometry" />
          <operand name="angle" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g1" position="0" type="geometry" />
          <operand name="angle" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">A geometry resulting from the application of a rotation by the right-hand operand angle (degree) to the left-hand operand (geometry, agent, point)</result>
        <seeAlso>
          <see id="transformed_by" />
          <see id="translated_by" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="self rotated_by 45" equals="the geometry resulting from a 45 degres rotation to the geometry of the agent applying the operator." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <comment>the right-hand operand can be a float or a int</comment>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="split_with" id="tokenize" name="tokenize" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Strings-related operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="split_with" name="split_with" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Strings-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Strings.java" contentType="4" returnType="list" type="-13">
          <operand name="target" position="0" type="string" />
          <operand name="pattern" position="1" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Returns a list containing the sub-strings (tokens) of the left-hand operand delimited by each of the characters of the right-hand operand.</result>
        <comment>Delimiters themselves are excluded from the resulting list.</comment>
        <usagesExamples>
          <usage>
            <examples>
              <example code="'to be or not to be,that is the question' split_with ' ,'" equals="['to','be','or','not','to','be','that','is','the','question']" isExecutable="true" isTestOnly="false" test="true" type="list" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="contains_any" name="contains_any" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Strings-related operators" />
        <category id="Containers-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="bool" type="-13">
          <operand name="target" position="0" type="string" />
          <operand name="l" position="1" type="list" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-13" returnType="bool" type="-13">
          <operand name="c" position="0" type="container" />
          <operand name="l" position="1" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>true if the left operand contains one of the elements of the right operand, false otherwise</result>
        <comment>the definition of contains depends on the container</comment>
        <seeAlso>
          <see id="contains" />
          <see id="contains_all" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="&quot;abcabcabc&quot; contains_any [&quot;ca&quot;,&quot;xy&quot;]" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="[1,2,3,4,5,6] contains_any [2,4]" equals="true " isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="[1,2,3,4,5,6] contains_any [2,8]" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="[1::2, 3::4, 5::6] contains_any [1,3]" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="[1::2, 3::4, 5::6] contains_any [2,4]" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the right operand is nil or empty, contains_any returns false" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="load_graph_from_file" name="load_graph_from_file" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="format" position="0" type="string" />
          <operand name="gamaFile" position="1" type="file" />
        </operands>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="filename" position="0" type="string" />
          <operand name="vertex_specy" position="1" type="species" />
          <operand name="edge_specy" position="2" type="species" />
        </operands>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="format" position="0" type="string" />
          <operand name="filename" position="1" type="string" />
          <operand name="vertex_specy" position="2" type="species" />
          <operand name="edge_specy" position="3" type="species" />
        </operands>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="format" position="0" type="string" />
          <operand name="filename" position="1" type="string" />
          <operand name="vertex_specy" position="2" type="species" />
          <operand name="edge_specy" position="3" type="species" />
          <operand name="spatial" position="4" type="bool" />
        </operands>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="filename" position="0" type="string" />
        </operands>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="format" position="0" type="string" />
          <operand name="filename" position="1" type="string" />
        </operands>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="graph" type="-13">
          <operand name="format" position="0" type="string" />
          <operand name="gamaFile" position="1" type="file" />
          <operand name="vertex_specy" position="2" type="species" />
          <operand name="edge_specy" position="3" type="species" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">loads a graph from a filereturns a graph loaded from a given file encoded into a given format. The last boolean parameter indicates whether the resulting graph will be considered as spatial or not by GAMA</result>
        <comment>Available formats: "pajek": Pajek (Slovene word for Spider) is a program, for Windows, for analysis and visualization of large networks. See: http://pajek.imfm.si/doku.php?id=pajek for more details."lgl": LGL is a compendium of applications for making the visualization of large networks and trees tractable. See: http://lgl.sourceforge.net/ for more details."dot": DOT is a plain text graph description language. It is a simple way of describing graphs that both humans and computer programs can use. See: http://en.wikipedia.org/wiki/DOT_language for more details."edge": This format is a simple text file with numeric vertex ids defining the edges."gexf": GEXF (Graph Exchange XML Format) is a language for describing complex networks structures, their associated data and dynamics. Started in 2007 at Gephi project by different actors, deeply involved in graph exchange issues, the gexf specifications are mature enough to claim being both extensible and open, and suitable for real specific applications. See: http://gexf.net/format/ for more details."graphml": GraphML is a comprehensive and easy-to-use file format for graphs based on XML. See: http://graphml.graphdrawing.org/ for more details."tlp" or "tulip": TLP is the Tulip software graph format. See: http://tulip.labri.fr/TulipDrupal/?q=tlp-file-format for more details. "ncol": This format is used by the Large Graph Layout progra. It is simply a symbolic weighted edge list. It is a simple text file with one edge per line. An edge is defined by two symbolic vertex names separated by whitespace. (The symbolic vertex names themselves cannot contain whitespace.) They might followed by an optional number, this will be the weight of the edge. See: http://bioinformatics.icmb.utexas.edu/lgl for more details.The map operand should includes following elements:Available formats: "pajek": Pajek (Slovene word for Spider) is a program, for Windows, for analysis and visualization of large networks. See: http://pajek.imfm.si/doku.php?id=pajek for more details."lgl": LGL is a compendium of applications for making the visualization of large networks and trees tractable. See: http://lgl.sourceforge.net/ for more details."dot": DOT is a plain text graph description language. It is a simple way of describing graphs that both humans and computer programs can use. See: http://en.wikipedia.org/wiki/DOT_language for more details."edge": This format is a simple text file with numeric vertex ids defining the edges."gexf": GEXF (Graph Exchange XML Format) is a language for describing complex networks structures, their associated data and dynamics. Started in 2007 at Gephi project by different actors, deeply involved in graph exchange issues, the gexf specifications are mature enough to claim being both extensible and open, and suitable for real specific applications. See: http://gexf.net/format/ for more details."graphml": GraphML is a comprehensive and easy-to-use file format for graphs based on XML. See: http://graphml.graphdrawing.org/ for more details."tlp" or "tulip": TLP is the Tulip software graph format. See: http://tulip.labri.fr/TulipDrupal/?q=tlp-file-format for more details. "ncol": This format is used by the Large Graph Layout progra. It is simply a symbolic weighted edge list. It is a simple text file with one edge per line. An edge is defined by two symbolic vertex names separated by whitespace. (The symbolic vertex names themselves cannot contain whitespace.) They might followed by an optional number, this will be the weight of the edge. See: http://bioinformatics.icmb.utexas.edu/lgl for more details.The map operand should includes following elements:</comment>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- load_graph_from_file(" isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;&quot;pajek&quot;," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;&quot;./example_of_Pajek_file&quot;," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;myVertexSpecy," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;myEdgeSpecy);" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- load_graph_from_file(" isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;&quot;pajek&quot;," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;&quot;./example_of_Pajek_file&quot;," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;myVertexSpecy," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;myEdgeSpecy , true);" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="&quot;format&quot;: the format of the file" />
          <usage descUsageElt="&quot;filename&quot;: the filename of the file containing the network" />
          <usage descUsageElt="&quot;edges_specy&quot;: the species of edges" />
          <usage descUsageElt="&quot;vertices_specy&quot;: the species of vertices" />
          <usage descUsageElt="&quot;format&quot;: the format of the file" />
          <usage descUsageElt="&quot;filename&quot;: the filename of the file containing the network" />
          <usage descUsageElt="&quot;edges_specy&quot;: the species of edges" />
          <usage descUsageElt="&quot;vertices_specy&quot;: the species of vertices" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="&quot;format&quot;: the format of the file, &quot;file&quot;: the file containing the network">
            <examples>
              <example code="graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- load_graph_from_file(" isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;&quot;pajek&quot;," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;&quot;example_of_Pajek_file&quot;);" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
          <usage descUsageElt="&quot;filename&quot;: the filename of the file containing the network, &quot;edges_specy&quot;: the species of edges, &quot;vertices_specy&quot;: the species of vertices">
            <examples>
              <example code="graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- load_graph_from_file(" isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;&quot;pajek&quot;," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;&quot;./example_of_Pajek_file&quot;," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;myVertexSpecy," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;myEdgeSpecy );" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
          <usage descUsageElt="&quot;file&quot;: the file containing the network">
            <examples>
              <example code="graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- load_graph_from_file(" isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;&quot;pajek&quot;," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;&quot;example_of_Pajek_file&quot;);" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
          <usage descUsageElt="&quot;format&quot;: the format of the file, &quot;filename&quot;: the filename of the file containing the network">
            <examples>
              <example code="graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- load_graph_from_file(" isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;&quot;pajek&quot;," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;&quot;example_of_Pajek_file&quot;);" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
          <usage descUsageElt="&quot;format&quot;: the format of the file, &quot;file&quot;: the file containing the network, &quot;edges_specy&quot;: the species of edges, &quot;vertices_specy&quot;: the species of vertices">
            <examples>
              <example code="graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- load_graph_from_file(" isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;&quot;pajek&quot;," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;&quot;example_of_Pajek_file&quot;," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;myVertexSpecy," isExecutable="false" isTestOnly="false" test="false" type="graph" />
              <example code="&#x9;&#x9;&#x9;myEdgeSpecy );" isExecutable="false" isTestOnly="false" test="false" type="graph" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="at" name="at" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Containers-related operators" />
        <category id="Strings-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gama/util/IContainer/Addressable.java" contentType="-13" returnType="ValueType" type="-20">
          <operand name="msi.gama.util.icontainer&lt;keytype,valuetype&gt;.addressable&lt;keytype,valuetype&gt;" position="0" type="msi.gama.util.IContainer&lt;KeyType,ValueType&gt;.Addressable&lt;KeyType,ValueType&gt;" />
          <operand name="index" position="1" type="KeyType" />
        </operands>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="string" type="-13">
          <operand name="lv" position="0" type="string" />
          <operand name="rv" position="1" type="int" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">the element at the right operand index of the container</result>
        <comment>The first element of the container is located at the index 0. In addition, if the user tries to get the element at an index higher or equals than the length of the container, he will get an IndexOutOfBoundException.The at operator behavior depends on the nature of the operand</comment>
        <seeAlso>
          <see id="contains_all, contains_any" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if it is a file, at returns the element of the file content at the index specified by the right operand" />
          <usage descUsageElt="if it is a population, at returns the agent at the index specified by the right operand" />
          <usage descUsageElt="if it is a graph and if the right operand is a node, at returns the in and out edges corresponding to that node" />
          <usage descUsageElt="if it is a graph and if the right operand is an edge, at returns the pair node_out::node_in of the edge" />
          <usage descUsageElt="if it is a graph and if the right operand is a pair node1::node2, at returns the edge from node1 to node2 in the graph" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if it is a list or a matrix, at returns the element at the index specified by the right operand">
            <examples>
              <example code="[1, 2, 3] at 2" equals="3" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="[{1,2}, {3,4}, {5,6}] at 0" equals="{1.0,2.0}" isExecutable="true" isTestOnly="false" test="true" type="point" />
            </examples>
          </usage>
        </usages>
        <usagesExamples>
          <usage>
            <examples>
              <example code="'abcdef' at 0" equals="'a'" isExecutable="true" isTestOnly="false" test="true" type="string" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="cube" name="cube" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
        <category id="3D" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="side_size" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A cube geometry which side size is equal to the operand.</result>
        <comment>the centre of the cube is by default the location of the current agent in which has been called this operator.</comment>
        <seeAlso>
          <see id="around" />
          <see id="circle" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="rectangle" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="cube(10)" equals="a geometry as a square of side size 10." isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns nil if the operand is nil." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="is_number" name="is_number" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Strings-related operators" />
        <category id="Arithmetic operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="bool" type="-13">
          <operand name="s" position="0" type="string" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="bool" type="-13">
          <operand name="d" position="0" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>tests whether the operand represents a numerical valueReturns whether the argument is a real number or not</result>
        <comment>Note that the symbol . should be used for a float value (a string with , will not be considered as a numeric value). Symbols e and E are also accepted. A hexadecimal value should begin with #.</comment>
        <usagesExamples>
          <usage>
            <examples>
              <example code="is_number(&quot;test&quot;)" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="is_number(&quot;123.56&quot;)" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="is_number(&quot;-1.2e5&quot;)" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="is_number(&quot;1,2&quot;)" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="is_number(&quot;#12FA&quot;)" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="is_number(4.66)" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="is_number(#infinity)" equals="true" isExecutable="true" isTestOnly="false" test="true" type="bool" />
              <example code="is_number(#nan)" equals="false" isExecutable="true" isTestOnly="false" test="true" type="bool" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="weighted_means_DM" name="weighted_means_DM" projectName="msi.gama.core">
      <operatorCategories>
        <category id="multicriteria operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/extensions/multi_criteria/MulticriteriaAnalyzeOperator.java" contentType="-13" returnType="int" type="-13">
          <operand name="cands" position="0" type="list&lt;list&gt;" />
          <operand name="criteriaMap" position="1" type="java.util.List&lt;java.util.Map&lt;java.lang.String,java.lang.Object&gt;&gt;" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>The index of the candidate that maximizes the weighted mean of its criterion values. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion (list of map)</result>
        <seeAlso>
          <see id="promethee_DM" />
          <see id="electre_DM" />
          <see id="evidence_theory_DM" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="weighted_means_DM([[1.0, 7.0],[4.0,2.0],[3.0, 3.0]], [[&quot;name&quot;::&quot;utility&quot;, &quot;weight&quot; :: 2.0],[&quot;name&quot;::&quot;price&quot;, &quot;weight&quot; :: 1.0]])" equals="1" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns -1 is the list of candidates is nil or empty" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="arc" name="arc" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Shape" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="xRadius" position="0" type="float" />
          <operand name="heading" position="1" type="float" />
          <operand name="amplitude" position="2" type="float" />
          <operand name="filled" position="3" type="bool" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="xRadius" position="0" type="float" />
          <operand name="heading" position="1" type="float" />
          <operand name="amplitude" position="2" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>An arc, which radius is equal to the first operand, heading to the second, amplitude to the third and a boolean indicating whether to return a linestring or a polygon to the fourthAn arc, which radius is equal to the first operand, heading to the second and amplitude the third</result>
        <comment>the centre of the arc is by default the location of the current agent in which has been called this operator.the centre of the arc is by default the location of the current agent in which has been called this operator. This operator returns a polygon by default.</comment>
        <seeAlso>
          <see id="around" />
          <see id="cone" />
          <see id="line" />
          <see id="link" />
          <see id="norm" />
          <see id="point" />
          <see id="polygon" />
          <see id="polyline" />
          <see id="super_ellipse" />
          <see id="rectangle" />
          <see id="square" />
          <see id="circle" />
          <see id="ellipse" />
          <see id="triangle" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="arc(4,45,90, false)" equals="a geometry as an arc of radius 4, in a direction of 45Â° and an amplitude of 90Â°, which only contains the points on the arc" isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="arc(4,45,90)" equals="a geometry as an arc of radius 4, in a direction of 45Â° and an amplitude of 90Â°" isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="returns a point if the radius operand is lower or equal to 0." />
          <usage descUsageElt="returns a point if the radius operand is lower or equal to 0." />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="-" name="-" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Color-related operators" />
        <category id="Points-related operators" />
        <category id="Arithmetic operators" />
        <category id="Containers-related operators" />
        <category id="Spatial operators" />
        <category id="Matrix-related operators" />
        <category id="Spatial transformations operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="c" position="0" type="rgb" />
          <operand name="i" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="p1" position="0" type="point" />
          <operand name="p" position="1" type="point" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="int" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-20" returnType="list" type="-13">
          <operand name="l1" position="0" type="list" />
          <operand name="object" position="1" type="unknown" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g1" position="0" type="geometry" />
          <operand name="g2" position="1" type="geometry" />
        </operands>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-20" returnType="matrix" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="val" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-21" returnType="map" type="-21">
          <operand name="m1" position="0" type="map" />
          <operand name="m2" position="1" type="map" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="p1" position="0" type="point" />
          <operand name="p" position="1" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="int" />
        </operands>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-20" returnType="matrix" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="val" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g" position="0" type="geometry" />
          <operand name="size" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gama/util/matrix/IMatrix.java" contentType="-20" returnType="matrix" type="-13">
          <operand name="msi.gama.util.matrix.imatrix&lt;t&gt;" position="0" type="matrix" />
          <operand name="other" position="1" type="matrix" />
        </operands>
        <operands class="msi/gaml/operators/Points.java" contentType="-13" returnType="point" type="-13">
          <operand name="p1" position="0" type="point" />
          <operand name="p" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-20" returnType="list" type="-13">
          <operand name="l1" position="0" type="species" />
          <operand name="object" position="1" type="agent" />
        </operands>
        <operands class="msi/gaml/operators/Spatial.java" contentType="-13" returnType="geometry" type="-13">
          <operand name="g1" position="0" type="geometry" />
          <operand name="agents" position="1" type="container&lt;geometry&gt;" />
        </operands>
        <operands class="msi/gaml/operators/Colors.java" contentType="-13" returnType="rgb" type="-13">
          <operand name="c1" position="0" type="rgb" />
          <operand name="c" position="1" type="rgb" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-19" returnType="matrix" type="-13">
          <operand name="a" position="0" type="int" />
          <operand name="b" position="1" type="matrix" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="int" type="-13">
          <operand name="x" position="0" type="int" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-13" returnType="float" type="-13">
          <operand name="x" position="0" type="float" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-21" returnType="map" type="-18">
          <operand name="m1" position="0" type="map" />
          <operand name="m2" position="1" type="pair" />
        </operands>
        <operands class="msi/gaml/operators/Containers.java" contentType="-20" returnType="list" type="-13">
          <operand name="source" position="0" type="container" />
          <operand name="l" position="1" type="container" />
        </operands>
        <operands class="msi/gaml/operators/Maths.java" contentType="-18" returnType="matrix" type="-13">
          <operand name="a" position="0" type="float" />
          <operand name="b" position="1" type="matrix" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">Returns the difference of the two operands.If it is used as an unary operator, it returns the opposite of the operand.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="['a'::1,'b'::2] - ['b'::2]" equals="['a'::1]" isExecutable="true" isTestOnly="false" test="true" type="map" />
              <example code="['a'::1,'b'::2] - ['b'::2,'c'::3]" equals="['a'::1]" isExecutable="true" isTestOnly="false" test="true" type="map" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="- (-56)" equals="56" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
          <usage>
            <examples>
              <example code="['a'::1,'b'::2] - ('b'::2)" equals="['a'::1]" isExecutable="true" isTestOnly="false" test="true" type="map" />
              <example code="['a'::1,'b'::2] - ('c'::3)" equals="['a'::1,'b'::2]" isExecutable="true" isTestOnly="false" test="true" type="map" />
            </examples>
          </usage>
        </usagesExamples>
        <comment>The behavior of the operator depends on the type of the operands.</comment>
        <seeAlso>
          <see id="+" />
          <see id="*" />
          <see id="/" />
          <see id="-" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="if the left operand is a species and the right operand is an agent of the species, - returns a list containining all the agents of the species minus this agent" />
          <usage descUsageElt="if both operands are containers and the right operand is empty, - returns the left operand" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if one operand is a color and the other an integer, returns a new color resulting from the substraction of each component of the color with the right operand">
            <examples>
              <example code="rgb([255, 128, 32]) - 3" equals="rgb([252,125,29])" isExecutable="true" isTestOnly="false" test="true" type="rgb" />
            </examples>
          </usage>
          <usage descUsageElt="if both operands are points, returns their difference (coordinates per coordinates).">
            <examples>
              <example code="{1, 2} - {4, 5}" equals="{-3.0, -3.0}" isExecutable="true" isTestOnly="false" test="true" type="point" />
            </examples>
          </usage>
          <usage descUsageElt="if both operands are numbers, performs a normal arithmetic difference and returns a float if one of them is a float.">
            <examples>
              <example code="1 - 1" equals="0" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="1.0 - 1" equals="0.0" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="3.7 - 1.2" equals="2.5" isExecutable="true" isTestOnly="false" test="true" type="int" />
              <example code="3 - 1.2" equals="1.8" isExecutable="true" isTestOnly="false" test="true" type="int" />
            </examples>
          </usage>
          <usage descUsageElt="if the left operand is a list and the right operand is an object of any type (except list), - returns a list containining the elements of the left operand minus all the occurences of this object">
            <examples>
              <example code="[1,2,3,4,5,6] - 2" equals="[1,3,4,5,6]" isExecutable="true" isTestOnly="false" test="true" type="list&lt;int&gt;" />
              <example code="[1,2,3,4,5,6] - 0" equals="[1,2,3,4,5,6]" isExecutable="true" isTestOnly="false" test="true" type="list&lt;int&gt;" />
            </examples>
          </usage>
          <usage descUsageElt="if both operands are a point, a geometry or an agent, returns the geometry resulting from the difference between both geometries">
            <examples>
              <example code="geom1 - geom2" equals="a geometry corresponding to difference between geom1 and geom2" isExecutable="false" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage descUsageElt="if the left-hand operand is a geometry and the rigth-hand operand a float, returns a geometry corresponding to the left-hand operand (geometry, agent, point) reduced by the right-hand operand distance">
            <examples>
              <example code="shape - 5" equals="a geometry corresponding to the geometry of the agent applying the operator reduced by a distance of 5" isExecutable="true" isTestOnly="false" test="false" type="geometry" />
            </examples>
          </usage>
          <usage descUsageElt="if left-hand operand is a point and the right-hand a number, returns a new point with each coordinate as the difference of the operand coordinate with this number.">
            <examples>
              <example code="{1, 2} - 4.5" equals="{-3.5, -2.5, -4.5}" isExecutable="true" isTestOnly="false" test="true" type="point" />
              <example code="{1, 2} - 4" equals="{-3.0,-2.0,-4.0}" isExecutable="true" isTestOnly="false" test="true" type="point" />
            </examples>
          </usage>
          <usage descUsageElt="if the right-operand is a list of points, geometries or agents, returns the geometry resulting from the difference between the left-geometry and all of the right-geometries">
            <examples>
              <example code="rectangle(10,10) - [circle(2), square(2)]" equals="rectangle(10,10) - (circle(2) + square(2))" isExecutable="true" isTestOnly="false" test="true" type="geometry" />
            </examples>
          </usage>
          <usage descUsageElt="if both operands are colors, returns a new color resulting from the substraction of the two operands, component by component">
            <examples>
              <example code="rgb([255, 128, 32]) - rgb('red')" equals="rgb([0,128,32])" isExecutable="true" isTestOnly="false" test="true" type="rgb" />
            </examples>
          </usage>
          <usage descUsageElt="if one operand is a matrix and the other a number (float or int), performs a normal arithmetic difference of the number with each element of the matrix (results are float if the number is a float.">
            <examples>
              <example code="3.5 - matrix([[2,5],[3,4]])" equals="matrix([[1.5,-1.5],[0.5,-0.5]])" isExecutable="true" isTestOnly="false" test="true" type="matrix" />
            </examples>
          </usage>
          <usage descUsageElt="if both operands are containers, returns a new list in which all the elements of the right operand have been removed from the left one">
            <examples>
              <example code="[1,2,3,4,5,6] - [2,4,9]" equals="[1,3,5,6]" isExecutable="true" isTestOnly="false" test="true" type="list&lt;int&gt;" />
              <example code="[1,2,3,4,5,6] - [0,8]" equals="[1,2,3,4,5,6]" isExecutable="true" isTestOnly="false" test="true" type="list&lt;int&gt;" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="reverse" name="reverse" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Strings-related operators" />
        <category id="Containers-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Strings.java" contentType="-13" returnType="string" type="-13">
          <operand name="s" position="0" type="string" />
        </operands>
        <operands class="msi/gama/util/IContainer.java" contentType="-20" returnType="container" type="-14">
          <operand name="msi.gama.util.icontainer&lt;keytype,valuetype&gt;" position="0" type="container" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result masterDoc="true">the operand elements in the reversed order in a copy of the operand.</result>
        <comment>the reverse operator behavior depends on the nature of the operand</comment>
        <usagesNoExample>
          <usage descUsageElt="if it is a file, reverse returns a copy of the file with a reversed content" />
          <usage descUsageElt="if it is a population, reverse returns a copy of the population with elements in the reversed order" />
          <usage descUsageElt="if it is a graph, reverse returns a copy of the graph (with all edges and vertexes), with all of the edges reversed" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="if it is a string, reverse returns a new string with caracters in the reversed order">
            <examples>
              <example code="reverse ('abcd')" equals="'dcba'" isExecutable="true" isTestOnly="false" test="true" type="string" />
            </examples>
          </usage>
          <usage descUsageElt="if it is a list, reverse returns a copy of the operand list with elements in the reversed order">
            <examples>
              <example code="reverse ([10,12,14])" equals="[14, 12, 10]" isExecutable="true" isTestOnly="false" test="true" type="container" />
            </examples>
          </usage>
          <usage descUsageElt="if it is a map, reverse returns a copy of the operand map with each pair in the reversed order (i.e. all keys become values and values become keys)">
            <examples>
              <example code="reverse (['k1'::44, 'k2'::32, 'k3'::12])" equals="[12::'k3',  32::'k2', 44::'k1']" isExecutable="true" isTestOnly="false" test="true" type="container" />
            </examples>
          </usage>
          <usage descUsageElt="if it is a matrix, reverse returns a new matrix containing the transpose of the operand.">
            <examples>
              <example code="reverse(matrix([[&quot;c11&quot;,&quot;c12&quot;,&quot;c13&quot;],[&quot;c21&quot;,&quot;c22&quot;,&quot;c23&quot;]]))" equals="matrix([[&quot;c11&quot;,&quot;c21&quot;],[&quot;c12&quot;,&quot;c22&quot;],[&quot;c13&quot;,&quot;c23&quot;]])" isExecutable="true" isTestOnly="false" test="true" type="container" />
            </examples>
          </usage>
        </usages>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="simple_clustering_by_distance" id="simple_clustering_by_envelope_distance" name="simple_clustering_by_envelope_distance" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Spatial operators" />
        <category id="Spatial statistical operators" />
        <category id="Statistical operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="simple_clustering_by_distance" name="simple_clustering_by_distance" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Spatial operators" />
        <category id="Spatial statistical operators" />
        <category id="Statistical operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Spatial.java" contentType="5" returnType="list&lt;list&lt;agent&gt;&gt;" type="-13">
          <operand name="agents" position="0" type="container&lt;agent&gt;" />
          <operand name="distance" position="1" type="float" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>A list of agent groups clustered by distance considering a distance min between two groups.</result>
        <seeAlso>
          <see id="hierarchical_clustering" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="[ag1, ag2, ag3, ag4, ag5] simpleClusteringByDistance 20.0" equals="for example, can return [[ag1, ag3], [ag2], [ag4, ag5]]" isExecutable="false" isTestOnly="false" test="false" type="list&lt;list&lt;agent&gt;&gt;" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" alternativeNameOf="species" id="species_of" name="species_of" projectName="msi.gama.core">
      <operatorsCategories>
        <category id="Casting operators" />
      </operatorsCategories>
    </operator>
    <operator alphabetOrder="lz" id="species" name="species" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Casting operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Cast.java" contentType="-18" returnType="species" type="-13">
          <operand name="val" position="0" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>casting of the operand to a species.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="species(self)" equals="the species of the current agent" isExecutable="false" isTestOnly="false" test="false" type="species" />
              <example code="species('node')" equals="node" isExecutable="false" isTestOnly="false" test="false" type="species" />
              <example code="species([1,5,9,3])" equals="nil" isExecutable="false" isTestOnly="false" test="false" type="species" />
              <example code="species(node1)" equals="node" isExecutable="false" isTestOnly="false" test="false" type="species" />
            </examples>
          </usage>
        </usagesExamples>
        <usagesNoExample>
          <usage descUsageElt="if the operand is nil, returns nil;" />
          <usage descUsageElt="if the operand is an agent, returns its species;" />
          <usage descUsageElt="if the operand is a string, returns the species with this name (nil if not found);" />
          <usage descUsageElt="otherwise, returns nil" />
        </usagesNoExample>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="predecessors_of" name="predecessors_of" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-23" returnType="list" type="5">
          <operand name="graph" position="0" type="graph" />
          <operand name="vertex" position="1" type="unknown" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>returns the list of predecessors (i.e. sources of in edges) of the given vertex (right-hand operand) in the given graph (left-hand operand)</result>
        <seeAlso>
          <see id="neighbours_of" />
          <see id="successors_of" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphEpidemio &lt;- as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]);" isExecutable="true" isTestOnly="true" test="true" type="list" />
              <example code="graphEpidemio predecessors_of ({1,5})" equals="[]" isExecutable="true" isTestOnly="false" test="false" type="list" />
              <example code="graphEpidemio predecessors_of node({34,56})" equals="[{12;45}]" isExecutable="true" isTestOnly="false" test="false" type="list" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="connectivity_index" name="connectivity_index" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Graphs-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi/gaml/operators/Graphs.java" contentType="-13" returnType="float" type="-13">
          <operand name="graph" position="0" type="graph" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>retruns a simple connetivity index. This number is estimated through the number of nodes (v) and of sub-graphs (p) : IC = (v - p) /(v - 1).</result>
        <seeAlso>
          <see id="alpha_index" />
          <see id="beta_index" />
          <see id="gamma_index" />
          <see id="nb_cycles" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="graph graphEpidemio &lt;- graph([]);" isExecutable="true" isTestOnly="false" test="true" type="float" />
              <example code="connectivity_index(graphEpidemio)" equals="the connectivity index of the graph" isExecutable="true" isTestOnly="false" test="false" type="float" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="list" name="list" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Types-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gaml.types.GamaListType" contentType="" returnType="list" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Casts the operand into the type list</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="unknown" name="unknown" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Types-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gaml.types.GamaNoType" contentType="" returnType="unknown" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Casts the operand into the type unknown</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="map" name="map" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Types-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gaml.types.GamaMapType" contentType="" returnType="map" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Casts the operand into the type map</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="container" name="container" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Types-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gaml.types.GamaContainerType" contentType="" returnType="container" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Casts the operand into the type container</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="float" name="float" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Types-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gaml.types.GamaFloatType" contentType="" returnType="float" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Casts the operand into the type float</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="agent" name="agent" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Types-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gaml.types.GamaGenericAgentType" contentType="" returnType="agent" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Casts the operand into the type agent</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="bool" name="bool" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Types-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gaml.types.GamaBoolType" contentType="" returnType="bool" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Casts the operand into the type bool</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="int" name="int" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Types-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gaml.types.GamaIntegerType" contentType="" returnType="int" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Casts the operand into the type int</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="string" name="string" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Types-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gaml.types.GamaStringType" contentType="" returnType="string" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Casts the operand into the type string</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="graph" name="graph" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Types-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gaml.types.GamaGraphType" contentType="" returnType="graph" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Casts the operand into the type graph</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="pair" name="pair" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Types-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gaml.types.GamaPairType" contentType="" returnType="pair" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Casts the operand into the type pair</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="path" name="path" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Types-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gaml.types.GamaPathType" contentType="" returnType="path" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Casts the operand into the type path</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="geometry" name="geometry" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Types-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gaml.types.GamaGeometryType" contentType="" returnType="geometry" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Casts the operand into the type geometry</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="matrix" name="matrix" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Types-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gaml.types.GamaMatrixType" contentType="" returnType="matrix" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Casts the operand into the type matrix</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="is_image" name="is_image" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaImageFile" contentType="" returnType="bool" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Tests whether the operand is a image file.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="image_file" name="image_file" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaImageFile" contentType="" returnType="file" type="">
          <operand name="val" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Constructs a file of type image. Allowed extensions are limited to tif, tiff, jpg, jpeg, png, gif, pict, bmp</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="is_R" name="is_R" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.RFile" contentType="" returnType="bool" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Tests whether the operand is a R file.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="R_file" name="R_file" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.RFile" contentType="" returnType="file" type="">
          <operand name="val" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Constructs a file of type R. Allowed extensions are limited to r</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="is_osm" name="is_osm" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaOsmFile" contentType="" returnType="bool" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Tests whether the operand is a osm file.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="is_shape" name="is_shape" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaShapeFile" contentType="" returnType="bool" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Tests whether the operand is a shape file.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="shape_file" name="shape_file" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaShapeFile" contentType="" returnType="file" type="">
          <operand name="val" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Constructs a file of type shape. Allowed extensions are limited to shp</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="is_text" name="is_text" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaTextFile" contentType="" returnType="bool" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Tests whether the operand is a text file.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="text_file" name="text_file" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaTextFile" contentType="" returnType="file" type="">
          <operand name="val" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Constructs a file of type text. Allowed extensions are limited to txt, data, csv, text, tsv, xml</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="is_URL" name="is_URL" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.URLFile" contentType="" returnType="bool" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Tests whether the operand is a URL file.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="URL_file" name="URL_file" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.URLFile" contentType="" returnType="file" type="">
          <operand name="val" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Constructs a file of type URL. Allowed extensions are limited to txt</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="is_property" name="is_property" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaPropertyFile" contentType="" returnType="bool" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Tests whether the operand is a property file.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="property_file" name="property_file" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaPropertyFile" contentType="" returnType="file" type="">
          <operand name="val" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Constructs a file of type property. Allowed extensions are limited to properties</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="is_grid" name="is_grid" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaGridFile" contentType="" returnType="bool" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Tests whether the operand is a grid file.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="grid_file" name="grid_file" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaGridFile" contentType="" returnType="file" type="">
          <operand name="val" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Constructs a file of type grid. Allowed extensions are limited to asc</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="is_pgm" name="is_pgm" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaImageFile.GamaPgmFile" contentType="" returnType="bool" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Tests whether the operand is a pgm file.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="pgm_file" name="pgm_file" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaImageFile.GamaPgmFile" contentType="" returnType="file" type="">
          <operand name="val" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Constructs a file of type pgm. Allowed extensions are limited to pgm</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="is_gaml" name="is_gaml" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GAMLFile" contentType="" returnType="bool" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Tests whether the operand is a gaml file.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="gaml_file" name="gaml_file" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GAMLFile" contentType="" returnType="file" type="">
          <operand name="val" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Constructs a file of type gaml. Allowed extensions are limited to gaml</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="is_csv" name="is_csv" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaCSVFile" contentType="" returnType="bool" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Tests whether the operand is a csv file.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="csv_file" name="csv_file" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaCSVFile" contentType="" returnType="file" type="">
          <operand name="val" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Constructs a file of type csv. Allowed extensions are limited to csv, tsv</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="is_xml" name="is_xml" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaXMLFile" contentType="" returnType="bool" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Tests whether the operand is a xml file.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="xml_file" name="xml_file" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaXMLFile" contentType="" returnType="file" type="">
          <operand name="val" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Constructs a file of type xml. Allowed extensions are limited to xml</result>
      </documentation>
    </operator>
    <operator alphabetOrder="ak" id="is_svg" name="is_svg" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaSVGFile" contentType="" returnType="bool" type="">
          <operand name="val" position="0" type="any" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Tests whether the operand is a svg file.</result>
      </documentation>
    </operator>
    <operator alphabetOrder="lz" id="svg_file" name="svg_file" projectName="msi.gama.core">
      <operatorCategories>
        <category id="Files-related operators" />
      </operatorCategories>
      <combinaisonIO>
        <operands class="msi.gama.util.file.GamaSVGFile" contentType="" returnType="file" type="">
          <operand name="val" position="0" type="string" />
        </operands>
      </combinaisonIO>
      <documentation>
        <result>Constructs a file of type svg. Allowed extensions are limited to svg</result>
      </documentation>
    </operator>
  </operators>
  <skills>
    <skill class="simtools.gaml.extensions.physics.Physics3DSkill" extends="" id="physical3D" name="physical3D" projectName="simtools.gaml.extensions.physics">
      <vars>
        <var constant="false" depends_on="" name="physical_3D_world" type="agent" />
        <var constant="false" depends_on="" name="density" type="float" />
        <var constant="false" depends_on="" name="mass" type="float" />
        <var constant="false" depends_on="" name="velocity" type="list" />
        <var constant="false" depends_on="" name="collisionBound" type="map" />
        <var constant="false" depends_on="" name="motor" type="point" />
      </vars>
      <actions />
    </skill>
    <skill class="msi.gaml.extensions.humanmoving.HumanMovingSkill" extends="msi.gaml.skills.MovingSkill" id="humanmoving" name="humanmoving" projectName="msi.gaml.extensions.humanmoving">
      <actions>
        <action name="wanderAbove" returnType="point">
          <args>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="agent_size" optional="true" type="int">
              <documentation>
                <result>specifiaction of size of the agent</result>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="wanderAndAvoid" returnType="point">
          <args>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="agent_size" optional="true" type="int">
              <documentation>
                <result>specifiaction of size of the agent</result>
              </documentation>
            </arg>
            <arg name="background" optional="true" type="" />
            <arg name="ignore_type" optional="true" type="" />
          </args>
        </action>
        <action name="blindWander" returnType="point">
          <args>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="agent_size" optional="true" type="int">
              <documentation>
                <result>specifiaction of size of the agent</result>
              </documentation>
            </arg>
            <arg name="background" optional="true" type="agent" />
            <arg name="target" optional="true" type="agent" />
          </args>
        </action>
        <action name="blindWander2" returnType="point">
          <args>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="agent_size" optional="true" type="int">
              <documentation>
                <result>specifiaction of size of the agent</result>
              </documentation>
            </arg>
            <arg name="background" optional="true" type="agent" />
            <arg name="target" optional="true" type="agent" />
          </args>
        </action>
        <action name="blindStraightWander" returnType="point">
          <args>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="agent_size" optional="true" type="int">
              <documentation>
                <result>specifiaction of size of the agent</result>
              </documentation>
            </arg>
            <arg name="background" optional="true" type="agent" />
            <arg name="direction" optional="true" type="int" />
            <arg name="target" optional="true" type="agent" />
          </args>
        </action>
        <action name="blindStraightWander2" returnType="point">
          <args>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="agent_size" optional="true" type="int">
              <documentation>
                <result>specifiaction of size of the agent</result>
              </documentation>
            </arg>
            <arg name="background" optional="true" type="agent" />
            <arg name="direction" optional="true" type="int" />
            <arg name="target" optional="true" type="agent" />
          </args>
        </action>
        <action name="approach" returnType="point">
          <args>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="agent_size" optional="true" type="int">
              <documentation>
                <result>specifiaction of size of the agent</result>
              </documentation>
            </arg>
            <arg name="background" optional="true" type="agent" />
            <arg name="target" optional="true" type="agent" />
          </args>
        </action>
        <action name="approachAvoidPassedPosition" returnType="point">
          <args>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="agent_size" optional="true" type="int">
              <documentation>
                <result>specifiaction of size of the agent</result>
              </documentation>
            </arg>
            <arg name="background" optional="true" type="agent" />
            <arg name="target" optional="true" type="agent" />
            <arg name="passedList" optional="true" type="list" />
          </args>
        </action>
        <action name="approachAvoidPassedPosition2" returnType="point">
          <args>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="agent_size" optional="true" type="int">
              <documentation>
                <result>specifiaction of size of the agent</result>
              </documentation>
            </arg>
            <arg name="background" optional="true" type="agent" />
            <arg name="target" optional="true" type="agent" />
            <arg name="passedList" optional="true" type="list" />
          </args>
        </action>
        <action name="blindWallTracking" returnType="point">
          <args>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="agent_size" optional="true" type="int">
              <documentation>
                <result>specifiaction of size of the agent</result>
              </documentation>
            </arg>
            <arg name="background" optional="true" type="agent" />
            <arg name="passedList" optional="true" type="list" />
            <arg name="target" optional="true" type="agent" />
          </args>
        </action>
        <action name="blindWallTracking2" returnType="point">
          <args>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="agent_size" optional="true" type="int">
              <documentation>
                <result>specifiaction of size of the agent</result>
              </documentation>
            </arg>
            <arg name="background" optional="true" type="agent" />
            <arg name="passedList" optional="true" type="list" />
            <arg name="target" optional="true" type="agent" />
          </args>
        </action>
      </actions>
    </skill>
    <skill class="ummisco.gama.communicator.skills.Communication" extends="ummisco.gama.communicator.common.ConnectionManager" id="network" name="network" projectName="ummisco.gama.communicator">
      <vars>
        <var constant="false" depends_on="" name="netAgtName" type="string">
          <documentation>
            <result>Net ID of the agent</result>
          </documentation>
        </var>
      </vars>
      <actions>
        <action name="connectMessenger" returnType="void">
          <args>
            <arg name="to" optional="false" type="string">
              <documentation>
                <result>server URL</result>
              </documentation>
            </arg>
            <arg name="at" optional="false" type="string">
              <documentation>
                <result>server URL</result>
              </documentation>
            </arg>
            <arg name="withName" optional="false" type="string">
              <documentation>
                <result>agent Name</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>moves the agent towards the target passed in the arguments.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do action: goto{&#xA; arg target value: one_of (list (species (self))); &#xA; arg speed value: speed * 2; &#xA; arg on value: road_network;}" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="emptyMessageBox" returnType="bool">
          <args />
          <documentation>
            <result>moves the agent towards the target passed in the arguments.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do action: goto{&#xA; arg target value: one_of (list (species (self))); &#xA; arg speed value: speed * 2; &#xA; arg on value: road_network;}" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="fetchMessage" returnType="map&lt;string,unknown&gt;">
          <args />
          <documentation>
            <result>moves the agent towards the target passed in the arguments.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do action: goto{&#xA; arg target value: one_of (list (species (self))); &#xA; arg speed value: speed * 2; &#xA; arg on value: road_network;}" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="sendMessage" returnType="void">
          <args>
            <arg name="dest" optional="true" type="string">
              <documentation>
                <result>The network ID of the agent who receive the message</result>
              </documentation>
            </arg>
            <arg name="content" optional="true" type="any type">
              <documentation>
                <result>The content of the message</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Send a message to a destination.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do action: goto{&#xA; arg target value: one_of (list (species (self))); &#xA; arg speed value: speed * 2; &#xA; arg on value: road_network;}" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
      </actions>
    </skill>
    <skill class="ummisco.miro.extension.moving.TrafficMovingSkill" extends="msi.gaml.skills.MovingSkill" id="trafficMoving" name="trafficMoving" projectName="ummisco.miro.extension.traffic">
      <actions>
        <action name="theorical_duration" returnType="java.lang.Float">
          <args>
            <arg name="from" optional="false" type="point,geometry,agent">
              <documentation>
                <result>the location or entity towards which to move.</result>
              </documentation>
            </arg>
            <arg name="to" optional="false" type="point,geometry,agent">
              <documentation>
                <result>the location or entity towards which to move.</result>
              </documentation>
            </arg>
            <arg name="on" optional="true" type="list,agent,graph,geometry">
              <documentation>
                <result>list, agent, graph, geometry that restrains this move (the agent moves inside this geometry)</result>
              </documentation>
            </arg>
            <arg name="max_speed" optional="true" type="float">
              <documentation>
                <result>speedMoving</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>moves the agent towards the target passed in the arguments while considering the other agents in the network (only for graph topology)</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do gotoTraffic target: one_of (list (species (self))) speed: speed * 2 on: road_network living_space: 2.0;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="goto_traffic" returnType="void">
          <args>
            <arg name="target" optional="false" type="point,geometry,agent">
              <documentation>
                <result>the location or entity towards which to move.</result>
              </documentation>
            </arg>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="on" optional="true" type="list,agent,graph,geometry">
              <documentation>
                <result>list, agent, graph, geometry that restrains this move (the agent moves inside this geometry)</result>
              </documentation>
            </arg>
            <arg name="duration" optional="true" type="float">
              <documentation>
                <result>duration of the moving</result>
              </documentation>
            </arg>
            <arg name="max_speed" optional="true" type="float">
              <documentation>
                <result>speedMoving</result>
              </documentation>
            </arg>
            <arg name="return_path" optional="true" type="boolean">
              <documentation>
                <result>if true, return the path followed (by default: false)</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>moves the agent towards the target passed in the arguments while considering the other agents in the network (only for graph topology)</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do gotoTraffic target: one_of (list (species (self))) speed: speed * 2 on: road_network living_space: 2.0;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
      </actions>
    </skill>
    <skill class="ummisco.miro.extension.transportation.skill.TransportationSkill" extends="" id="busTransportation" name="busTransportation" projectName="ummisco.miro.extension">
      <vars>
        <var constant="false" depends_on="" name="filePath" type="string" />
        <var constant="false" depends_on="" name="isTemporalGraph" type="boolean" />
        <var constant="false" depends_on="" name="individualGraph" type="graph" />
        <var constant="false" depends_on="" name="stationID" type="string">
          <documentation>
            <result>DB identificator of the station</result>
          </documentation>
        </var>
      </vars>
      <actions>
        <action name="travel_arrival" returnType="map">
          <args>
            <arg name="from" optional="false" type="string">
              <documentation>
                <result>departure station ID</result>
              </documentation>
            </arg>
            <arg name="to" optional="false" type="string">
              <documentation>
                <result>arrival Station ID</result>
              </documentation>
            </arg>
            <arg name="on" optional="true" type="list,agent,graph,geometry">
              <documentation>
                <result>list, agent, graph, geometry that restrains this move (the agent moves inside this geometry)</result>
              </documentation>
            </arg>
            <arg name="departureDate" optional="false" type="int">
              <documentation>
                <result>date of the departure</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>moves the agent towards the target passed in the arguments.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do action: goto{&#xA; arg target value: one_of (list (species (self))); &#xA; arg speed value: speed * 2; &#xA; arg on value: road_network;}" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="loadFile" returnType="void">
          <args>
            <arg name="source" optional="false" type="string">
              <documentation>
                <result>Path of the source file</result>
              </documentation>
            </arg>
            <arg name="datatype" optional="true" type="string">
              <documentation>
                <result>determine file datatype: OD -&gt; it is an Origin Destination Matrix; busline -&gt; official timetable of the transportation service</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>moves the agent towards the target passed in the arguments.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do action: goto{&#xA; arg target value: one_of (list (species (self))); &#xA; arg speed value: speed * 2; &#xA; arg on value: road_network;}" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="loadVehicleGraph" returnType="unknown">
          <args>
            <arg name="source" optional="true" type="graph" />
          </args>
        </action>
      </actions>
    </skill>
    <skill class="ummisco.miro.extension.moving.TrafficMovingSkill" extends="msi.gaml.skills.MovingSkill" id="trafficMoving" name="trafficMoving" projectName="ummisco.miro.extension">
      <actions>
        <action name="theorical_duration" returnType="java.lang.Float">
          <args>
            <arg name="from" optional="false" type="point,geometry,agent">
              <documentation>
                <result>the location or entity towards which to move.</result>
              </documentation>
            </arg>
            <arg name="to" optional="false" type="point,geometry,agent">
              <documentation>
                <result>the location or entity towards which to move.</result>
              </documentation>
            </arg>
            <arg name="on" optional="true" type="list,agent,graph,geometry">
              <documentation>
                <result>list, agent, graph, geometry that restrains this move (the agent moves inside this geometry)</result>
              </documentation>
            </arg>
            <arg name="max_speed" optional="true" type="float">
              <documentation>
                <result>speedMoving</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>moves the agent towards the target passed in the arguments while considering the other agents in the network (only for graph topology)</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do gotoTraffic target: one_of (list (species (self))) speed: speed * 2 on: road_network living_space: 2.0;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="goto_traffic" returnType="void">
          <args>
            <arg name="target" optional="false" type="point,geometry,agent">
              <documentation>
                <result>the location or entity towards which to move.</result>
              </documentation>
            </arg>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="on" optional="true" type="list,agent,graph,geometry">
              <documentation>
                <result>list, agent, graph, geometry that restrains this move (the agent moves inside this geometry)</result>
              </documentation>
            </arg>
            <arg name="duration" optional="true" type="float">
              <documentation>
                <result>duration of the moving</result>
              </documentation>
            </arg>
            <arg name="max_speed" optional="true" type="float">
              <documentation>
                <result>speedMoving</result>
              </documentation>
            </arg>
            <arg name="return_path" optional="true" type="boolean">
              <documentation>
                <result>if true, return the path followed (by default: false)</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>moves the agent towards the target passed in the arguments while considering the other agents in the network (only for graph topology)</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do gotoTraffic target: one_of (list (species (self))) speed: speed * 2 on: road_network living_space: 2.0;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
      </actions>
    </skill>
    <skill class="ummisco.miro.extension.moving.RoadTrafficManagement" extends="" id="roadTrafficManagement" name="roadTrafficManagement" projectName="ummisco.miro.extension">
      <vars>
        <var constant="false" depends_on="" name="speed" type="float" />
        <var constant="false" depends_on="" name="nbVehicle" type="int" />
      </vars>
      <actions />
    </skill>
    <skill class="dream.gama.opengis.operators.SocketSkill" extends="" id="socket" name="socket" projectName="dream.gama.opengis">
      <documentation>
        <result>k</result>
      </documentation>
      <vars>
        <var constant="false" depends_on="" name="msg" type="string" />
        <var constant="false" depends_on="" name="port" type="int">
          <documentation>
            <result>t)</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="ip" type="string">
          <documentation>
            <result>cs</result>
          </documentation>
        </var>
      </vars>
      <actions>
        <action name="listen_client" returnType="void">
          <args />
          <documentation>
            <result>.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="d;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="listen_server" returnType="void">
          <args />
          <documentation>
            <result>.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="d;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="open_socket" returnType="void">
          <args />
          <documentation>
            <result>.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="d;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="send_to_client" returnType="void">
          <args>
            <arg name="msg" optional="false" type="string">
              <documentation>
                <result>td)</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>M.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="tA;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="send_to_server" returnType="void">
          <args>
            <arg name="msg" optional="false" type="string">
              <documentation>
                <result>td)</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>M.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="tA;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
      </actions>
    </skill>
    <skill class="simtools.gaml.extensions.traffic.AdvancedDrivingSkill" extends="msi.gaml.skills.MovingSkill" id="advanced_driving" name="advanced_driving" projectName="simtools.gaml.extensions.traffic">
      <vars>
        <var constant="false" depends_on="" name="speed" type="float">
          <documentation>
            <result>the speed of the agent (in meter/second)</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="current_path" type="path">
          <documentation>
            <result>the current path that tha agent follow</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="final_target" type="point">
          <documentation>
            <result>the final target of the agent</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="current_target" type="point">
          <documentation>
            <result>the current target of the agent</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="current_index" type="int">
          <documentation>
            <result>the current index of the agent target (according to the targets list)</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="targets" type="list">
          <documentation>
            <result>the current list of points that the agent has to reach (path)</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="security_distance_coeff" type="float">
          <documentation>
            <result>the coefficient for the computation of the the min distance between two drivers (according to the vehicle speed - security_distance = 1#m + security_distance_coeff `*` real_speed )</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="real_speed" type="float">
          <documentation>
            <result>real speed of the agent (in meter/second)</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="current_lane" type="int">
          <documentation>
            <result>the current lane on which the agent is</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="vehicle_length" type="float">
          <documentation>
            <result>the length of the vehicle (in meters)</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="speed_coeff" type="float">
          <documentation>
            <result>speed coefficient for the speed that the driver want to reach (according to the max speed of the road)</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="max_acceleration" type="float">
          <documentation>
            <result>maximum acceleration of the car for a cycle</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="current_road" type="agent">
          <documentation>
            <result>current road on which the agent is</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="on_linked_road" type="boolean">
          <documentation>
            <result>is the agent on the linked road?</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="proba_lane_change_up" type="float">
          <documentation>
            <result>probability to change lane to a upper lane (left lane if right side driving) if necessary</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="proba_lane_change_down" type="float">
          <documentation>
            <result>probability to change lane to a lower lane (right lane if right side driving) if necessary</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="proba_respect_priorities" type="float">
          <documentation>
            <result>probability to respect priority (right or left) laws</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="proba_respect_stops" type="list">
          <documentation>
            <result>probability to respect stop laws - one value for each type of stop</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="proba_block_node" type="float">
          <documentation>
            <result>probability to block a node (do not let other driver cross the crossroad)</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="proba_use_linked_road" type="float">
          <documentation>
            <result>probability to change lane to a linked road lane if necessary</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="right_side_driving" type="boolean">
          <documentation>
            <result>are drivers driving on the right size of the road?</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="max_speed" type="float">
          <documentation>
            <result>maximal speed of the vehicle</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="distance_to_goal" type="float">
          <documentation>
            <result>euclidean distance to the next point of the current segment</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="segment_index_on_road" type="int">
          <documentation>
            <result>current segment index of the agent on the current road</result>
          </documentation>
        </var>
      </vars>
      <actions>
        <action name="advanced_follow_driving" returnType="float">
          <args>
            <arg name="path" optional="false" type="path">
              <documentation>
                <result>a path to be followed.</result>
              </documentation>
            </arg>
            <arg name="target" optional="true" type="point">
              <documentation>
                <result>the target to reach</result>
              </documentation>
            </arg>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="time" optional="true" type="float">
              <documentation>
                <result>time to travel</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>moves the agent towards along the path passed in the arguments while considering the other agents in the network (only for graph topology)</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do osm_follow path: the_path on: road_network;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="compute_path" returnType="path">
          <args>
            <arg name="graph" optional="false" type="graph">
              <documentation>
                <result>the graph on wich compute the path</result>
              </documentation>
            </arg>
            <arg name="target" optional="false" type="agent">
              <documentation>
                <result>the target node to reach</result>
              </documentation>
            </arg>
            <arg name="source" optional="true" type="agent">
              <documentation>
                <result>the source node (optional, if not defined, closest node to the agent location)</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>action to compute a path to a target location according to a given graph</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do compute_path graph: road_network target: the_node;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="path_from_nodes" returnType="path">
          <args>
            <arg name="graph" optional="false" type="graph">
              <documentation>
                <result>the graph on wich compute the path</result>
              </documentation>
            </arg>
            <arg name="nodes" optional="false" type="list">
              <documentation>
                <result>the list of nodes composing the path</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>action to compute a path from a list of nodes according to a given graph</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do compute_path graph: road_network nodes: [node1, node5, node10];" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="drive" returnType="void">
          <args />
          <documentation>
            <result>action to drive toward the final target</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do drive;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="external_factor_impact" returnType="float">
          <args>
            <arg name="new_road" optional="false" type="agent">
              <documentation>
                <result>the road on which to the driver wants to go</result>
              </documentation>
            </arg>
            <arg name="remaining_time" optional="false" type="float">
              <documentation>
                <result>the remaining time</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>action that allows to define how the remaining time is impacted by external factor</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do external_factor_impact new_road: a_road remaining_time: 0.5;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="is_ready_next_road" returnType="bool">
          <args>
            <arg name="new_road" optional="false" type="agent">
              <documentation>
                <result>the road to test</result>
              </documentation>
            </arg>
            <arg name="lane" optional="false" type="int">
              <documentation>
                <result>the lane to test</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>action to test if the driver can take the given road at the given lane</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do is_ready_next_road new_road: a_road lane: 0;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="lane_choice" returnType="int">
          <args>
            <arg name="new_road" optional="false" type="agent">
              <documentation>
                <result>the road on which to choose the lane</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>action to choose a lane</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do lane_choice new_road: a_road;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="speed_choice" returnType="float">
          <args>
            <arg name="new_road" optional="false" type="agent">
              <documentation>
                <result>the road on which to choose the speed</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>action to choose a speed</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do speed_choice new_road: the_road;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="test_next_road" returnType="bool">
          <args>
            <arg name="new_road" optional="false" type="agent">
              <documentation>
                <result>the road to test</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>action to test if the driver can take the given road</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do test_next_road new_road: a_road;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
      </actions>
    </skill>
    <skill class="simtools.gaml.extensions.traffic.RoadNodeSkill" extends="" id="skill_road_node" name="skill_road_node" projectName="simtools.gaml.extensions.traffic">
      <vars>
        <var constant="false" depends_on="" name="roads_in" type="list">
          <documentation>
            <result>the list of input roads</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="priority_roads" type="list">
          <documentation>
            <result>the list of priority roads</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="roads_out" type="list">
          <documentation>
            <result>the list of output roads</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="stop" type="list">
          <documentation>
            <result>define for each type of stop, the list of concerned roads</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="block" type="map">
          <documentation>
            <result>define the list of agents blocking the node, and for each agent, the list of concerned roads</result>
          </documentation>
        </var>
      </vars>
      <actions />
    </skill>
    <skill class="simtools.gaml.extensions.traffic.DrivingSkill" extends="msi.gaml.skills.MovingSkill" id="driving" name="driving" projectName="simtools.gaml.extensions.traffic">
      <vars>
        <var constant="false" depends_on="" name="living_space" type="float">
          <documentation>
            <result>the min distance between the agent and an obstacle (in meter)</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="lanes_attribute" type="string">
          <documentation>
            <result>the name of the attribut of the road agent that determine the number of road lanes</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="tolerance" type="float">
          <documentation>
            <result>the tolerance distance used for the computation (in meter)</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="obstacle_species" type="list">
          <documentation>
            <result>the list of species that are considered as obstacles</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="speed" type="float">
          <documentation>
            <result>the speed of the agent (in meter/second)</result>
          </documentation>
        </var>
      </vars>
      <actions>
        <action name="follow_driving" returnType="path">
          <args>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="path" optional="true" type="path">
              <documentation>
                <result>a path to be followed.</result>
              </documentation>
            </arg>
            <arg name="return_path" optional="true" type="boolean">
              <documentation>
                <result>if true, return the path followed (by default: false)</result>
              </documentation>
            </arg>
            <arg name="move_weights" optional="true" type="map">
              <documentation>
                <result>Weigths used for the moving.</result>
              </documentation>
            </arg>
            <arg name="living_space" optional="true" type="float">
              <documentation>
                <result>min distance between the agent and an obstacle (replaces the current value of living_space)</result>
              </documentation>
            </arg>
            <arg name="tolerance" optional="true" type="float">
              <documentation>
                <result>tolerance distance used for the computation (replaces the current value of tolerance)</result>
              </documentation>
            </arg>
            <arg name="lanes_attribute" optional="true" type="string">
              <documentation>
                <result>the name of the attribut of the road agent that determine the number of road lanes (replaces the current value of lanes_attribute)</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>moves the agent along a given path passed in the arguments while considering the other agents in the network.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do follow speed: speed * 2 path: road_path;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="goto_driving" returnType="path">
          <args>
            <arg name="target" optional="false" type="point,geometry,agent">
              <documentation>
                <result>the location or entity towards which to move.</result>
              </documentation>
            </arg>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="on" optional="true" type="list,agent,graph,geometry">
              <documentation>
                <result>list, agent, graph, geometry that restrains this move (the agent moves inside this geometry)</result>
              </documentation>
            </arg>
            <arg name="return_path" optional="true" type="boolean">
              <documentation>
                <result>if true, return the path followed (by default: false)</result>
              </documentation>
            </arg>
            <arg name="move_weights" optional="true" type="map">
              <documentation>
                <result>Weigths used for the moving.</result>
              </documentation>
            </arg>
            <arg name="living_space" optional="true" type="float">
              <documentation>
                <result>min distance between the agent and an obstacle (replaces the current value of living_space)</result>
              </documentation>
            </arg>
            <arg name="tolerance" optional="true" type="float">
              <documentation>
                <result>tolerance distance used for the computation (replaces the current value of tolerance)</result>
              </documentation>
            </arg>
            <arg name="lanes_attribute" optional="true" type="string">
              <documentation>
                <result>the name of the attribut of the road agent that determine the number of road lanes (replaces the current value of lanes_attribute)</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>moves the agent towards the target passed in the arguments while considering the other agents in the network (only for graph topology)</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do gotoTraffic target: one_of (list (species (self))) speed: speed * 2 on: road_network living_space: 2.0;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
      </actions>
    </skill>
    <skill class="simtools.gaml.extensions.traffic.RoadSkill" extends="" id="skill_road" name="skill_road" projectName="simtools.gaml.extensions.traffic">
      <vars>
        <var constant="false" depends_on="" name="agents_on" type="list">
          <documentation>
            <result>for each lane of the road, the list of agents for each segment</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="all_agents" type="list">
          <documentation>
            <result>the list of agents on the road</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="source_node" type="agent">
          <documentation>
            <result>the source node of the road</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="target_node" type="agent">
          <documentation>
            <result>the target node of the road</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="lanes" type="int">
          <documentation>
            <result>the number of lanes</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="linked_road" type="agent">
          <documentation>
            <result>the linked road: the lanes of this linked road will be usable by drivers on the road</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="maxspeed" type="float">
          <documentation>
            <result>the maximal speed on the road</result>
          </documentation>
        </var>
      </vars>
      <actions>
        <action name="register" returnType="void">
          <args>
            <arg name="agent" optional="false" type="agent">
              <documentation>
                <result>the agent to register on the road.</result>
              </documentation>
            </arg>
            <arg name="lane" optional="false" type="int">
              <documentation>
                <result>the lane index on which to register; if lane index &gt;= number of lanes, then register on the linked road</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>register the agent on the road at the given lane</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do register agent: the_driver lane: 0" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="unregister" returnType="void">
          <args>
            <arg name="agent" optional="false" type="agent">
              <documentation>
                <result>the agent to unregister on the road.</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>unregister the agent on the road</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do unregister agent: the_driver" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
      </actions>
    </skill>
    <skill class="irit.gaml.skills.MAELIASkill" extends="" id="MAELIA" name="MAELIA" projectName="irit.maelia.gaml.additions">
      <actions>
        <action name="maeliaTimeStamp" returnType="float">
          <args />
        </action>
      </actions>
    </skill>
    <skill class="irit.gaml.extensions.database.skills.MDXSkill" extends="" id="MDXSKILL" name="MDXSKILL" projectName="irit.gaml.extensions.database">
      <actions>
        <action name="helloWorld" returnType="unknown">
          <args />
        </action>
        <action name="select" returnType="list">
          <args>
            <arg name="params" optional="false" type="map">
              <documentation>
                <result>Connection parameters</result>
              </documentation>
            </arg>
            <arg name="onColumns" optional="false" type="string">
              <documentation>
                <result>select string with question marks</result>
              </documentation>
            </arg>
            <arg name="onRows" optional="false" type="list">
              <documentation>
                <result>List of values that are used to replace question marks</result>
              </documentation>
            </arg>
            <arg name="from" optional="false" type="list">
              <documentation>
                <result>List of values that are used to replace question marks</result>
              </documentation>
            </arg>
            <arg name="where" optional="true" type="list">
              <documentation>
                <result>List of values that are used to replace question marks</result>
              </documentation>
            </arg>
            <arg name="values" optional="true" type="list">
              <documentation>
                <result>List of values that are used to replace question marks</result>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="testConnection" returnType="bool">
          <args>
            <arg name="params" optional="false" type="map">
              <documentation>
                <result>Connection parameters</result>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="timeStamp" returnType="float">
          <args />
        </action>
      </actions>
    </skill>
    <skill class="irit.gaml.extensions.database.skills.SQLSkill" extends="" id="SQLSKILL" name="SQLSKILL" projectName="irit.gaml.extensions.database">
      <actions>
        <action name="list2Matrix" returnType="matrix">
          <args>
            <arg name="param" optional="false" type="list">
              <documentation>
                <result>Param: a list of records and metadata</result>
              </documentation>
            </arg>
            <arg name="getName" optional="true" type="boolean">
              <documentation>
                <result>getType: a boolean value, optional parameter</result>
                <comment>if it is true then the action will return columnNames and data. default is true</comment>
              </documentation>
            </arg>
            <arg name="getType" optional="true" type="boolean">
              <documentation>
                <result>getType: a boolean value, optional parameter</result>
                <comment>if it is true then the action will return columnTypes and data. default is false</comment>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="executeUpdate" returnType="int">
          <args>
            <arg name="params" optional="false" type="map">
              <documentation>
                <result>Connection parameters</result>
              </documentation>
            </arg>
            <arg name="updateComm" optional="false" type="string">
              <documentation>
                <result>SQL commands such as Create, Update, Delete, Drop with question mark</result>
              </documentation>
            </arg>
            <arg name="values" optional="true" type="list">
              <documentation>
                <result>List of values that are used to replace question mark</result>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="getCurrentDateTime" returnType="string">
          <args>
            <arg name="dateFormat" optional="false" type="string">
              <documentation>
                <result>date format examples: 'yyyy-MM-dd' , 'yyyy-MM-dd HH:mm:ss'</result>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="getDateOffset" returnType="string">
          <args>
            <arg name="dateFormat" optional="false" type="string">
              <documentation>
                <result>date format examples: 'yyyy-MM-dd' , 'yyyy-MM-dd HH:mm:ss'</result>
              </documentation>
            </arg>
            <arg name="dateStr" optional="false" type="string">
              <documentation>
                <result>Start date</result>
              </documentation>
            </arg>
            <arg name="offset" optional="false" type="string">
              <documentation>
                <result>number on day to increase or decrease</result>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="helloWorld" returnType="unknown">
          <args />
        </action>
        <action name="insert" returnType="int">
          <args>
            <arg name="params" optional="false" type="map">
              <documentation>
                <result>Connection parameters</result>
              </documentation>
            </arg>
            <arg name="into" optional="false" type="string">
              <documentation>
                <result>Table name</result>
              </documentation>
            </arg>
            <arg name="columns" optional="true" type="list">
              <documentation>
                <result>List of column name of table</result>
              </documentation>
            </arg>
            <arg name="values" optional="false" type="list">
              <documentation>
                <result>List of values that are used to insert into table. Columns and values must have same size</result>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="select" returnType="list">
          <args>
            <arg name="params" optional="false" type="map">
              <documentation>
                <result>Connection parameters</result>
              </documentation>
            </arg>
            <arg name="select" optional="false" type="string">
              <documentation>
                <result>select string with question marks</result>
              </documentation>
            </arg>
            <arg name="values" optional="true" type="list">
              <documentation>
                <result>List of values that are used to replace question marks</result>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="testConnection" returnType="bool">
          <args>
            <arg name="params" optional="false" type="map">
              <documentation>
                <result>Connection parameters</result>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="timeStamp" returnType="float">
          <args />
        </action>
      </actions>
    </skill>
    <skill class="msi.gaml.extensions.traffic2d.DrivingSkill2d" extends="msi.gaml.skills.MovingSkill" id="driving2d" name="driving2d" projectName="msi.gaml.extensions.traffic2d">
      <vars>
        <var constant="false" depends_on="" name="considering_range" type="int" />
        <var constant="false" depends_on="" name="isCalculatedPerimeter" type="boolean" />
        <var constant="false" depends_on="" name="isPassedFalseTarget" type="boolean" />
        <var constant="false" depends_on="" name="currentPerimeter" type="float" />
        <var constant="false" depends_on="" name="currentDistance" type="float" />
        <var constant="false" depends_on="" name="obstacle_species" type="list" />
        <var constant="false" depends_on="" name="background_species" type="list" />
        <var constant="false" depends_on="" name="speed" type="float" />
      </vars>
      <actions>
        <action name="pedestrian_goto" returnType="int">
          <args>
            <arg name="target" optional="false" type="point,geometry,agent">
              <documentation>
                <result>the location or entity towards which to move.</result>
              </documentation>
            </arg>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="background" optional="false" type="list,agent,graph,geometry">
              <documentation>
                <result>list, agent, graph, geometry on which the agent moves (the agent moves inside this geometry)</result>
              </documentation>
            </arg>
            <arg name="on" optional="true" type="list,agent,graph,geometry">
              <documentation>
                <result>list, agent, graph, geometry that restrains this move (the agent moves inside this geometry)</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>moves the agent towards the target passed in the arguments.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do goto{&#xA; arg target value: one_of (list (species (self))); &#xA; arg speed value: speed * 2; &#xA; arg on value: road_network;}" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="read_replay" returnType="list">
          <args>
            <arg name="file_name" optional="false" type="string">
              <documentation>
                <result>File name.</result>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="read_replay_file" returnType="list">
          <args>
            <arg name="file_name" optional="false" type="string">
              <documentation>
                <result>File name.</result>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="save_replay" returnType="unknown">
          <args>
            <arg name="file_name" optional="false" type="string">
              <documentation>
                <result>File name.</result>
              </documentation>
            </arg>
            <arg name="agent_information" optional="false" type="list">
              <documentation>
                <result>list of position</result>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="vehicle_goto" returnType="int">
          <args>
            <arg name="target" optional="false" type="point,geometry,agent">
              <documentation>
                <result>the location or entity towards which to move.</result>
              </documentation>
            </arg>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="background" optional="false" type="list,agent,graph,geometry">
              <documentation>
                <result>list, agent, graph, geometry on which the agent moves (the agent moves inside this geometry)</result>
              </documentation>
            </arg>
            <arg name="on" optional="true" type="list,agent,graph,geometry">
              <documentation>
                <result>list, agent, graph, geometry that restrains this move (the agent moves inside this geometry)</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>moves the agent towards the target passed in the arguments.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do action: goto{&#xA; arg target value: one_of (list (species (self))); &#xA; arg speed value: speed * 2; &#xA; arg on value: road_network;}" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
      </actions>
    </skill>
    <skill class="msi.gaml.extensions.fipa.CommunicatingSkill" extends="" id="communicating" name="communicating" projectName="msi.gaml.extensions.fipa">
      <documentation>
        <result>The communicating skill offers some primitives and built-in variables which enable agent to communicate with each other using the FIPA interaction protocol.</result>
      </documentation>
      <vars>
        <var constant="false" depends_on="" name="conversations" type="list">
          <documentation>
            <result>A list containing the current conversations of agent. Ended conversations are automatically removed from this list.</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="messages" type="list">
          <documentation>
            <result>The mailbox of the agent, a list of messages of all types of performatives.</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="accept_proposals" type="list">
          <documentation>
            <result>A list of 'accept_proposal' performative messages of the agent's mailbox having .</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="agrees" type="list">
          <documentation>
            <result>A list of 'accept_proposal' performative messages.</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="cancels" type="list">
          <documentation>
            <result>A list of 'cancel' performative messages.</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="cfps" type="list">
          <documentation>
            <result>A list of 'cfp' (call for proposal) performative messages.</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="failures" type="list">
          <documentation>
            <result>A list of 'failure' performative messages.</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="informs" type="list">
          <documentation>
            <result>A list of 'inform' performative messages.</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="proposes" type="list">
          <documentation>
            <result>A list of 'propose' performative messages .</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="queries" type="list">
          <documentation>
            <result>A list of 'query' performative messages.</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="refuses" type="list">
          <documentation>
            <result>A list of 'propose' performative messages.</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="reject_proposals" type="list">
          <documentation>
            <result>A list of 'reject_proposals' performative messages.</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="requests" type="list">
          <documentation>
            <result>A list of 'request' performative messages.</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="requestWhens" type="list">
          <documentation>
            <result>A list of 'request-when' performative messages.</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="subscribes" type="list">
          <documentation>
            <result>A list of 'subscribe' performative messages.</result>
          </documentation>
        </var>
      </vars>
      <actions>
        <action name="accept_proposal" returnType="unknown">
          <args>
            <arg name="message" optional="false" type="message">
              <documentation>
                <result>The message to be replied</result>
              </documentation>
            </arg>
            <arg name="content" optional="false" type="list">
              <documentation>
                <result>The content of the replying message</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Replies a message with an 'accept_proposal' performative message.</result>
          </documentation>
        </action>
        <action name="agree" returnType="unknown">
          <args>
            <arg name="message" optional="false" type="message">
              <documentation>
                <result>The message to be replied</result>
              </documentation>
            </arg>
            <arg name="content" optional="false" type="list">
              <documentation>
                <result>The content of the replying message</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Replies a message with an 'agree' performative message.</result>
          </documentation>
        </action>
        <action name="cancel" returnType="unknown">
          <args>
            <arg name="message" optional="false" type="message">
              <documentation>
                <result>The message to be replied</result>
              </documentation>
            </arg>
            <arg name="content" optional="false" type="list">
              <documentation>
                <result>The content of the replying message</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Replies a message with a 'cancel' peformative message.</result>
          </documentation>
        </action>
        <action name="cfp" returnType="unknown">
          <args>
            <arg name="message" optional="false" type="message">
              <documentation>
                <result>The message to be replied</result>
              </documentation>
            </arg>
            <arg name="content" optional="false" type="list">
              <documentation>
                <result>The content of the replying message</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Replies a message with a 'cfp' performative message.</result>
          </documentation>
        </action>
        <action name="end_conversation" returnType="unknown">
          <args>
            <arg name="message" optional="false" type="message">
              <documentation>
                <result>The message to be replied</result>
              </documentation>
            </arg>
            <arg name="content" optional="false" type="list">
              <documentation>
                <result>The content of the replying message</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Reply a message with an 'end_conversation' peprformative message. This message marks the end of a conversation. In a 'no-protocol' conversation, it is the responsible of the modeler to explicitly send this message to mark the end of a conversation/interaction protocol.</result>
          </documentation>
        </action>
        <action name="failure" returnType="unknown">
          <args>
            <arg name="message" optional="false" type="message">
              <documentation>
                <result>The message to be replied</result>
              </documentation>
            </arg>
            <arg name="content" optional="false" type="list">
              <documentation>
                <result>The content of the replying message</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Replies a message with a 'failure' performative message.</result>
          </documentation>
        </action>
        <action name="inform" returnType="unknown">
          <args>
            <arg name="message" optional="false" type="message">
              <documentation>
                <result>The message to be replied</result>
              </documentation>
            </arg>
            <arg name="content" optional="false" type="list">
              <documentation>
                <result>The content of the replying message</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Replies a message with an 'inform' performative message.</result>
          </documentation>
        </action>
        <action name="propose" returnType="unknown">
          <args>
            <arg name="message" optional="false" type="message">
              <documentation>
                <result>The message to be replied</result>
              </documentation>
            </arg>
            <arg name="content" optional="false" type="list">
              <documentation>
                <result>The content of the replying message</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Replies a message with a 'propose' performative message.</result>
          </documentation>
        </action>
        <action name="query" returnType="unknown">
          <args>
            <arg name="message" optional="false" type="message">
              <documentation>
                <result>The message to be replied</result>
              </documentation>
            </arg>
            <arg name="content" optional="false" type="list">
              <documentation>
                <result>The content of the replying message</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Replies a message with a 'query' performative message.</result>
          </documentation>
        </action>
        <action name="refuse" returnType="unknown">
          <args>
            <arg name="message" optional="false" type="message">
              <documentation>
                <result>The message to be replied</result>
              </documentation>
            </arg>
            <arg name="content" optional="false" type="list">
              <documentation>
                <result>The content of the replying message</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Replies a message with a 'refuse' performative message.</result>
          </documentation>
        </action>
        <action name="reject_proposal" returnType="unknown">
          <args>
            <arg name="message" optional="false" type="message">
              <documentation>
                <result>The message to be replied</result>
              </documentation>
            </arg>
            <arg name="content" optional="false" type="list">
              <documentation>
                <result>The content of the replying message</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Replies a message with a 'reject_proposal' performative message.</result>
          </documentation>
        </action>
        <action name="reply" returnType="unknown">
          <args>
            <arg name="message" optional="false" type="message">
              <documentation>
                <result>The message to be replied</result>
              </documentation>
            </arg>
            <arg name="performative" optional="false" type="string">
              <documentation>
                <result>The performative of the replying message</result>
              </documentation>
            </arg>
            <arg name="content" optional="true" type="list">
              <documentation>
                <result>The content of the replying message</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Replies a message. This action should be only used to reply a message in a 'no-protocol' conversation and with a 'user defined performative'. For performatives supported by GAMA (i.e., standard FIPA performatives), please use the 'action' with the same name of 'performative'. For example, to reply a message with a 'request' performative message, the modeller should use the 'request' action.</result>
          </documentation>
        </action>
        <action name="request" returnType="unknown">
          <args>
            <arg name="message" optional="false" type="message">
              <documentation>
                <result>The message to be replied</result>
              </documentation>
            </arg>
            <arg name="content" optional="false" type="list">
              <documentation>
                <result>The content of the replying message</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Replies a message with a 'request' performative message.</result>
          </documentation>
        </action>
        <action name="send" returnType="msi.gaml.extensions.fipa.Message">
          <args>
            <arg name="receivers" optional="false" type="list">
              <documentation>
                <result>A list of receiver agents</result>
              </documentation>
            </arg>
            <arg name="content" optional="false" type="list">
              <documentation>
                <result>The content of the message. A list of any GAML type</result>
              </documentation>
            </arg>
            <arg name="performative" optional="true" type="string">
              <documentation>
                <result>A string, representing the message performative</result>
              </documentation>
            </arg>
            <arg name="protocol" optional="true" type="string">
              <documentation>
                <result>A string representing the name of interaction protocol</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Starts a conversation/interaction protocol.</result>
          </documentation>
        </action>
        <action name="start_conversation" returnType="msi.gaml.extensions.fipa.Message">
          <args>
            <arg name="receivers" optional="false" type="list">
              <documentation>
                <result>A list of receiver agents</result>
              </documentation>
            </arg>
            <arg name="content" optional="false" type="list">
              <documentation>
                <result>The content of the message. A list of any GAML type</result>
              </documentation>
            </arg>
            <arg name="performative" optional="true" type="string">
              <documentation>
                <result>A string, representing the message performative</result>
              </documentation>
            </arg>
            <arg name="protocol" optional="true" type="string">
              <documentation>
                <result>A string representing the name of interaction protocol</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Starts a conversation/interaction protocol.</result>
          </documentation>
        </action>
        <action name="subscribe" returnType="unknown">
          <args>
            <arg name="message" optional="false" type="message">
              <documentation>
                <result>The message to be replied</result>
              </documentation>
            </arg>
            <arg name="content" optional="false" type="list">
              <documentation>
                <result>The content of the replying message</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Replies a message with a 'subscribe' performative message.</result>
          </documentation>
        </action>
      </actions>
    </skill>
    <skill class="msi.gaml.extensions.cplex.OptimizingSkill" extends="" id="optimizing" name="optimizing" projectName="msi.gaml.extensions.cplex">
      <actions>
        <action name="computeAverageEvacuationTime" returnType="unknown">
          <args />
        </action>
        <action name="optimizeDirection" returnType="unknown">
          <args />
        </action>
        <action name="optimizeSigns" returnType="unknown">
          <args />
        </action>
        <action name="doTest" returnType="unknown">
          <args />
        </action>
      </actions>
    </skill>
    <skill class="msi.gaml.skills.GridSkill" extends="" id="grid" name="grid" projectName="msi.gama.core">
      <vars>
        <var constant="false" depends_on="" name="color" type="rgb" />
        <var constant="false" depends_on="" name="grid_value" type="float" />
        <var constant="true" depends_on="" name="grid_x" type="int" />
        <var constant="true" depends_on="" name="grid_y" type="int" />
      </vars>
      <actions />
    </skill>
    <skill class="msi.gaml.skills.GraphicSkill" extends="" id="graphic" name="graphic" projectName="msi.gama.core">
      <documentation>
        <result>The graphic skill is intended to define the minimal set of behaviours required from a graphical agent</result>
      </documentation>
      <vars>
        <var constant="false" depends_on="" name="transparency" type="float">
          <documentation>
            <result>the transparency of the agent (between 0.0 and 1.0)</result>
          </documentation>
        </var>
      </vars>
      <actions>
        <action name="brewer_color" returnType="rgb">
          <args>
            <arg name="type" optional="true" type="string">
              <documentation>
                <result>Palette Type (Sequential, Diverging, Qualitative)</result>
              </documentation>
            </arg>
            <arg name="class" optional="false" type="int">
              <documentation>
                <result>Number of class</result>
              </documentation>
            </arg>
            <arg name="index" optional="false" type="int">
              <documentation>
                <result>index</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result />
            <usagesExamples>
              <usage>
                <examples>
                  <example code="rgb myColor&lt;-self.brewer_color(&quot;sequential&quot;,nb_class,myClass);" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="brewer_palette" returnType="msi.gama.util.IList&lt;java.awt.Color&gt;">
          <args>
            <arg name="type" optional="true" type="string">
              <documentation>
                <result>Palette Type (Sequential, Diverging, Qualitative)</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result />
            <comment>You can get the type of the palette form this websiten http://colorbrewer2.org/</comment>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="list&lt;rgb&gt; colors &lt;- brewer_palette(&quot;6-class Blues&quot;);" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="twinkle" returnType="void">
          <args>
            <arg name="period" optional="true" type="int">
              <documentation>
                <result>make the agent twinkle with a given period</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result />
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do twinkle period: 10;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
      </actions>
    </skill>
    <skill class="msi.gaml.skills.MovingSkill3D" extends="moving" id="moving3D" name="moving3D" projectName="msi.gama.core">
      <documentation>
        <result>The moving skill 3D is intended to define the minimal set of behaviours required for agents that are able to move on different topologies</result>
      </documentation>
      <vars>
        <var constant="false" depends_on="" name="speed" type="float">
          <documentation>
            <result>the speed of the agent (in meter/second)</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="heading" type="int">
          <documentation>
            <result>the absolute heading of the agent in degrees (in the range 0-359)</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="pitch" type="int">
          <documentation>
            <result>the absolute pitch of the agent in degrees (in the range 0-359)</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="roll" type="int">
          <documentation>
            <result>the absolute roll of the agent in degrees (in the range 0-359)</result>
          </documentation>
        </var>
        <var constant="false" depends_on="speed,heading,location" name="destination" type="point">
          <documentation>
            <result>continuously updated destination of the agent with respect to its speed and heading (read-only)</result>
          </documentation>
        </var>
      </vars>
      <actions>
        <action name="move" returnType="path">
          <args>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="heading" optional="true" type="int">
              <documentation>
                <result>int, optional, the direction to take for this move (replaces the current value of heading)</result>
              </documentation>
            </arg>
            <arg name="pitch" optional="true" type="int">
              <documentation>
                <result>int, optional, the direction to take for this move (replaces the current value of pitch)</result>
              </documentation>
            </arg>
            <arg name="heading" optional="true" type="int">
              <documentation>
                <result>int, optional, the direction to take for this move (replaces the current value of roll)</result>
              </documentation>
            </arg>
            <arg name="bounds" optional="true" type="geometry,agent">
              <documentation>
                <result>the geometry (the localized entity geometry) that restrains this move (the agent moves inside this geometry</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>moves the agent forward, the distance being computed with respect to its speed and heading. The value of the corresponding variables are used unless arguments are passed.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do move speed: speed - 10 heading: heading + rnd (30) bounds: agentA;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
      </actions>
    </skill>
    <skill class="msi.gaml.skills.MovingSkill" extends="" id="moving" name="moving" projectName="msi.gama.core">
      <documentation>
        <result>The moving skill is intended to define the minimal set of behaviours required for agents that are able to move on different topologies</result>
      </documentation>
      <vars>
        <var constant="false" depends_on="shape" name="location" type="point" />
        <var constant="false" depends_on="" name="speed" type="float">
          <documentation>
            <result>the speed of the agent (in meter/second)</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="heading" type="int">
          <documentation>
            <result>the absolute heading of the agent in degrees (in the range 0-359)</result>
          </documentation>
        </var>
        <var constant="false" depends_on="speed,heading,location" name="destination" type="point">
          <documentation>
            <result>continuously updated destination of the agent with respect to its speed and heading (read-only)</result>
          </documentation>
        </var>
      </vars>
      <actions>
        <action name="follow" returnType="path">
          <args>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="path" optional="false" type="path">
              <documentation>
                <result>a path to be followed.</result>
              </documentation>
            </arg>
            <arg name="move_weights" optional="true" type="map">
              <documentation>
                <result>Weights used for the moving.</result>
              </documentation>
            </arg>
            <arg name="return_path" optional="true" type="boolean">
              <documentation>
                <result>if true, return the path followed (by default: false)</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>moves the agent along a given path passed in the arguments.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do follow speed: speed * 2 path: road_path;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="goto" returnType="path">
          <args>
            <arg name="target" optional="false" type="agent,point,geometry">
              <documentation>
                <result>the location or entity towards which to move.</result>
              </documentation>
            </arg>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="on" optional="true" type="graph">
              <documentation>
                <result>graph that restrains this move</result>
              </documentation>
            </arg>
            <arg name="recompute_path" optional="true" type="boolean">
              <documentation>
                <result>if false, the path is not recompute even if the graph is modified (by default: true)</result>
              </documentation>
            </arg>
            <arg name="return_path" optional="true" type="boolean">
              <documentation>
                <result>if true, return the path followed (by default: false)</result>
              </documentation>
            </arg>
            <arg name="move_weights" optional="true" type="map">
              <documentation>
                <result>Weights used for the moving.</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>moves the agent towards the target passed in the arguments.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do goto target: (one_of road).location speed: speed * 2 on: road_network;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="move" returnType="path">
          <args>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="heading" optional="true" type="int">
              <documentation>
                <result>a restriction placed on the random heading choice. The new heading is chosen in the range (heading - amplitude/2, heading+amplitude/2)</result>
              </documentation>
            </arg>
            <arg name="bounds" optional="true" type="geometry,agent">
              <documentation>
                <result>the geometry (the localized entity geometry) that restrains this move (the agent moves inside this geometry</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>moves the agent forward, the distance being computed with respect to its speed and heading. The value of the corresponding variables are used unless arguments are passed.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do move speed: speed - 10 heading: heading + rnd (30) bounds: agentA;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="wander" returnType="void">
          <args>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="amplitude" optional="true" type="int">
              <documentation>
                <result>a restriction placed on the random heading choice. The new heading is chosen in the range (heading - amplitude/2, heading+amplitude/2)</result>
              </documentation>
            </arg>
            <arg name="bounds" optional="true" type="agent,geometry">
              <documentation>
                <result>the geometry (the localized entity geometry) that restrains this move (the agent moves inside this geometry</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Moves the agent towards a random location at the maximum distance (with respect to its speed). The heading of the agent is chosen randomly if no amplitude is specified. This action changes the value of heading.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do wander speed: speed - 10 amplitude: 120 bounds: agentA;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="wander_3D" returnType="path">
          <args>
            <arg name="speed" optional="true" type="float">
              <documentation>
                <result>the speed to use for this move (replaces the current value of speed)</result>
              </documentation>
            </arg>
            <arg name="amplitude" optional="true" type="int">
              <documentation>
                <result>a restriction placed on the random heading choice. The new heading is chosen in the range (heading - amplitude/2, heading+amplitude/2)</result>
              </documentation>
            </arg>
            <arg name="z_max" optional="true" type="int">
              <documentation>
                <result>the maximum alltitude (z) the geometry can reach</result>
              </documentation>
            </arg>
            <arg name="bounds" optional="true" type="agent,geometry">
              <documentation>
                <result>the geometry (the localized entity geometry) that restrains this move (the agent moves inside this geometry</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>Moves the agent towards a random location (3D point) at the maximum distance (with respect to its speed). The heading of the agent is chosen randomly if no amplitude is specified. This action changes the value of heading.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="do wander_3D speed: speed - 10 amplitude: 120 bounds: agentA;" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
      </actions>
    </skill>
  </skills>
  <architectures>
    <architecture id="simple_bdi" name="simple_bdi" projectName="msi.gaml.architecture.simplebdi">
      <vars>
        <var constant="false" depends_on="" name="plan_persistence" type="float">
          <documentation>
            <result>plan persistence</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="intention_persistence" type="float">
          <documentation>
            <result>intention persistence</result>
          </documentation>
        </var>
        <var constant="false" depends_on="" name="probabilistic_choice" type="boolean" />
        <var constant="false" depends_on="" name="belief_base" type="list" />
        <var constant="false" depends_on="" name="thinking" type="list" />
        <var constant="false" depends_on="" name="intention_base" type="list" />
        <var constant="false" depends_on="" name="desire_base" type="list" />
        <var constant="false" depends_on="" name="current_plan" type="any type" />
      </vars>
      <actions>
        <action name="add_subintention" returnType="bool">
          <args>
            <arg name="predicate" optional="false" type="546704">
              <documentation>
                <result>predicate name</result>
              </documentation>
            </arg>
            <arg name="subintentions" optional="false" type="546704">
              <documentation>
                <result>the subintention to add to the predicate</result>
              </documentation>
            </arg>
            <arg name="add_as_desire" optional="true" type="boolean">
              <documentation>
                <result>add the subintention as a desire as well (by default, false)</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>adds the predicates is in the desire base.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="get_current_intention" returnType="msi.gaml.architecture.simplebdi.Predicate">
          <args />
          <documentation>
            <result>returns the current intention (last entry of intention base).</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="get_belief" returnType="msi.gaml.architecture.simplebdi.Predicate">
          <args>
            <arg name="predicate" optional="false" type="546704">
              <documentation>
                <result>predicate to check</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>get the predicates is in the belief base (if several, returns the first one).</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="get_belief(new_predicate(&quot;has_water&quot;, true))" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="get_belief_with_name" returnType="msi.gaml.architecture.simplebdi.Predicate">
          <args>
            <arg name="name" optional="false" type="string">
              <documentation>
                <result>name of the predicate to check</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>get the predicates is in the belief base (if several, returns the first one).</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="get_belief(&quot;has_water&quot;)" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="get_beliefs" returnType="java.util.List&lt;msi.gaml.architecture.simplebdi.Predicate&gt;">
          <args>
            <arg name="predicate" optional="false" type="546704">
              <documentation>
                <result>name of the predicates to check</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>get the list of predicates is in the belief base</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="get_belief(&quot;has_water&quot;)" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="get_beliefs_with_name" returnType="java.util.List&lt;msi.gaml.architecture.simplebdi.Predicate&gt;">
          <args>
            <arg name="name" optional="false" type="string">
              <documentation>
                <result>name of the predicates to check</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>get the list of predicates is in the belief base with the given name.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="get_belief(&quot;has_water&quot;)" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="is_current_intention" returnType="bool">
          <args>
            <arg name="predicate" optional="false" type="546704">
              <documentation>
                <result>predicate to check</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>check if the predicates is the current intention (last entry of intention base).</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="add_belief" returnType="bool">
          <args>
            <arg name="predicate" optional="true" type="map">
              <documentation>
                <result>predicate to check</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>check if the predicates is in the desire base.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="add_desire" returnType="bool">
          <args>
            <arg name="predicate" optional="false" type="546704">
              <documentation>
                <result>predicate to add</result>
              </documentation>
            </arg>
            <arg name="todo" optional="true" type="546704">
              <documentation>
                <result>add the desire as a subintention of this parameter</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>adds the predicates is in the desire base.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="current_intention_on_hold" returnType="bool">
          <args>
            <arg name="on_hold_until" optional="true" type="any type">
              <documentation>
                <result>the specified intention is put on hold (fited plan are not considered) until specific condition is reached. Can be an expression (which will be tested), a list (of subintentions), or nil (by default the condition will be the current list of subintentions of the intention)</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>puts the current intention on hold until the specified condition is reached or all subintentions are reached (not in desire base anymore).</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="replace_belief" returnType="bool">
          <args>
            <arg name="old_predicate" optional="false" type="546704">
              <documentation>
                <result>predicate to remove</result>
              </documentation>
            </arg>
            <arg name="predicate" optional="false" type="546704">
              <documentation>
                <result>predicate to add</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>replace the old predicate by the new one.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="remove_belief" returnType="bool">
          <args>
            <arg name="predicate" optional="true" type="546704">
              <documentation>
                <result>predicate to add</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>removes the predicates from the belief base.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="remove_desire" returnType="bool">
          <args>
            <arg name="predicate" optional="true" type="546704">
              <documentation>
                <result>predicate to add</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>removes the predicates from the desire base.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="remove_intention" returnType="bool">
          <args>
            <arg name="predicate" optional="true" type="546704">
              <documentation>
                <result>predicate to add</result>
              </documentation>
            </arg>
            <arg name="desire_also" optional="false" type="boolean">
              <documentation>
                <result>removes also desire</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>removes the predicates from the desire base.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="has_belief" returnType="bool">
          <args>
            <arg name="predicate" optional="true" type="546704">
              <documentation>
                <result>predicate to check</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>check if the predicates is in the belief base.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
        <action name="has_desire" returnType="bool">
          <args>
            <arg name="predicate" optional="true" type="546704">
              <documentation>
                <result>predicate to check</result>
              </documentation>
            </arg>
          </args>
          <documentation>
            <result>check if the predicates is in the desire base.</result>
            <usagesExamples>
              <usage>
                <examples>
                  <example code="" isExecutable="true" isTestOnly="false" test="true" />
                </examples>
              </usage>
            </usagesExamples>
          </documentation>
        </action>
      </actions>
    </architecture>
    <architecture id="fsm" name="fsm" projectName="msi.gama.core">
      <vars>
        <var constant="false" depends_on="" name="state" type="string">
          <documentation>
            <result>the current state</result>
          </documentation>
        </var>
        <var constant="true" depends_on="" name="states" type="list">
          <documentation>
            <result>the list of all possible states</result>
          </documentation>
        </var>
      </vars>
      <actions />
    </architecture>
    <architecture id="user_only" name="user_only" projectName="msi.gama.core">
      <actions />
    </architecture>
    <architecture id="user_last" name="user_last" projectName="msi.gama.core">
      <actions />
    </architecture>
    <architecture id="user_first" name="user_first" projectName="msi.gama.core">
      <actions />
    </architecture>
    <architecture id="probabilistic_tasks" name="probabilistic_tasks" projectName="msi.gama.core">
      <actions />
    </architecture>
    <architecture id="reflex" name="reflex" projectName="msi.gama.core">
      <actions />
    </architecture>
    <architecture id="weighted_tasks" name="weighted_tasks" projectName="msi.gama.core">
      <actions />
    </architecture>
    <architecture id="sorted_tasks" name="sorted_tasks" projectName="msi.gama.core">
      <actions />
    </architecture>
  </architectures>
  <speciess>
    <species id="Physical3DWorld" name="Physical3DWorld" projectName="simtools.gaml.extensions.physics">
      <actions>
        <action name="computeForces" returnType="unknown">
          <args />
        </action>
      </actions>
    </species>
    <species id="AgentDB" name="AgentDB" projectName="irit.gaml.extensions.database">
      <actions>
        <action name="close" returnType="unknown">
          <args />
        </action>
        <action name="connect" returnType="unknown">
          <args>
            <arg name="params" optional="false" type="map">
              <documentation>
                <result>Connection parameters</result>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="executeUpdate" returnType="int">
          <args>
            <arg name="updateComm" optional="false" type="string">
              <documentation>
                <result>SQL commands such as Create, Update, Delete, Drop with question mark</result>
              </documentation>
            </arg>
            <arg name="values" optional="true" type="list">
              <documentation>
                <result>List of values that are used to replace question mark</result>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="getParameter" returnType="unknown">
          <args />
        </action>
        <action name="helloWorld" returnType="unknown">
          <args />
        </action>
        <action name="insert" returnType="int">
          <args>
            <arg name="into" optional="false" type="string">
              <documentation>
                <result>Table name</result>
              </documentation>
            </arg>
            <arg name="columns" optional="true" type="list">
              <documentation>
                <result>List of column name of table</result>
              </documentation>
            </arg>
            <arg name="values" optional="false" type="list">
              <documentation>
                <result>List of values that are used to insert into table. Columns and values must have same size</result>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="isConnected" returnType="bool">
          <args />
        </action>
        <action name="select" returnType="list">
          <args>
            <arg name="select" optional="false" type="string">
              <documentation>
                <result>select string</result>
              </documentation>
            </arg>
            <arg name="values" optional="true" type="list">
              <documentation>
                <result>List of values that are used to replace question marks</result>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="setParameter" returnType="unknown">
          <args>
            <arg name="params" optional="false" type="map">
              <documentation>
                <result>Connection parameters</result>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="testConnection" returnType="bool">
          <args>
            <arg name="params" optional="false" type="map">
              <documentation>
                <result>Connection parameters</result>
              </documentation>
            </arg>
          </args>
        </action>
        <action name="timeStamp" returnType="float">
          <args />
        </action>
      </actions>
    </species>
    <species id="graph_edge" name="graph_edge" projectName="msi.gama.core">
      <actions />
    </species>
    <species id="model" name="model" projectName="msi.gama.core">
      <actions>
        <action name="halt" returnType="unknown">
          <args />
          <documentation>
            <result>Allows to stop the current simulation so that cannot be continued after. All the behaviors and updates are stopped.</result>
          </documentation>
        </action>
        <action name="pause" returnType="unknown">
          <args />
          <documentation>
            <result>Allows to pause the current simulation **ACTUALLY EXPERIMENT FOR THE MOMENT**. It can be set to continue with the manual intervention of the user.</result>
          </documentation>
        </action>
      </actions>
    </species>
    <species id="graph_node" name="graph_node" projectName="msi.gama.core">
      <actions>
        <action name="related_to" returnType="bool">
          <args>
            <arg name="other" optional="false" type="agent" />
          </args>
        </action>
      </actions>
    </species>
    <species id="agent" name="agent" projectName="msi.gama.core">
      <actions>
        <action name="_init_" returnType="unknown">
          <args />
        </action>
        <action name="_step_" returnType="unknown">
          <args />
        </action>
      </actions>
    </species>
    <species id="experiment" name="experiment" projectName="msi.gama.core">
      <actions />
    </species>
    <species id="base_edge" name="base_edge" projectName="msi.gama.core">
      <actions />
    </species>
  </speciess>
  <statements>
    <statement id="layout_yifanhu" kind="Single statement" name="layout_yifanhu" projectName="simtools.graphanalysis.fr">
      <facets>
        <facet name="graph" omissible="true" optional="false" type="graph">
          <documentation>
            <result>the graph to apply the layout.</result>
          </documentation>
        </facet>
        <facet name="optimal_distance" omissible="false" optional="true" type="float">
          <documentation>
            <result>the natural length of the springs. Bigger values mean nodes will be farther apart (default: 100).</result>
          </documentation>
        </facet>
        <facet name="quadtree_max_level" omissible="false" optional="true" type="int">
          <documentation>
            <result>The maximum level to be used in the quadtree representation. Greater values mean more accuracy (default: 10).</result>
          </documentation>
        </facet>
        <facet name="theta" omissible="false" optional="true" type="float">
          <documentation>
            <result>The theta parameter for Barnes-Hut opening criteria. Smaller values mean more accuracy (default: 1.2).</result>
          </documentation>
        </facet>
        <facet name="relative_strength" omissible="false" optional="true" type="float">
          <documentation>
            <result>The relative strength between electrical force (repulsion) and spring force (attriaction). default: 0.2</result>
          </documentation>
        </facet>
        <facet name="step_size" omissible="false" optional="true" type="float">
          <documentation>
            <result>The step size used in the algorithm. It has to be a meaningful size compared to the optimal distance (e.g. 10%). default: 10</result>
          </documentation>
        </facet>
        <facet name="nb_steps" omissible="false" optional="true" type="int">
          <documentation>
            <result>The number of steps of the algorithm to perform (default 1).</result>
          </documentation>
        </facet>
        <facet name="bounded_point1" omissible="false" optional="true" type="point">
          <documentation>
            <result>The new nodes positions are bounded within the two bound points if both are not null. default: null</result>
          </documentation>
        </facet>
        <facet name="bounded_point2" omissible="false" optional="true" type="point">
          <documentation>
            <result>The new nodes positions are bounded within the two bound points if both are not null. default: null</result>
          </documentation>
        </facet>
      </facets>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="layout_forceatlas2" kind="Single statement" name="layout_forceatlas2" projectName="simtools.graphanalysis.fr">
      <facets>
        <facet name="graph" omissible="true" optional="false" type="graph">
          <documentation>
            <result>the graph to apply the layout.</result>
          </documentation>
        </facet>
        <facet name="nb_steps" omissible="false" optional="true" type="int">
          <documentation>
            <result>The number of steps of the algorithm to perform (default 1).</result>
          </documentation>
        </facet>
        <facet name="thread_number" omissible="false" optional="true" type="int">
          <documentation>
            <result>More threads means more speed (default: 1).</result>
          </documentation>
        </facet>
        <facet name="dissuade_hubs" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Distributes attraction along outbound edges. Hubs attract less and thus are pushed to the borders (default: false).</result>
          </documentation>
        </facet>
        <facet name="linlog_mode" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Switch model from lin-lin to lin-log. Makes clusters more tight (default: false).</result>
          </documentation>
        </facet>
        <facet name="prevent_overlap" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Should not be used with approximate_repulsion default: false</result>
          </documentation>
        </facet>
        <facet name="edge_weight_influence" omissible="false" optional="true" type="float">
          <documentation>
            <result>How much influence you give to the edges wight. 0 is no influence, 1 is normal. default: 1.0</result>
          </documentation>
        </facet>
        <facet name="scaling" omissible="false" optional="true" type="float">
          <documentation>
            <result>How much repulsion you want. More makes a more sparse graph. default: 2.0</result>
          </documentation>
        </facet>
        <facet name="stronger_gravity" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>A stronger gravity law default: false</result>
          </documentation>
        </facet>
        <facet name="gravity" omissible="false" optional="true" type="float">
          <documentation>
            <result>Attracts nodes to the center. Prevents islands from drifting away. default: 1.0</result>
          </documentation>
        </facet>
        <facet name="tolerance" omissible="false" optional="true" type="float">
          <documentation>
            <result>How much swinging you allow. Above 1 discouraged. Lower gives less speed and more precision. default: 0.1</result>
          </documentation>
        </facet>
        <facet name="approximate_repulsion" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Barnes Hut optimization: n2 complexity to n.ln(n); allows larger graphs. default: false</result>
          </documentation>
        </facet>
        <facet name="approximation" omissible="false" optional="true" type="float">
          <documentation>
            <result>Theta of the Barnes Hut optimization. default: 1.2</result>
          </documentation>
        </facet>
        <facet name="bounded_point1" omissible="false" optional="true" type="point">
          <documentation>
            <result>The new nodes positions are bounded within the two bound points if both are not null. default: null</result>
          </documentation>
        </facet>
        <facet name="bounded_point2" omissible="false" optional="true" type="point">
          <documentation>
            <result>The new nodes positions are bounded within the two bound points if both are not null. default: null</result>
          </documentation>
        </facet>
      </facets>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="resume_sound" kind="Sequence of statements or action" name="resume_sound" projectName="ummisco.gaml.extensions.sound">
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="start_sound" kind="Sequence of statements or action" name="start_sound" projectName="ummisco.gaml.extensions.sound">
      <facets>
        <facet name="source" omissible="false" optional="false" type="string">
          <documentation>
            <result>The path to music file. This path is relative to the path of the model.</result>
          </documentation>
        </facet>
        <facet name="mode" omissible="false" optional="true" type="an identifier" values=", takes values in: {overwrite, ignore}">
          <documentation>
            <result>Mode of</result>
          </documentation>
        </facet>
        <facet name="repeat" omissible="false" optional="true" type="boolean">
          <documentation>
            <result />
          </documentation>
        </facet>
      </facets>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="pause_sound" kind="Sequence of statements or action" name="pause_sound" projectName="ummisco.gaml.extensions.sound">
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="stop_sound" kind="Sequence of statements or action" name="stop_sound" projectName="ummisco.gaml.extensions.sound">
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="run" kind="Sequence of statements or action" name="run" projectName="msi.gama.headless">
      <facets>
        <facet name="of" omissible="false" optional="false" type="string" />
        <facet name="experiment" omissible="true" optional="false" type="string" />
        <facet name="end_cycle" omissible="false" optional="true" type="int" />
        <facet name="core" omissible="false" optional="true" type="int" />
        <facet name="out" omissible="false" optional="true" type="string" />
        <facet name="with_output" omissible="false" optional="true" type="map" />
        <facet name="with_param" omissible="false" optional="true" type="map" />
      </facets>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Single statement</kind>
          <kind>Species</kind>
          <kind>Model</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="diffusion" kind="Single statement" name="diffusion" projectName="ummisco.gaml.extensions.maths">
      <facets>
        <facet name="var" omissible="true" optional="false" type="an identifier">
          <documentation>
            <result>the variable to be diffused</result>
          </documentation>
        </facet>
        <facet name="on" omissible="false" optional="false" type="an identifier">
          <documentation>
            <result>the species (in general a grid), on which the diffusion will occur</result>
          </documentation>
        </facet>
        <facet name="mat_diffu" omissible="false" optional="true" type="matrix">
          <documentation>
            <result>the diffusion matrix (can have any size)</result>
          </documentation>
        </facet>
        <facet name="method" omissible="false" optional="true" type="an identifier" values=", takes values in: {convolution, dot_product}">
          <documentation>
            <result>the diffusion method</result>
          </documentation>
        </facet>
        <facet name="mask" omissible="false" optional="true" type="matrix">
          <documentation>
            <result>a matrix masking the diffusion (matrix created from a image for example)</result>
          </documentation>
        </facet>
        <facet name="proportion" omissible="false" optional="true" type="float">
          <documentation>
            <result>a diffusion rate</result>
          </documentation>
        </facet>
        <facet name="radius" omissible="false" optional="true" type="int">
          <documentation>
            <result>a diffusion radius</result>
          </documentation>
        </facet>
        <facet name="cycle_length" omissible="false" optional="true" type="int">
          <documentation>
            <result>the number of diffusion operation applied in one simulation step</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>This statements allows a value to diffuse among a species on agents (generally on a grid) depending on a given diffusion matrix.</result>
        <usages>
          <usage descUsageElt="A basic example of diffusion of the variable phero defined in the species cells, given a diffusion matrix math_diff is:">
            <examples>
              <example code="matrix&lt;float&gt; math_diff &lt;- matrix([[1/9,1/9,1/9],[1/9,1/9,1/9],[1/9,1/9,1/9]]);" isExecutable="false" isTestOnly="false" test="false" />
              <example code="diffusion var: phero on: cells mat_diffu: math_diff;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="The diffusion can be masked by obstacles, created from a bitmap image:">
            <examples>
              <example code="diffusion var: phero on: cells mat_diffu: math_diff mask: mymask;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="A convenient way to have an uniform diffusion in a given radius is (which is equivalent to the above diffusion):">
            <examples>
              <example code="diffusion var: phero on: cells proportion: 1/9 radius: 1;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="equation" kind="Sequence of statements or action" name="equation" projectName="ummisco.gaml.extensions.maths">
      <facets>
        <facet name="name" omissible="true" optional="false" type="an identifier">
          <documentation>
            <result>the equation identifier</result>
          </documentation>
        </facet>
        <facet name="type" omissible="false" optional="true" type="an identifier" values=", takes values in: {SI, SIS, SIR, SIRS, SEIR, LV}">
          <documentation>
            <result>the choice of one among classical models (SI, SIS, SIR, SIRS, SEIR, LV)</result>
          </documentation>
        </facet>
        <facet name="vars" omissible="false" optional="true" type="list">
          <documentation>
            <result>the list of variables used in predefined equation systems</result>
          </documentation>
        </facet>
        <facet name="params" omissible="false" optional="true" type="list">
          <documentation>
            <result>the list of pramameters used in predefined equation systems</result>
          </documentation>
        </facet>
        <facet name="simultaneously" omissible="false" optional="true" type="list">
          <documentation>
            <result>a list of agents containing a system of equations (all systems will be solved simultaneously)</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>The equation statement is used to create an equation system from several single equations.</result>
        <seeAlso>
          <see id="=" />
          <see id="solve" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="If the simultaneously: facet is used, system of all the agents will be solved simultaneously." />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="The basic syntax to define an equation system is:">
            <examples>
              <example code="float t;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="float S;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="float I;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="equation SI { " isExecutable="false" isTestOnly="false" test="false" />
              <example code="   diff(S,t) = (- 0.3 * S * I / 100);" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   diff(I,t) = (0.3 * S * I / 100);" isExecutable="false" isTestOnly="false" test="false" />
              <example code="} " isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="If the type: facet is used, a predefined equation system is defined using variables vars: and parameters params: in the right order. All possible predefined equation systems are the following ones (see [EquationPresentation161 EquationPresentation161] for precise definition of each classical equation system): ">
            <examples>
              <example code="equation eqSI type: SI vars: [S,I,t] params: [N,beta];" isExecutable="false" isTestOnly="false" test="false" />
              <example code="equation eqSIS type: SIS vars: [S,I,t] params: [N,beta,gamma];" isExecutable="false" isTestOnly="false" test="false" />
              <example code="equation eqSIR type:SIR vars:[S,I,R,t] params:[N,beta,gamma];" isExecutable="false" isTestOnly="false" test="false" />
              <example code="equation eqSIRS type: SIRS vars: [S,I,R,t] params: [N,beta,gamma,omega,mu];" isExecutable="false" isTestOnly="false" test="false" />
              <example code="equation eqSEIR type: SEIR vars: [S,E,I,R,t] params: [N,beta,gamma,sigma,mu];" isExecutable="false" isTestOnly="false" test="false" />
              <example code="equation eqLV type: LV vars: [x,y,t] params: [alpha,beta,delta,gamma] ;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Species</kind>
          <kind>Model</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="solve" kind="Single statement" name="solve" projectName="ummisco.gaml.extensions.maths">
      <facets>
        <facet name="equation" omissible="true" optional="false" type="an identifier">
          <documentation>
            <result>the equation system identifier to be numerically solved</result>
          </documentation>
        </facet>
        <facet name="method" omissible="false" optional="true" type="an identifier" values=", takes values in: {rk4, dp853}">
          <documentation>
            <result>integrate method (can be only "rk4" or "dp853") (default value: "rk4")</result>
          </documentation>
        </facet>
        <facet name="integrated_times" omissible="false" optional="true" type="list">
          <documentation>
            <result>time interval inside integration process</result>
          </documentation>
        </facet>
        <facet name="integrated_values" omissible="false" optional="true" type="list">
          <documentation>
            <result>list of variables's value inside integration process</result>
          </documentation>
        </facet>
        <facet name="discretizing_step" omissible="false" optional="true" type="int">
          <documentation>
            <result>number of discret beside 2 step of simulation (default value: 0)</result>
          </documentation>
        </facet>
        <facet name="time_initial" omissible="false" optional="true" type="float">
          <documentation>
            <result>initial time</result>
          </documentation>
        </facet>
        <facet name="time_final" omissible="false" optional="true" type="float">
          <documentation>
            <result>target time for the integration (can be set to a value smaller than t0 for backward integration)</result>
          </documentation>
        </facet>
        <facet name="cycle_length" omissible="false" optional="true" type="int">
          <documentation>
            <result>length of simulation cycle which will be synchronize with step of integrator (default value: 1)</result>
          </documentation>
        </facet>
        <facet name="step" omissible="false" optional="true" type="float">
          <documentation>
            <result>integration step, use with most integrator methods (default value: 1)</result>
          </documentation>
        </facet>
        <facet name="min_step" omissible="false" optional="true" type="float">
          <documentation>
            <result>minimal step, (used with dp853 method only), (sign is irrelevant, regardless of integration direction, forward or backward), the last step can be smaller than this value</result>
          </documentation>
        </facet>
        <facet name="max_step" omissible="false" optional="true" type="float">
          <documentation>
            <result>maximal step, (used with dp853 method only), (sign is irrelevant, regardless of integration direction, forward or backward), the last step can be smaller than this value</result>
          </documentation>
        </facet>
        <facet name="scalAbsoluteTolerance" omissible="false" optional="true" type="float">
          <documentation>
            <result>allowed absolute error (used with dp853 method only)</result>
          </documentation>
        </facet>
        <facet name="scalRelativeTolerance" omissible="false" optional="true" type="float">
          <documentation>
            <result>allowed relative error (used with dp853 method only)</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>Solves all equations which matched the given name, with all systems of agents that should solved simultaneously.</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="solve SIR method: &quot;rk4&quot; step:0.001;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="=" kind="Single statement" name="=" projectName="ummisco.gaml.extensions.maths">
      <facets>
        <facet name="left" omissible="false" optional="false" type="any type">
          <documentation>
            <result>the left part of the equation (it should be a variable or a call to the diff() or diff2() operators)</result>
          </documentation>
        </facet>
        <facet name="right" omissible="true" optional="false" type="float">
          <documentation>
            <result>the right part of the equation (it is mandatory that it can be evaluate to a float</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>Allows to implement an equation in the form function(n, t) = expression. The left function is only here as a placeholder for enabling a simpler syntax and grabbing the variable as its left member.</result>
        <seeAlso>
          <see id="equation" />
          <see id="solve" />
        </seeAlso>
        <usages>
          <usage descUsageElt="The syntax of the = statement is a bit different from the other statements. It hase to be used as follows (in an equation):">
            <examples>
              <example code="float t;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="float S;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="float I;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="equation SI { " isExecutable="false" isTestOnly="false" test="false" />
              <example code="   diff(S,t) = (- 0.3 * S * I / 100);" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   diff(I,t) = (0.3 * S * I / 100);" isExecutable="false" isTestOnly="false" test="false" />
              <example code="} " isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>equation</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="plan" kind="Behavior" name="plan" projectName="msi.gaml.architecture.simplebdi">
      <facets>
        <facet name="when" omissible="false" optional="true" type="boolean" />
        <facet name="finished_when" omissible="false" optional="true" type="boolean" />
        <facet name="priority" omissible="false" optional="true" type="float" />
        <facet name="name" omissible="true" optional="true" type="an identifier" />
        <facet name="intention" omissible="false" optional="true" type="any type" />
        <facet name="instantaneous" omissible="false" optional="true" type="boolean" />
      </facets>
      <inside>
        <symbols />
        <kinds>
          <kind>Species</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="setup" kind="Sequence of statements or action" name="setup" projectName="irit.gaml.extensions.test">
      <documentation>
        <result>The setup statement is used to define the set of instructions that will be executed before every [#test test].</result>
        <seeAlso>
          <see id="test" />
          <see id="assert" />
        </seeAlso>
        <usages>
          <usage descUsageElt="As every test should be independant from the others, the setup will mainly contain initialization of variables that will be used in each test.">
            <examples>
              <example code="species Tester {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="    int val_to_test;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="false" isTestOnly="false" test="false" />
              <example code="    setup {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="        val_to_test &lt;- 0;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="    }" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="false" isTestOnly="false" test="false" />
              <example code="    test t1 {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="       // [set of instructions, including asserts]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="    }" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Species</kind>
          <kind>Experiment</kind>
          <kind>Model</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="write" kind="Single statement" name="write" projectName="msi.gama.core">
      <facets>
        <facet name="message" omissible="true" optional="false" type="any type">
          <documentation>
            <result>the message to display. Modelers can add some formatting characters to the message (carriage returns, tabs, or Unicode characters), which will be used accordingly in the console.</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>The statement makes the agent output an arbitrary message in the console.</result>
        <usages>
          <usage descUsageElt="Outputting a message">
            <examples>
              <example code="write 'This is a message from ' + self;" isExecutable="true" isTestOnly="false" test="true" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
          <kind>Layer</kind>
        </kinds>
      </inside>
    </statement>
    <statement kind="Variable (number)" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="false" type="a new identifier">
          <documentation>
            <result>The name of the attribute</result>
          </documentation>
        </facet>
        <facet name="type" omissible="false" optional="true" type="a datatype identifier">
          <documentation>
            <result>The type of the attribute, either 'int' or 'float'</result>
          </documentation>
        </facet>
        <facet name="init" omissible="false" optional="true" type="any type in [int, float]">
          <documentation>
            <result>The initial value of the attribute</result>
          </documentation>
        </facet>
        <facet name="value" omissible="false" optional="true" type="any type in [int, float]">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="update" omissible="false" optional="true" type="any type in [int, float]">
          <documentation>
            <result>An expression that will be evaluated each cycle to compute a new value for the attribute</result>
          </documentation>
        </facet>
        <facet name="function" omissible="false" optional="true" type="any type in [int, float]">
          <documentation>
            <result>Used to specify an expression that will be evaluated each time the attribute is accessed. This facet is incompatible with both 'init:' and 'update:'</result>
          </documentation>
        </facet>
        <facet name="const" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Indicates whether this attribute can be subsequently modified or not</result>
          </documentation>
        </facet>
        <facet name="category" omissible="false" optional="true" type="a label">
          <documentation>
            <result>Soon to be deprecated. Declare the parameter in an experiment instead</result>
          </documentation>
        </facet>
        <facet name="parameter" omissible="false" optional="true" type="a label">
          <documentation>
            <result>Soon to be deprecated. Declare the parameter in an experiment instead</result>
          </documentation>
        </facet>
        <facet name="min" omissible="false" optional="true" type="any type in [int, float]">
          <documentation>
            <result>The minimum value this attribute can take</result>
          </documentation>
        </facet>
        <facet name="max" omissible="false" optional="true" type="any type in [int, float]">
          <documentation>
            <result>The maximum value this attribute can take.</result>
          </documentation>
        </facet>
        <facet name="step" omissible="false" optional="true" type="int" />
        <facet name="among" omissible="false" optional="true" type="list">
          <documentation>
            <result>A list of constant values among which the attribute can take its value</result>
          </documentation>
        </facet>
      </facets>
      <inside>
        <symbols />
        <kinds>
          <kind>Species</kind>
          <kind>Experiment</kind>
          <kind>Model</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="user_input" kind="Single statement" name="user_input" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="true" type="a label">
          <documentation>
            <result>the displayed name</result>
          </documentation>
        </facet>
        <facet name="type" omissible="false" optional="true" type="a datatype identifier">
          <documentation>
            <result>the variable type</result>
          </documentation>
        </facet>
        <facet name="init" omissible="false" optional="true" type="any type">
          <documentation>
            <result>the init value</result>
          </documentation>
        </facet>
        <facet name="min" omissible="false" optional="true" type="float">
          <documentation>
            <result>the minimum value</result>
          </documentation>
        </facet>
        <facet name="max" omissible="false" optional="true" type="float">
          <documentation>
            <result>the maximum value</result>
          </documentation>
        </facet>
        <facet name="returns" omissible="false" optional="false" type="a new identifier">
          <documentation>
            <result>a new local variable containing the value given by the user</result>
          </documentation>
        </facet>
        <facet name="among" omissible="false" optional="true" type="list">
          <documentation>
            <result>the set of acceptable values for the variable</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>It allows to let the user define the value of a variable.</result>
        <seeAlso>
          <see id="user_command" />
          <see id="user_init" />
          <see id="user_panel" />
        </seeAlso>
        <usagesExamples>
          <usage>
            <examples>
              <example code="user_panel &quot;Advanced Control&quot; {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;user_input &quot;Location&quot; returns: loc type: point &lt;- {0,0};" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;create cells number: 10 with: [location::loc];" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
      <inside>
        <symbols>
          <symbol>user_command</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="output" kind="Output" name="output" projectName="msi.gama.core">
      <documentation>
        <result>`output` blocks define how to visualize a simulation (with one or more display blocks that define separate windows). It will include a set of displays, monitors and files statements. It will be taken into account only if the experiment type is `gui`.</result>
        <seeAlso>
          <see id="display" />
          <see id="monitor" />
          <see id="inspect" />
          <see id="output_file" />
        </seeAlso>
        <usages>
          <usage descUsageElt="Its basic syntax is: ">
            <examples>
              <example code="experiment exp_name type: gui {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   // [inputs]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   output {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="      // [display, file or monitor statements]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   }" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Model</kind>
          <kind>Experiment</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="simulate" kind="Single statement" name="simulate" projectName="msi.gama.core">
      <facets>
        <facet name="comodel" omissible="true" optional="false" type="file" />
        <facet name="with_experiment" omissible="false" optional="true" type="string" />
        <facet name="share" omissible="false" optional="true" type="list" />
        <facet name="with_input" omissible="false" optional="true" type="map" />
        <facet name="with_output" omissible="false" optional="true" type="map" />
        <facet name="reset" omissible="false" optional="true" type="boolean" />
        <facet name="until" omissible="false" optional="true" type="boolean" />
        <facet name="repeat" omissible="false" optional="true" type="int" />
      </facets>
      <documentation>
        <result>Allows an agent, the sender agent (that can be the [Sections161#global world agent]), to ask another (or other) agent(s) to perform a set of statements. It obeys the following syntax, where the target attribute denotes the receiver agent(s):</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="ask receiver_agent(s) {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="     // [statements]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
      <inside>
        <symbols>
          <symbol>chart</symbol>
        </symbols>
        <kinds>
          <kind>Experiment</kind>
          <kind>Species</kind>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="inspect" kind="Output" name="inspect" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="false" type="any type">
          <documentation>
            <result>the identifier of the inspector</result>
          </documentation>
        </facet>
        <facet name="refresh_every" omissible="false" optional="true" type="int">
          <documentation>
            <result>Allows to refresh the inspector every n time steps (default is 1)</result>
          </documentation>
        </facet>
        <facet name="refresh" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Indicates the condition under which this output should be refreshed (default is true)</result>
          </documentation>
        </facet>
        <facet name="value" omissible="false" optional="true" type="any type">
          <documentation>
            <result>the set of agents to inspect, could be a species, a list of agents or an agent</result>
          </documentation>
        </facet>
        <facet name="attributes" omissible="false" optional="true" type="list">
          <documentation>
            <result>the list of attributes to inspect</result>
          </documentation>
        </facet>
        <facet name="type" omissible="false" optional="true" type="an identifier" values=", takes values in: {agent, species, display_population, table}">
          <documentation>
            <result>the way to inspect agents: in a table, or a set of inspectors</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>`inspect` (and `browse`) statements allows modeler to inspect a set of agents, in a table with agents and all their attributes or an agent inspector per agent, depending on the type: chosen. Modeler can choose which attributes to display. When `browse` is used, type: default value is table, whereas when`inspect` is used, type: default value is agent.</result>
        <usages>
          <usage descUsageElt="An example of syntax is:">
            <examples>
              <example code="inspect &quot;my_inspector&quot; value: ant attributes: [&quot;name&quot;, &quot;location&quot;];" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>output</symbol>
          <symbol>permanent</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="trace" kind="Sequence of statements or action" name="trace" projectName="msi.gama.core">
      <documentation>
        <result>All the statements executed in the trace statement are displayed in the console.</result>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
          <kind>Layer</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="species" kind="Species" name="species" projectName="msi.gama.core">
      <facets>
        <facet name="width" omissible="false" optional="true" type="int">
          <documentation>
            <result>(grid only), the width of the grid (in terms of agent number)</result>
          </documentation>
        </facet>
        <facet name="height" omissible="false" optional="true" type="int">
          <documentation>
            <result>(grid only),  the height of the grid (in terms of agent number)</result>
          </documentation>
        </facet>
        <facet name="cell_width" omissible="false" optional="true" type="float">
          <documentation>
            <result>(grid only), the width of the cells of the grid</result>
          </documentation>
        </facet>
        <facet name="cell_height" omissible="false" optional="true" type="float">
          <documentation>
            <result>(grid only), the height of the cells of the grid</result>
          </documentation>
        </facet>
        <facet name="neighbours" omissible="false" optional="true" type="int">
          <documentation>
            <result>(grid only), the chosen neighbourhood (4, 6 or 8)</result>
          </documentation>
        </facet>
        <facet name="use_individual_shapes" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>(grid only),(true by default). Allows to specify whether or not the agents of the grid will have distinct geometries. If set to false, they will all have simpler proxy geometries</result>
            <comment>This facet, when set to true, allows to save memory by generating only one reference geometry and proxy geometries for the agents</comment>
            <seeAlso>
              <see id="use_regular_agents" />
            </seeAlso>
          </documentation>
        </facet>
        <facet name="use_regular_agents" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>(grid only),(true by default). Allows to specify if the agents of the grid are regular agents (like those of any other species) or minimal ones (which can't have sub-populations, can't inherit from a regular species, etc.)</result>
          </documentation>
        </facet>
        <facet name="use_neighbours_cache" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>(grid only),(true by default). Allows to turn on or off the use of the neighbours cache used for grids. Note that if a diffusion of variable occurs, GAMA will emit a warning and automatically switch to a caching version</result>
          </documentation>
        </facet>
        <facet name="file" omissible="false" optional="true" type="file">
          <documentation>
            <result>(grid only), a bitmap file that will be loaded at runtime so that the value of each pixel  can be assigned to the attribute 'grid_value'</result>
          </documentation>
        </facet>
        <facet name="torus" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>is the topology toric (defaut: false). Needs to be defined on the global species.</result>
          </documentation>
        </facet>
        <facet name="name" omissible="true" optional="false" type="an identifier">
          <documentation>
            <result>the identifier of the species</result>
          </documentation>
        </facet>
        <facet name="parent" omissible="false" optional="true" type="an identifier">
          <documentation>
            <result>the parent class (inheritance)</result>
          </documentation>
        </facet>
        <facet name="edge_species" omissible="false" optional="true" type="an identifier">
          <documentation>
            <result>In the case of a species defining a graph topology for its instances (nodes of the graph), specifies the species to use for representing the edges</result>
          </documentation>
        </facet>
        <facet name="skills" omissible="false" optional="true" type="list">
          <documentation>
            <result>The list of skills that will be made available to the instances of this species. Each new skill provides attributes and actions that will be added to the ones defined in this species</result>
          </documentation>
        </facet>
        <facet name="mirrors" omissible="false" optional="true" type="any type in [list, species]">
          <documentation>
            <result>The species this species is mirroring. The population of this current species will be dependent of that of the species mirrored (i.e. agents creation and death are entirely taken in charge by GAMA with respect to the demographics of the species mirrored). In addition, this species is provided with an attribute called 'target', which allows each agent to know which agent of the mirrored species it is representing.</result>
          </documentation>
        </facet>
        <facet name="control" omissible="false" optional="true" type="a label">
          <documentation>
            <result>defines the architecture of the species (e.g. fsm...)</result>
          </documentation>
        </facet>
        <facet name="compile" omissible="false" optional="true" type="boolean">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="frequency" omissible="false" optional="true" type="int">
          <documentation>
            <result>The execution frequency of the species (default value: 1). For instance, if frequency is set to 10, the population of agents will be executed only every 10 cycles.</result>
            <seeAlso>
              <see id="schedules" />
            </seeAlso>
          </documentation>
        </facet>
        <facet name="schedules" omissible="false" optional="true" type="container">
          <documentation>
            <result>A container of agents (a species, a dynamic list, or a combination of species and containers) , which represents which agents will be actually scheduled when the population is scheduled for execution. For instance, 'species a schedules: (10 among a)' will result in a population that schedules only 10 of its own agents every cycle. 'species b schedules: []' will prevent the agents of 'b' to be scheduled. Note that the scope of agents covered here can be larger than the population, which allows to build complex scheduling controls; for instance, defining 'global schedules: [] {...} species b schedules: []; species c schedules: b + world; ' allows to simulate a model where the agents of b are scheduled first, followed by the world, without even having to create an instance of c.</result>
          </documentation>
        </facet>
        <facet name="topology" omissible="false" optional="true" type="topology">
          <documentation>
            <result>The topology of the population of agents defined by this species. In case of nested species, it can for example be the shape of the macro-agent. In case of grid or graph species, the topology is automatically computed and cannot be redefined</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>The species statement allows modelers to define new species in the model. `global` and `grid` are speciel cases of species: `global` being the definition of the global agent (which has automatically one instance, world) and `grid` being a species with a grid topology.</result>
        <usages>
          <usage descUsageElt="Here is an example of a species definition with a FSM architecture and the additional skill moving:">
            <examples>
              <example code="species ant skills: [moving] control: fsm {" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="In the case of a species aiming at mirroring another one:">
            <examples>
              <example code="species node_agent mirrors: list(bug) parent: graph_node edge_species: edge_agent {" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="The definition of the single grid of a model will automatically create gridwidth x gridheight agents:">
            <examples>
              <example code="grid ant_grid width: gridwidth height: gridheight file: grid_file neighbours: 8 use_regular_agents: false { " isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="Using a file to initialize the grid can replace width/height facets:">
            <examples>
              <example code="grid ant_grid file: grid_file neighbours: 8 use_regular_agents: false { " isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Model</kind>
          <kind>Environment</kind>
          <kind>Species</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="event" kind="Layer" name="event" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="false" type="an identifier" values=", takes values in: {mouse_up, mouse_down, mouse_drag}">
          <documentation>
            <result>the type of event captured</result>
          </documentation>
        </facet>
        <facet name="action" omissible="false" optional="false" type="string">
          <documentation>
            <result>the identifier of the action to be executed. It has to be an action written in the global block. This action have to follow the following specification: `action myAction (point location, list selected_agents)`</result>
          </documentation>
        </facet>
        <facet name="mouse_location" omissible="false" optional="true" type="string" />
        <facet name="selected_agents" omissible="false" optional="true" type="string" />
      </facets>
      <documentation>
        <result>`event` allows to interact with the simulation by capturing mouse event and doing an action. This action could apply a change on environment or on agents, according to the goal.</result>
        <seeAlso>
          <see id="display" />
          <see id="agents" />
          <see id="chart" />
          <see id="graphics" />
          <see id="display_grid" />
          <see id="image" />
          <see id="overlay" />
          <see id="quadtree" />
          <see id="display_population" />
          <see id="text" />
        </seeAlso>
        <usages>
          <usage descUsageElt="The general syntax is:">
            <examples>
              <example code="event [event_type] action: myAction;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="For instance:">
            <examples>
              <example code="global {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   // ... " isExecutable="false" isTestOnly="false" test="false" />
              <example code="   action myAction (point location, list selected_agents) {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="      // location: contains le location of the click in the environment" isExecutable="false" isTestOnly="false" test="false" />
              <example code="      // selected_agents: contains agents clicked by the event" isExecutable="false" isTestOnly="false" test="false" />
              <example code="      " isExecutable="false" isTestOnly="false" test="false" />
              <example code="      // code written by modelers" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   }" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="false" isTestOnly="false" test="false" />
              <example code="experiment Simple type:gui {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   display my_display {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="      event mouse_up action: myAction;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   }" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>display</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="user_command" kind="Sequence of statements or action" name="user_command" projectName="msi.gama.core">
      <facets>
        <facet name="action" omissible="false" optional="true" type="an identifier">
          <documentation>
            <result>the identifier of the action to be executed</result>
          </documentation>
        </facet>
        <facet name="name" omissible="true" optional="false" type="a label">
          <documentation>
            <result>the identifier of the user_command</result>
          </documentation>
        </facet>
        <facet name="when" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>the condition that should be fulfille in order that the action is executed</result>
          </documentation>
        </facet>
        <facet name="with" omissible="false" optional="true" type="map">
          <documentation>
            <result>the map of the parameters::values that requires the action</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>Anywhere in the global block, in a species or in an (GUI) experiment, user_command statements allows to either call directly an existing action (with or without arguments) or to be followed by a block that describes what to do when this command is run.</result>
        <seeAlso>
          <see id="user_init" />
          <see id="user_panel" />
          <see id="user_input" />
        </seeAlso>
        <usages>
          <usage descUsageElt="The general syntax is for example:">
            <examples>
              <example code="user_command kill_myself action: some_action with: [arg1::val1, arg2::val2, ...];" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>user_panel</symbol>
        </symbols>
        <kinds>
          <kind>Species</kind>
          <kind>Experiment</kind>
          <kind>Model</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="image" kind="Layer" name="image" projectName="msi.gama.core">
      <facets>
        <facet name="file" omissible="false" optional="true" type="any type in [string, file]">
          <documentation>
            <result>the name/path of the image (in the case of a raster image)</result>
          </documentation>
        </facet>
        <facet name="position" omissible="false" optional="true" type="point">
          <documentation>
            <result>position of the upper-left corner of the layer. Note that if coordinates are in [0,1[, the position is relative to the size of the environment (e.g. {0.5,0.5} refers to the middle of the display) whereas it is absolute when coordinates are greter than 1. The position can only be a 3D point {0.5, 0.5, 0.5}, the last coordinate specifying the elevation of the layer.</result>
          </documentation>
        </facet>
        <facet name="size" omissible="false" optional="true" type="point">
          <documentation>
            <result>the layer resize factor: {1,1} refers to the original size whereas {0.5,0.5} divides by 2 the height and the width of the layer. In case of a 3D layer, a 3D point can be used (note that {1,1} is equivalent to {1,1,0}, so a resize of a layer containing 3D objects with a 2D points will remove the elevation)</result>
          </documentation>
        </facet>
        <facet name="transparency" omissible="false" optional="true" type="float">
          <documentation>
            <result>the transparency rate of the agents (between 0 and 1, 1 means no transparency)</result>
          </documentation>
        </facet>
        <facet name="name" omissible="true" optional="true" type="string">
          <documentation>
            <result>the identifier of the image layer</result>
          </documentation>
        </facet>
        <facet name="gis" omissible="false" optional="true" type="any type in [file, string]">
          <documentation>
            <result>the name/path of the shape file (to display a shapefile as background, without creating agents from it)</result>
          </documentation>
        </facet>
        <facet name="color" omissible="false" optional="true" type="rgb">
          <documentation>
            <result>in the case of a shapefile, this the color used to fill in geometries of the shapefile</result>
          </documentation>
        </facet>
        <facet name="refresh" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>(openGL only) specify whether the image display is refreshed. (true by default, usefull in case of images that is not modified over the simulation)</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>`image` allows modeler to display an image (e.g. as background of a simulation).</result>
        <seeAlso>
          <see id="display" />
          <see id="agents" />
          <see id="chart" />
          <see id="event" />
          <see id="graphics" />
          <see id="display_grid" />
          <see id="overlay" />
          <see id="quadtree" />
          <see id="display_population" />
          <see id="text" />
        </seeAlso>
        <usages>
          <usage descUsageElt="The general syntax is:">
            <examples>
              <example code="display my_display {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   image layer_name file: image_file [additional options];" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="For instance, in the case of a bitmap image">
            <examples>
              <example code="display my_display {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   image background file:&quot;../images/my_backgound.jpg&quot;;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="Or in the case of a shapefile:">
            <examples>
              <example code="display my_display {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   image testGIS gis: &quot;../includes/building.shp&quot; color: rgb('blue');" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="It is also possible to superpose images on different layers in the same way as for species using opengl display:">
            <examples>
              <example code="display my_display {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="  image image1 file:&quot;../images/image1.jpg&quot;;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="  image image2 file:&quot;../images/image2.jpg&quot;;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="  image image3 file:&quot;../images/image3.jpg&quot; position: {0,0,0.5};" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>display</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="experiment" kind="Experiment" name="experiment" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="false" type="a label">
          <documentation>
            <result>identifier of the experiment</result>
          </documentation>
        </facet>
        <facet name="title" omissible="false" optional="false" type="a label">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="parent" omissible="false" optional="true" type="an identifier">
          <documentation>
            <result>the parent experiment (in case of inheritance between experiments)</result>
          </documentation>
        </facet>
        <facet name="skills" omissible="false" optional="true" type="list">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="control" omissible="false" optional="true" type="an identifier">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="frequency" omissible="false" optional="true" type="int">
          <documentation>
            <result>the execution frequence of the experiment (default value: 1). If frequency: 10, the experiment is executed only each 10 steps.</result>
          </documentation>
        </facet>
        <facet name="schedules" omissible="false" optional="true" type="container">
          <documentation>
            <result>an ordered list of agents giving the order of their execution</result>
          </documentation>
        </facet>
        <facet name="keep_seed" omissible="false" optional="true" type="boolean">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="repeat" omissible="false" optional="true" type="int">
          <documentation>
            <result>In case of a batch experiment, expresses hom many times the simulations must be repeated</result>
          </documentation>
        </facet>
        <facet name="until" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>In case of a batch experiment, an expression that will be evaluated to know when a simulation should be terminated</result>
          </documentation>
        </facet>
        <facet name="multicore" omissible="false" optional="true" type="boolean">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="type" omissible="false" optional="false" type="a label" values=", takes values in: {batch, gui}">
          <documentation>
            <result>the type of the experiment (either 'gui' or 'batch'</result>
          </documentation>
        </facet>
      </facets>
      <inside>
        <symbols />
        <kinds>
          <kind>Model</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="status" kind="Single statement" name="status" projectName="msi.gama.core">
      <facets>
        <facet name="color" omissible="false" optional="true" type="rgb" />
        <facet name="message" omissible="true" optional="false" type="any type">
          <documentation>
            <result>Allows to display a necessarily short message in the status box in the upper left corner. No formatting characters (carriage returns, tabs, or Unicode characters) should be used, but a background color can be specified. The message will remain in place until it is replaced by another one or by nil, in which case the standard status (number of cycles) will be displayed again</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>The statement makes the agent output an arbitrary message in the status box.</result>
        <usages>
          <usage descUsageElt="Outputting a message">
            <examples>
              <example code="status ('This is my status ' + self) color: Â°yellow;" isExecutable="true" isTestOnly="false" test="true" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
          <kind>Layer</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="graphics" kind="Layer" name="graphics" projectName="msi.gama.core">
      <facets>
        <facet name="position" omissible="false" optional="true" type="point">
          <documentation>
            <result>position of the upper-left corner of the layer. Note that if coordinates are in [0,1[, the position is relative to the size of the environment (e.g. {0.5,0.5} refers to the middle of the display) whereas it is absolute when coordinates are greter than 1. The position can only be a 3D point {0.5, 0.5, 0.5}, the last coordinate specifying the elevation of the layer.</result>
          </documentation>
        </facet>
        <facet name="trace" omissible="false" optional="true" type="any type in [boolean, int]">
          <documentation>
            <result>Allows to aggregate the visualization at each timestep on the display. Default is false. If set to an int value, only the last n-th steps will be visualized. If set to true, no limit of timesteps is applied.</result>
          </documentation>
        </facet>
        <facet name="fading" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Used in conjunction with 'trace:', allows to apply a fading effect to the previous traces. Default is false</result>
          </documentation>
        </facet>
        <facet name="size" omissible="false" optional="true" type="point">
          <documentation>
            <result>the layer resize factor: {1,1} refers to the original size whereas {0.5,0.5} divides by 2 the height and the width of the layer. In case of a 3D layer, a 3D point can be used (note that {1,1} is equivalent to {1,1,0}, so a resize of a layer containing 3D objects with a 2D points will remove the elevation)</result>
          </documentation>
        </facet>
        <facet name="transparency" omissible="false" optional="true" type="float">
          <documentation>
            <result>the transparency rate of the agents (between 0 and 1, 1 means no transparency)</result>
          </documentation>
        </facet>
        <facet name="name" omissible="true" optional="false" type="a label">
          <documentation>
            <result>the identifier of the graphics</result>
          </documentation>
        </facet>
        <facet name="refresh" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>(openGL only) specify whether the display of the species is refreshed. (true by default, usefull in case of agents that do not move)</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>`graphics` allows the modeler to freely draw shapes/geometries/texts without having to define a species. It works exactly like a species [Aspect161 aspect]: the draw statement can be used in the same way.</result>
        <seeAlso>
          <see id="display" />
          <see id="agents" />
          <see id="chart" />
          <see id="event" />
          <see id="graphics" />
          <see id="display_grid" />
          <see id="image" />
          <see id="overlay" />
          <see id="quadtree" />
          <see id="display_population" />
          <see id="text" />
        </seeAlso>
        <usages>
          <usage descUsageElt="The general syntax is:">
            <examples>
              <example code="display my_display {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   graphics &quot;my new layer&quot; {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="      draw circle(5) at: {10,10} color: #red;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="      draw &quot;test&quot; at: {10,10} size: 20 color: #black;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   }" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>display</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="parameter" kind="Parameter" name="parameter" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="true" type="a label">
          <documentation>
            <result>The message displayed in the interface</result>
          </documentation>
        </facet>
        <facet name="type" omissible="false" optional="true" type="a datatype identifier">
          <documentation>
            <result>the variable type</result>
          </documentation>
        </facet>
        <facet name="init" omissible="false" optional="true" type="any type">
          <documentation>
            <result>the init value</result>
          </documentation>
        </facet>
        <facet name="min" omissible="false" optional="true" type="any type">
          <documentation>
            <result>the minimum value</result>
          </documentation>
        </facet>
        <facet name="max" omissible="false" optional="true" type="any type">
          <documentation>
            <result>the maximum value</result>
          </documentation>
        </facet>
        <facet name="category" omissible="false" optional="true" type="a label">
          <documentation>
            <result>a category label, used to group parameters in the interface</result>
          </documentation>
        </facet>
        <facet name="var" omissible="false" optional="false" type="an identifier">
          <documentation>
            <result>the name of the variable (that should be declared in the global)</result>
          </documentation>
        </facet>
        <facet name="unit" omissible="false" optional="true" type="a label">
          <documentation>
            <result>the variable unit</result>
          </documentation>
        </facet>
        <facet name="step" omissible="false" optional="true" type="float">
          <documentation>
            <result>the increment step (mainly used in batch mode to express the variation step between simulation)</result>
          </documentation>
        </facet>
        <facet name="among" omissible="false" optional="true" type="list">
          <documentation>
            <result>the list of possible values</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>The parameter statement specifies which global attributes (i) will change through the successive simulations (in batch experiments), (ii) can be modified by user via the interface (in gui experiments). In GUI experiments, parameters are displayed depending on their type.</result>
        <usages>
          <usage descUsageElt="In gui experiment, the general syntax is the following:">
            <examples>
              <example code="parameter title var: global_var category: cat;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="In batch experiment, the two following syntaxes can be used to describe the possible values of a parameter:">
            <examples>
              <example code="parameter 'Value of toto:' var: toto among: [1, 3, 7, 15, 100]; " isExecutable="false" isTestOnly="false" test="false" />
              <example code="parameter 'Value of titi:' var: titi min: 1 max: 100 step: 2; " isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Experiment</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="display_grid" kind="Layer" name="display_grid" projectName="msi.gama.core">
      <facets>
        <facet name="position" omissible="false" optional="true" type="point">
          <documentation>
            <result>position of the upper-left corner of the layer. Note that if coordinates are in [0,1[, the position is relative to the size of the environment (e.g. {0.5,0.5} refers to the middle of the display) whereas it is absolute when coordinates are greter than 1. The position can only be a 3D point {0.5, 0.5, 0.5}, the last coordinate specifying the elevation of the layer.</result>
          </documentation>
        </facet>
        <facet name="selectable" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Indicates whether the agents present on this layer are selectable by the user. Default is true</result>
          </documentation>
        </facet>
        <facet name="size" omissible="false" optional="true" type="point">
          <documentation>
            <result>the layer resize factor: {1,1} refers to the original size whereas {0.5,0.5} divides by 2 the height and the width of the layer. In case of a 3D layer, a 3D point can be used (note that {1,1} is equivalent to {1,1,0}, so a resize of a layer containing 3D objects with a 2D points will remove the elevation)</result>
          </documentation>
        </facet>
        <facet name="transparency" omissible="false" optional="true" type="float">
          <documentation>
            <result>the transparency rate of the agents (between 0 and 1, 1 means no transparency)</result>
          </documentation>
        </facet>
        <facet name="species" omissible="true" optional="false" type="species">
          <documentation>
            <result>the species of the agents in the grid</result>
          </documentation>
        </facet>
        <facet name="lines" omissible="false" optional="true" type="rgb">
          <documentation>
            <result>the color to draw lines (borders of cells)</result>
          </documentation>
        </facet>
        <facet name="elevation" omissible="false" optional="true" type="any type in [matrix, float, int, boolean]">
          <documentation>
            <result>Allows to specify the elevation of each cell, if any. Can be a matrix of float (provided it has the same size than the grid), an int or float variable of the grid species, or simply true (in which case, the variable called 'grid_value' is used to compute the elevation of each cell)</result>
          </documentation>
        </facet>
        <facet name="texture" omissible="false" optional="true" type="any type in [boolean, file]">
          <documentation>
            <result>the file object containing the texture image to be applied on the grid</result>
          </documentation>
        </facet>
        <facet name="grayscale" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>if true, givse a grey value to each polygon depending on its elevation (false by default)</result>
          </documentation>
        </facet>
        <facet name="triangulation" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>specifies whther the cells will be triangulated: if it is false, they will be displayed as horizontal squares at a given elevation, whereas if it is true, cells will be triangulated and linked to neighbors in order to have a continuous surface (false by default)</result>
          </documentation>
        </facet>
        <facet name="text" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>specify whether the attribute used to compute the elevation is displayed on each cells (false by default)</result>
          </documentation>
        </facet>
        <facet name="draw_as_dem" omissible="false" optional="true" type="boolean">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="dem" omissible="false" optional="true" type="matrix">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="refresh" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>(openGL only) specify whether the display of the species is refreshed. (true by default, usefull in case of agents that do not move)</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>`display_grid` is used using the `grid` keyword. It allows the modeler to display in an optimized way all cell agents of a grid (i.e. all agents of a species having a grid topology).</result>
        <seeAlso>
          <see id="display" />
          <see id="agents" />
          <see id="chart" />
          <see id="event" />
          <see id="graphics" />
          <see id="image" />
          <see id="overlay" />
          <see id="quadtree" />
          <see id="display_population" />
          <see id="text" />
        </seeAlso>
        <usages>
          <usage descUsageElt="The general syntax is:">
            <examples>
              <example code="display my_display {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   grid ant_grid lines: #black position: { 0.5, 0 } size: {0.5,0.5};" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="To display a grid as a DEM:">
            <examples>
              <example code="display my_display {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="    grid cell texture: texture_file text: false triangulation: true elevation: true;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>display</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="overlay" kind="Layer" name="overlay" projectName="msi.gama.core">
      <facets>
        <facet name="left" omissible="true" optional="true" type="any type">
          <documentation>
            <result>an expression that will be evaluated and displayed in the left section of the overlay</result>
          </documentation>
        </facet>
        <facet name="right" omissible="false" optional="true" type="any type">
          <documentation>
            <result>an expression that will be evaluated and displayed in the right section of the overlay</result>
          </documentation>
        </facet>
        <facet name="center" omissible="false" optional="true" type="any type">
          <documentation>
            <result>an expression that will be evaluated and displayed in the center section of the overlay</result>
          </documentation>
        </facet>
        <facet name="color" omissible="false" optional="true" type="any type in [list, rgb]">
          <documentation>
            <result>the color(s) used to display the expressions given in other facets</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>`overlay` allows the modeler to display a line to the already existing overlay, where the results of 'left', 'center' and 'right' facets, when they are defined, are displayed with the corresponding color if defined.</result>
        <seeAlso>
          <see id="display" />
          <see id="agents" />
          <see id="chart" />
          <see id="event" />
          <see id="graphics" />
          <see id="display_grid" />
          <see id="image" />
          <see id="quadtree" />
          <see id="display_population" />
          <see id="text" />
        </seeAlso>
        <usages>
          <usage descUsageElt="The general syntax is:">
            <examples>
              <example code="overlay &quot;Cycle: &quot; + (cycle) center: &quot;Duration: &quot; + total_duration + &quot;ms&quot; right: &quot;Model time: &quot; + as_date(time,&quot;&quot;) color: [#yellow, #orange, #yellow];" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>display</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="release" kind="Sequence of statements or action" name="release" projectName="msi.gama.core">
      <facets>
        <facet name="target" omissible="true" optional="false" type="any type in [agent, list]">
          <documentation>
            <result>an expression that is evaluated as an agent or a list of the agents to be released</result>
          </documentation>
        </facet>
        <facet name="as" omissible="false" optional="true" type="species">
          <documentation>
            <result>an expression that is evaluated as a species in which the micro-agent will be released</result>
          </documentation>
        </facet>
        <facet name="in" omissible="false" optional="true" type="agent">
          <documentation>
            <result>an expresion that is evaluated as an agent that will be the macro-agent in which micro-agent will be released, i.e. their new host</result>
          </documentation>
        </facet>
        <facet name="returns" omissible="false" optional="true" type="a new identifier">
          <documentation>
            <result>a new variable containing a list of the newly released agent(s)</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>Allows an agent to release its micro-agent(s). The preliminary for an agent to release its micro-agents is that species of these micro-agents are sub-species of other species (cf. [Species161#Nesting_species Nesting species]). The released agents won't be micro-agents of the calling agent anymore. Being released from a macro-agent, the micro-agents will change their species and host (macro-agent).</result>
        <seeAlso>
          <see id="capture" />
        </seeAlso>
        <usages>
          <usage descUsageElt="We consider the following species. Agents of &quot;C&quot; species can be released from a &quot;B&quot; agent to become agents of &quot;A&quot; species. Agents of &quot;D&quot; species cannot be released from the &quot;A&quot; agent because species &quot;D&quot; has no parent species.">
            <examples>
              <example code="species A {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="..." isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="species B {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="..." isExecutable="false" isTestOnly="false" test="false" />
              <example code="   species C parent: A {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   ..." isExecutable="false" isTestOnly="false" test="false" />
              <example code="   }" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   species D {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   ..." isExecutable="false" isTestOnly="false" test="false" />
              <example code="   }" isExecutable="false" isTestOnly="false" test="false" />
              <example code="..." isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="To release all &quot;C&quot; agents from a &quot;B&quot; agent, agent &quot;C&quot; has to execute the following statement. The &quot;C&quot; agent will change to &quot;A&quot; agent. The won't consider &quot;B&quot; agent as their macro-agent (host) anymore. Their host (macro-agent) will the be the host (macro-agent) of the &quot;B&quot; agent.">
            <examples>
              <example code="release list(C);" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="The modeler can specify the new host and the new species of the released agents:">
            <examples>
              <example code="release list (C) as: new_species in: new host;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement kind="Variable (regular)" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="false" type="a new identifier">
          <documentation>
            <result>The name of the attribute</result>
          </documentation>
        </facet>
        <facet name="type" omissible="false" optional="true" type="a datatype identifier" />
        <facet name="of" omissible="false" optional="true" type="a datatype identifier" />
        <facet name="index" omissible="false" optional="true" type="a datatype identifier" />
        <facet name="init" omissible="false" optional="true" type="any type">
          <documentation>
            <result>The initial value of the attribute</result>
          </documentation>
        </facet>
        <facet name="value" omissible="false" optional="true" type="any type">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="update" omissible="false" optional="true" type="any type">
          <documentation>
            <result>An expression that will be evaluated each cycle to compute a new value for the attribute</result>
          </documentation>
        </facet>
        <facet name="function" omissible="false" optional="true" type="any type">
          <documentation>
            <result>Used to specify an expression that will be evaluated each time the attribute is accessed. This facet is incompatible with both 'init:' and 'update:'</result>
          </documentation>
        </facet>
        <facet name="const" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Indicates whether this attribute can be subsequently modified or not</result>
          </documentation>
        </facet>
        <facet name="category" omissible="false" optional="true" type="a label">
          <documentation>
            <result>Soon to be deprecated. Declare the parameter in an experiment instead</result>
          </documentation>
        </facet>
        <facet name="parameter" omissible="false" optional="true" type="a label">
          <documentation>
            <result>Soon to be deprecated. Declare the parameter in an experiment instead</result>
          </documentation>
        </facet>
        <facet name="among" omissible="false" optional="true" type="list">
          <documentation>
            <result>A list of constant values among which the attribute can take its value</result>
          </documentation>
        </facet>
      </facets>
      <inside>
        <symbols />
        <kinds>
          <kind>Species</kind>
          <kind>Experiment</kind>
          <kind>Model</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="display_population" kind="Layer" name="display_population" projectName="msi.gama.core">
      <facets>
        <facet name="position" omissible="false" optional="true" type="point">
          <documentation>
            <result>position of the upper-left corner of the layer. Note that if coordinates are in [0,1[, the position is relative to the size of the environment (e.g. {0.5,0.5} refers to the middle of the display) whereas it is absolute when coordinates are greter than 1. The position can only be a 3D point {0.5, 0.5, 0.5}, the last coordinate specifying the elevation of the layer.</result>
          </documentation>
        </facet>
        <facet name="selectable" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Indicates whether the agents present on this layer are selectable by the user. Default is true</result>
          </documentation>
        </facet>
        <facet name="size" omissible="false" optional="true" type="point">
          <documentation>
            <result>the layer resize factor: {1,1} refers to the original size whereas {0.5,0.5} divides by 2 the height and the width of the layer. In case of a 3D layer, a 3D point can be used (note that {1,1} is equivalent to {1,1,0}, so a resize of a layer containing 3D objects with a 2D points will remove the elevation)</result>
          </documentation>
        </facet>
        <facet name="transparency" omissible="false" optional="true" type="float">
          <documentation>
            <result>the transparency rate of the agents (between 0 and 1, 1 means no transparency)</result>
          </documentation>
        </facet>
        <facet name="trace" omissible="false" optional="true" type="any type in [boolean, int]">
          <documentation>
            <result>Allows to aggregate the visualization of agents at each timestep on the display. Default is false. If set to an int value, only the last n-th steps will be visualized. If set to true, no limit of timesteps is applied.</result>
          </documentation>
        </facet>
        <facet name="fading" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Used in conjunction with 'trace:', allows to apply a fading effect to the previous traces. Default is false</result>
          </documentation>
        </facet>
        <facet name="species" omissible="true" optional="false" type="species">
          <documentation>
            <result>the species to be displayed</result>
          </documentation>
        </facet>
        <facet name="aspect" omissible="false" optional="true" type="an identifier">
          <documentation>
            <result>the name of the aspect that should be used to display the species</result>
          </documentation>
        </facet>
        <facet name="refresh" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>(openGL only) specify whether the display of the species is refreshed. (true by default, usefull in case of agents that do not move)</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>The `display_population` statement is used using the `species keyword`. It allows modeler to display all the agent of a given species in the current display. In particular, modeler can choose the aspect used to display them.</result>
        <seeAlso>
          <see id="display" />
          <see id="agents" />
          <see id="chart" />
          <see id="event" />
          <see id="graphics" />
          <see id="display_grid" />
          <see id="image" />
          <see id="overlay" />
          <see id="quadtree" />
          <see id="text" />
        </seeAlso>
        <usages>
          <usage descUsageElt="The general syntax is:">
            <examples>
              <example code="display my_display {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   species species_name [additional options];" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="Species can be superposed on the same plan (be careful with the order, the last one will be above all the others):">
            <examples>
              <example code="display my_display {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   species agent1 aspect: base;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   species agent2 aspect: base;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   species agent3 aspect: base;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="Each species layer can be placed at a different z value using the opengl display. position:{0,0,0} means the layer will be placed on the ground and position:{0,0,1} means it will be placed at an height equal to the maximum size of the environment.">
            <examples>
              <example code="display my_display type: opengl{" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   species agent1 aspect: base ;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   species agent2 aspect: base position:{0,0,0.5};" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   species agent3 aspect: base position:{0,0,1};" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>display</symbol>
          <symbol>display_population</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="capture" kind="Sequence of statements or action" name="capture" projectName="msi.gama.core">
      <facets>
        <facet name="target" omissible="true" optional="false" type="any type in [agent, container]">
          <documentation>
            <result>an expression that is evaluated as an agent or a list of the agent to be captured</result>
          </documentation>
        </facet>
        <facet name="as" omissible="false" optional="true" type="species">
          <documentation>
            <result>the species that the captured agent(s) will become, this is a micro-species of the calling agent's species</result>
          </documentation>
        </facet>
        <facet name="returns" omissible="false" optional="true" type="a new identifier">
          <documentation>
            <result>a list of the newly captured agent(s)</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>Allows an agent to capture other agent(s) as its micro-agent(s).</result>
        <seeAlso>
          <see id="release" />
        </seeAlso>
        <usages>
          <usage descUsageElt="The preliminary for an agent A to capture an agent B as its micro-agent is that the A's species must defined a micro-species which is a sub-species of B's species (cf. [Species161#Nesting_species Nesting species]).">
            <examples>
              <example code="species A {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="..." isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="species B {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="..." isExecutable="false" isTestOnly="false" test="false" />
              <example code="   species C parent: A {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   ..." isExecutable="false" isTestOnly="false" test="false" />
              <example code="   }" isExecutable="false" isTestOnly="false" test="false" />
              <example code="..." isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="To capture all &quot;A&quot; agents as &quot;C&quot; agents, we can ask an &quot;B&quot; agent to execute the following statement:">
            <examples>
              <example code="capture list(B) as: C;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="Deprecated writing:">
            <examples>
              <example code="capture target: list (B) as: C;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="create" kind="Sequence of statements or action" name="create" projectName="msi.gama.core">
      <facets>
        <facet name="species" omissible="true" optional="true" type="species">
          <documentation>
            <result>an expression that evaluates to a species, the species of created agents</result>
          </documentation>
        </facet>
        <facet name="returns" omissible="false" optional="true" type="a new identifier">
          <documentation>
            <result>a new temporary variable name containing the list of created agents (a lsit even if only one agent has been created)</result>
          </documentation>
        </facet>
        <facet name="from" omissible="false" optional="true" type="any type">
          <documentation>
            <result>an expression that evaluates to a localized entity, a list of localized entities, a string (the path of a shapefile, a .csv, a .asc or a OSM file) or a container returned by a request to a database</result>
          </documentation>
        </facet>
        <facet name="number" omissible="false" optional="true" type="int">
          <documentation>
            <result>an expression that evaluates to an int, the number of created agents</result>
          </documentation>
        </facet>
        <facet name="as" omissible="false" optional="true" type="species">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="with" omissible="false" optional="true" type="map">
          <documentation>
            <result>an expression that evaluates to a map, for each pair the key is a species attribute and the value the assigned value</result>
          </documentation>
        </facet>
        <facet name="header" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>an expression that evaluates to a boolean, when creating agents from csv file, specify whether the file header is loaded</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>Allows an agent to create `number` agents of species `species`, to create agents of species `species` from a shapefile or to create agents of species `species` from one or several localized entities (discretization of the localized entity geometries).</result>
        <usagesNoExample>
          <usage descUsageElt="If `number` equals 0 or species is not a species, the statement is ignored." />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="Its simple syntax to create `an_int` agents of species `a_species` is:">
            <examples>
              <example code="create a_species number: an_int;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="create species_of(self) number: 5 returns: list5Agents;" isExecutable="true" isTestOnly="false" test="true" />
              <example code="5" isExecutable="false" isTestOnly="false" test="false" type="list" var="list5Agents" />
            </examples>
          </usage>
          <usage descUsageElt="In GAML modelers can create agents of species `a_species  (with two attributes `type` and `nature` with types corresponding to the types of the shapefile attributes) from a shapefile `the_shapefile` while reading attributes 'TYPE_OCC' and 'NATURE' of the shapefile. One agent will be created by object contained in the shapefile:">
            <examples>
              <example code="create a_species from: the_shapefile with: [type:: 'TYPE_OCC', nature::'NATURE'];" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="In order to create agents from a .csv file, facet `header` can be used to specified whether we can use columns header:">
            <examples>
              <example code="create toto from: &quot;toto.csv&quot; header: true with:[att1::read(&quot;NAME&quot;), att2::read(&quot;TYPE&quot;)];" isExecutable="false" isTestOnly="false" test="false" />
              <example code="or" isExecutable="false" isTestOnly="false" test="false" />
              <example code="create toto from: &quot;toto.csv&quot; with:[att1::read(0), att2::read(1)]; //with read(int), the index of the column" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="Similarly to the creation from shapefile, modelers can create agents from a set of geometries. In this case, one agent per geometry will be created (with the geometry as shape)">
            <examples>
              <example code="create species_of(self) from: [square(4),circle(4)]; &#x9;// 2 agents have been created, with shapes respectively square(4) and circle(4)" isExecutable="true" isTestOnly="false" test="true" />
              <example code="create species_of(self) from: [square(4),circle(4)] returns: new_agt;" isExecutable="true" isTestOnly="true" test="true" />
              <example code="new_agt[0].shape" equals="square(4)" isExecutable="true" isTestOnly="true" test="true" type="geometry" />
              <example code="new_agt[1].shape" equals="circle(4)" isExecutable="true" isTestOnly="true" test="true" type="geometry" />
            </examples>
          </usage>
          <usage descUsageElt="Created agents are initialized following the rules of their species. If one wants to refer to them after the statement is executed, the returns keyword has to be defined: the agents created will then be referred to by the temporary variable it declares. For instance, the following statement creates 0 to 4 agents of the same species as the sender, and puts them in the temporary variable children for later use.">
            <examples>
              <example code="create species (self) number: rnd (4) returns: children;" isExecutable="true" isTestOnly="false" test="false" />
              <example code="ask children {" isExecutable="true" isTestOnly="false" test="true" />
              <example code="        // ..." isExecutable="true" isTestOnly="false" test="false" />
              <example code="}" isExecutable="true" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="If one wants to specify a special initialization sequence for the agents created, create provides the same possibilities as ask. This extended syntax is:">
            <examples>
              <example code="create a_species number: an_int {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="     [statements]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="The same rules as in ask apply. The only difference is that, for the agents created, the assignments of variables will bypass the initialization defined in species. For instance:">
            <examples>
              <example code="create species(self) number: rnd (4) returns: children {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="     set location &lt;- myself.location + {rnd (2), rnd (2)}; // tells the children to be initially located close to me" isExecutable="false" isTestOnly="false" test="false" />
              <example code="     set parent &lt;- myself; // tells the children that their parent is me (provided the variable parent is declared in this species) " isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="Desprecated uses: ">
            <examples>
              <example code="// Simple syntax" isExecutable="false" isTestOnly="false" test="false" />
              <example code="create species: a_species number: an_int;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="break" kind="Single statement" name="break" projectName="msi.gama.core">
      <documentation>
        <result>`break` allows to interrupt the current sequence of statements.</result>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="state" kind="Behavior" name="state" projectName="msi.gama.core">
      <facets>
        <facet name="initial" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>specifies whether the state is the initial one (default value = false)</result>
          </documentation>
        </facet>
        <facet name="final" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>specifies whether the state is a final one (i.e. there is no transition from this state to another state) (default value= false)</result>
          </documentation>
        </facet>
        <facet name="name" omissible="true" optional="false" type="an identifier">
          <documentation>
            <result>the identifier of the state</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>A state, like a reflex, can contains several statements that can be executed at each time step by the agent.</result>
        <seeAlso>
          <see id="enter" />
          <see id="exit" />
          <see id="transition" />
        </seeAlso>
        <usages>
          <usage descUsageElt="Here is an exemple integrating 2 states and the statements in the FSM architecture:">
            <examples>
              <example code="&#x9;state s_init initial: true {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;enter { write &quot;Enter in&quot; + state; }" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;&#x9;write &quot;Enter in&quot; + state;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;write state;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;transition to: s1 when: (cycle &gt; 2) {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;&#x9;write &quot;transition s_init -&gt; s1&quot;;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;exit {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;&#x9;write &quot;EXIT from &quot;+state;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;state s1 {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;enter {write 'Enter in '+state;}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;write state;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;exit {write 'EXIT from '+state;}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>fsm</symbol>
        </symbols>
        <kinds>
          <kind>Species</kind>
          <kind>Experiment</kind>
          <kind>Model</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="datalist" kind="Single statement" name="datalist" projectName="msi.gama.core">
      <facets>
        <facet name="value" omissible="false" optional="false" type="list">
          <documentation>
            <result>the values to display. Has to be a List of List. Each element can be a number (series/histogram) or a list with two values (XY chart)</result>
          </documentation>
        </facet>
        <facet name="legend" omissible="true" optional="true" type="list">
          <documentation>
            <result>the name of the series: a list of strings (can be a variable with dynamic names)</result>
          </documentation>
        </facet>
        <facet name="categoriesnames" omissible="false" optional="true" type="list">
          <documentation>
            <result>the name of categories (can be a variable with dynamic names)</result>
          </documentation>
        </facet>
        <facet name="inverse_series_categories" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>reverse the order of series/categories ([[1,2],[3,4],[5,6]] --&gt; [[1,3,5],[2,4,6]]. May be useful when it is easier to construct one list over the other.</result>
          </documentation>
        </facet>
        <facet name="marker" omissible="false" optional="true" type="boolean" />
        <facet name="line_visible" omissible="false" optional="true" type="boolean" />
        <facet name="fill" omissible="false" optional="true" type="boolean" />
        <facet name="color" omissible="false" optional="true" type="list">
          <documentation>
            <result>list of colors</result>
          </documentation>
        </facet>
        <facet name="style" omissible="false" optional="true" type="an identifier" values=", takes values in: {line, whisker, area, bar, dot, step, spline, stack, 3d, ring, exploded}">
          <documentation>
            <result>series style</result>
          </documentation>
        </facet>
      </facets>
      <inside>
        <symbols>
          <symbol>chart</symbol>
        </symbols>
        <kinds>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="agents" kind="Layer" name="agents" projectName="msi.gama.core">
      <facets>
        <facet name="value" omissible="false" optional="false" type="container">
          <documentation>
            <result>the set of agents to display</result>
          </documentation>
        </facet>
        <facet name="trace" omissible="false" optional="true" type="any type in [boolean, int]">
          <documentation>
            <result>Allows to aggregate the visualization of agents at each timestep on the display. Default is false. If set to an int value, only the last n-th steps will be visualized. If set to true, no limit of timesteps is applied.</result>
          </documentation>
        </facet>
        <facet name="selectable" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Indicates whether the agents present on this layer are selectable by the user. Default is true</result>
          </documentation>
        </facet>
        <facet name="fading" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Used in conjunction with 'trace:', allows to apply a fading effect to the previous traces. Default is false</result>
          </documentation>
        </facet>
        <facet name="position" omissible="false" optional="true" type="point">
          <documentation>
            <result>position of the upper-left corner of the layer. Note that if coordinates are in [0,1[, the position is relative to the size of the environment (e.g. {0.5,0.5} refers to the middle of the display) whereas it is absolute when coordinates are greter than 1. The position can only be a 3D point {0.5, 0.5, 0.5}, the last coordinate specifying the elevation of the layer.</result>
          </documentation>
        </facet>
        <facet name="size" omissible="false" optional="true" type="point">
          <documentation>
            <result>the layer resize factor: {1,1} refers to the original size whereas {0.5,0.5} divides by 2 the height and the width of the layer. In case of a 3D layer, a 3D point can be used (note that {1,1} is equivalent to {1,1,0}, so a resize of a layer containing 3D objects with a 2D points will remove the elevation)</result>
          </documentation>
        </facet>
        <facet name="transparency" omissible="false" optional="true" type="float">
          <documentation>
            <result>the transparency rate of the agents (between 0 and 1, 1 means no transparency)</result>
          </documentation>
        </facet>
        <facet name="name" omissible="true" optional="false" type="a label">
          <documentation>
            <result>identifier of the layer</result>
          </documentation>
        </facet>
        <facet name="focus" omissible="false" optional="true" type="agent">
          <documentation>
            <result>the agent on with will be focus the camera (it is dynamically computed)</result>
          </documentation>
        </facet>
        <facet name="aspect" omissible="false" optional="true" type="an identifier">
          <documentation>
            <result>the name of the aspect that should be used to display the species</result>
          </documentation>
        </facet>
        <facet name="refresh" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>(openGL only) specify whether the display of the species is refreshed. (true by default, useful in case of agents that do not move)</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>`agents` allows the modeler to display only the agents that fulfill a given condition.</result>
        <seeAlso>
          <see id="display" />
          <see id="chart" />
          <see id="event" />
          <see id="graphics" />
          <see id="display_grid" />
          <see id="image" />
          <see id="overlay" />
          <see id="quadtree" />
          <see id="display_population" />
          <see id="text" />
        </seeAlso>
        <usages>
          <usage descUsageElt="The general syntax is:">
            <examples>
              <example code="display my_display {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   agents layer_name value: expression [additional options];" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="For instance, in a segregation model, `agents` will only display unhappy agents:">
            <examples>
              <example code="display Segregation {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   agents agentDisappear value: people as list where (each.is_happy = false) aspect: with_group_color;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>display</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="aspect" kind="Behavior" name="aspect" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="true" type="an identifier">
          <documentation>
            <result>identifier of the aspect (it can be used in a display to identify which aspect should be used for the given species)</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>Aspect statement is used to define a way to draw the current agent. Several aspects can be defined in one species. It can use attributes to customize each agent's aspect. The aspect is evaluate for each agent each time it has to be displayed.</result>
        <usages>
          <usage descUsageElt="An example of use of the aspect statement:">
            <examples>
              <example code="species one_species {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;int a &lt;- rnd(10);" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;aspect aspect1 {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;if(a mod 2 = 0) { draw circle(a);}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;else {draw square(a);}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;draw text: &quot;a= &quot; + a color: #black size: 5;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Species</kind>
          <kind>Model</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="user_init" kind="Behavior" name="user_init" projectName="msi.gama.core">
      <facets>
        <facet name="initial" omissible="false" optional="true" type="boolean" />
        <facet name="name" omissible="true" optional="false" type="an identifier" />
      </facets>
      <documentation>
        <result>Used in the user control architecture, user_init is executed only once when the agent is created. It opens a special panel (if it contains user_commands statements). It is the equivalent to the init block in the basic agent architecture.</result>
        <seeAlso>
          <see id="user_command" />
          <see id="user_init" />
          <see id="user_input" />
        </seeAlso>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Species</kind>
          <kind>Experiment</kind>
          <kind>Model</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="ask" kind="Sequence of statements or action" name="ask" projectName="msi.gama.core">
      <facets>
        <facet name="target" omissible="true" optional="false" type="any type in [container, agent]">
          <documentation>
            <result>an expression that evaluates to an agent or a list of agents</result>
          </documentation>
        </facet>
        <facet name="as" omissible="false" optional="true" type="species">
          <documentation>
            <result>an expression that evaluates to a species</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>Allows an agent, the sender agent (that can be the [Sections161#global world agent]), to ask another (or other) agent(s) to perform a set of statements. If the value of the target facet is nil or empty, the statement is ignored.</result>
        <usagesNoExample>
          <usage descUsageElt="If the species of the receiver agent cannot be determined, it is possible to force it by casting the agent. Nothing happens if the agent cannot be casted to this species" />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="Ask  a set of receiver agents, stored in a container, to perform a block of statements. The block is evaluated in the context of the agents' species">
            <examples>
              <example code="ask ${receiver_agents} {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="     ${cursor}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="Ask  one agent to perform a block of statements. The block is evaluated in the context of the agent's species">
            <examples>
              <example code="ask ${one_agent} {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="     ${cursor}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="If the species of the receiver agent(s) cannot be determined, it is possible to force it using the `as` facet. An error is thrown if an agent is not a direct or undirect instance of this species">
            <examples>
              <example code="ask${receiver_agent(s)} as: ${a_species_expression} {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="     ${cursor}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="To ask a set of agents to do something only if they belong to a given species, the `of_species` operator can be used. If none of the agents belong to the species, nothing happens">
            <examples>
              <example code="ask ${receiver_agents} of_species ${species_name} {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="     ${cursor}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="Any statement can be declared in the block statements. All the statements will be evaluated in the context of the receiver agent(s), as if they were defined in their species, which means that an expression like `self` will represent the receiver agent and not the sender. If the sender needs to refer to itself, some of its own attributes (or temporary variables) within the block statements, it has to use the keyword `myself`.">
            <examples>
              <example code="species animal {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="    float energy &lt;- rnd (1000) min: 0.0 {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="    reflex when: energy &gt; 500 { // executed when the energy is above the given threshold" isExecutable="false" isTestOnly="false" test="false" />
              <example code="         list&lt;animal&gt; others &lt;- (animal at_distance 5); // find all the neighbouring animals in a radius of 5 meters" isExecutable="false" isTestOnly="false" test="false" />
              <example code="         float shared_energy  &lt;- (energy - 500) / length (others); // compute the amount of energy to share with each of them" isExecutable="false" isTestOnly="false" test="false" />
              <example code="         ask others { // no need to cast, since others has already been filtered to only include animals" isExecutable="false" isTestOnly="false" test="false" />
              <example code="              if (energy &lt; 500) { // refers to the energy of each animal in others" isExecutable="false" isTestOnly="false" test="false" />
              <example code="                   energy &lt;- energy + myself.shared_energy; // increases the energy of each animal" isExecutable="false" isTestOnly="false" test="false" />
              <example code="                   myself.energy &lt;- myself.energy - myself.shared_energy; // decreases the energy of the sender" isExecutable="false" isTestOnly="false" test="false" />
              <example code="              }" isExecutable="false" isTestOnly="false" test="false" />
              <example code="         }" isExecutable="false" isTestOnly="false" test="false" />
              <example code="    }" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>chart</symbol>
        </symbols>
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="user_panel" kind="Behavior" name="user_panel" projectName="msi.gama.core">
      <facets>
        <facet name="initial" omissible="false" optional="true" type="boolean" />
        <facet name="name" omissible="true" optional="false" type="an identifier" />
      </facets>
      <documentation>
        <result>It is the basic behavior of the user control architecture (it is similar to state for the FSM architecture). This user_panel translates, in the interface, in a semi-modal view that awaits the user to choose action buttons, change attributes of the controlled agent, etc. Each user_panel, like a state in FSM, can have a enter and exit sections, but it is only defined in terms of a set of user_commands which describe the different action buttons present in the panel.</result>
        <seeAlso>
          <see id="user_command" />
          <see id="user_init" />
          <see id="user_input" />
        </seeAlso>
        <usages>
          <usage descUsageElt="The general syntax is for example:">
            <examples>
              <example code="user_panel default initial: true {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;user_input 'Number' returns: number type: int &lt;- 10;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;ask (number among list(cells)){ do die; }" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;transition to: &quot;Advanced Control&quot; when: every (10);" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="false" isTestOnly="false" test="false" />
              <example code="user_panel &quot;Advanced Control&quot; {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;user_input &quot;Location&quot; returns: loc type: point &lt;- {0,0};" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;create cells number: 10 with: [location::loc];" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>fsm</symbol>
          <symbol>user_first</symbol>
          <symbol>user_last</symbol>
          <symbol>user_init</symbol>
          <symbol>user_only</symbol>
        </symbols>
        <kinds>
          <kind>Species</kind>
          <kind>Experiment</kind>
          <kind>Model</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="chart" kind="Layer" name="chart" projectName="msi.gama.core">
      <facets>
        <facet name="x_range" omissible="false" optional="true" type="any type in [float, int, point]">
          <documentation>
            <result>range of the x-axis. Can be a number (which will set the axis total range) or a point (which will set the min and max of the axis).</result>
          </documentation>
        </facet>
        <facet name="y_range" omissible="false" optional="true" type="any type in [float, int, point]">
          <documentation>
            <result>range of the y-axis. Can be a number (which will set the axis total range) or a point (which will set the min and max of the axis).</result>
          </documentation>
        </facet>
        <facet name="position" omissible="false" optional="true" type="point">
          <documentation>
            <result>position of the upper-left corner of the layer. Note that if coordinates are in [0,1[, the position is relative to the size of the environment (e.g. {0.5,0.5} refers to the middle of the display) whereas it is absolute when coordinates are greter than 1. The position can only be a 3D point {0.5, 0.5, 0.5}, the last coordinate specifying the elevation of the layer.</result>
          </documentation>
        </facet>
        <facet name="size" omissible="false" optional="true" type="point">
          <documentation>
            <result>the layer resize factor: {1,1} refers to the original size whereas {0.5,0.5} divides by 2 the height and the width of the layer. In case of a 3D layer, a 3D point can be used (note that {1,1} is equivalent to {1,1,0}, so a resize of a layer containing 3D objects with a 2D points will remove the elevation)</result>
          </documentation>
        </facet>
        <facet name="background" omissible="false" optional="true" type="rgb">
          <documentation>
            <result>the background color</result>
          </documentation>
        </facet>
        <facet name="timexseries" omissible="false" optional="true" type="list">
          <documentation>
            <result>for series charts, change the default time serie (simulation cycle) for an other value.</result>
          </documentation>
        </facet>
        <facet name="axes" omissible="false" optional="true" type="rgb">
          <documentation>
            <result>the axis color</result>
          </documentation>
        </facet>
        <facet name="type" omissible="false" optional="true" type="an identifier" values=", takes values in: {xy, scatter, histogram, series, pie, box_whisker}">
          <documentation>
            <result>the type of chart. It could be histogram, series, xy, pie or box whisker. The difference between series and xy is that the former adds an implicit x-axis that refers to the numbers of cycles, while the latter considers the first declaration of data to be its x-axis.</result>
          </documentation>
        </facet>
        <facet name="style" omissible="false" optional="true" type="an identifier" values=", takes values in: {exploded, 3d, stack, bar}" />
        <facet name="transparency" omissible="false" optional="true" type="float">
          <documentation>
            <result>the style of the chart</result>
          </documentation>
        </facet>
        <facet name="gap" omissible="false" optional="true" type="float" />
        <facet name="y_tick_unit" omissible="false" optional="true" type="float">
          <documentation>
            <result>the tick unit for the x-axis (distance between vertical lines and values bellow the axis).</result>
          </documentation>
        </facet>
        <facet name="x_tick_unit" omissible="false" optional="true" type="float">
          <documentation>
            <result>the tick unit for the y-axis (distance between horyzontal lines and values on the left of the axis).</result>
          </documentation>
        </facet>
        <facet name="name" omissible="true" optional="false" type="a label">
          <documentation>
            <result>the identifier of the chart layer</result>
          </documentation>
        </facet>
        <facet name="color" omissible="false" optional="true" type="rgb" />
        <facet name="tick_font" omissible="false" optional="true" type="string" />
        <facet name="tick_font_size" omissible="false" optional="true" type="int" />
        <facet name="tick_font_style" omissible="false" optional="true" type="an identifier" values=", takes values in: {plain, bold, italic}">
          <documentation>
            <result>the style used to display ticks</result>
          </documentation>
        </facet>
        <facet name="label_font" omissible="false" optional="true" type="string" />
        <facet name="label_font_size" omissible="false" optional="true" type="int" />
        <facet name="label_font_style" omissible="false" optional="true" type="an identifier" values=", takes values in: {plain, bold, italic}">
          <documentation>
            <result>the style used to display labels</result>
          </documentation>
        </facet>
        <facet name="legend_font" omissible="false" optional="true" type="string" />
        <facet name="legend_font_size" omissible="false" optional="true" type="int" />
        <facet name="legend_font_style" omissible="false" optional="true" type="an identifier" values=", takes values in: {plain, bold, italic}">
          <documentation>
            <result>the style used to display legend</result>
          </documentation>
        </facet>
        <facet name="title_font" omissible="false" optional="true" type="string" />
        <facet name="title_font_size" omissible="false" optional="true" type="int" />
        <facet name="title_font_style" omissible="false" optional="true" type="an identifier" values=", takes values in: {plain, bold, italic}">
          <documentation>
            <result>the style used to display titles</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>`chart` allows modeler to display a chart: this enables to display specific values of the model at each iteration. GAMA can display various chart types: time series (series), pie charts (pie) and histograms (histogram).</result>
        <seeAlso>
          <see id="display" />
          <see id="agents" />
          <see id="event" />
          <see id="graphics" />
          <see id="display_grid" />
          <see id="image" />
          <see id="overlay" />
          <see id="quadtree" />
          <see id="display_population" />
          <see id="text" />
        </seeAlso>
        <usages>
          <usage descUsageElt="The general syntax is:">
            <examples>
              <example code="display chart_display {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   chart &quot;chart name&quot; type: series [additional options] {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="      [Set of data, datalists statements]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   }" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>display</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="else" kind="Sequence of statements or action" name="else" projectName="msi.gama.core">
      <documentation>
        <result>This statement cannot be used alone</result>
        <seeAlso>
          <see id="if" />
        </seeAlso>
      </documentation>
      <inside>
        <symbols>
          <symbol>if</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="enter" kind="Sequence of statements or action" name="enter" projectName="msi.gama.core">
      <documentation>
        <result>In an FSM architecture, `enter` introduces a sequence of statements to execute upon entering a state.</result>
        <seeAlso>
          <see id="state" />
          <see id="exit" />
          <see id="transition" />
        </seeAlso>
        <usages>
          <usage descUsageElt="In the following example, at the step it enters into the state s_init, the message 'Enter in s_init' is displayed followed by the display of the state name:">
            <examples>
              <example code="&#x9;state s_init {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;enter { write &quot;Enter in&quot; + state; }" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;&#x9;write &quot;Enter in&quot; + state;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;write state;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>state</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="annealing" kind="Batch method" name="annealing" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="false" type="an identifier" />
        <facet name="temp_end" omissible="false" optional="true" type="float">
          <documentation>
            <result>final temperature</result>
          </documentation>
        </facet>
        <facet name="temp_decrease" omissible="false" optional="true" type="float">
          <documentation>
            <result>temperature decrease coefficient</result>
          </documentation>
        </facet>
        <facet name="temp_init" omissible="false" optional="true" type="float">
          <documentation>
            <result>initial temperature</result>
          </documentation>
        </facet>
        <facet name="nb_iter_cst_temp" omissible="false" optional="true" type="int">
          <documentation>
            <result>number of iterations per level of temperature</result>
          </documentation>
        </facet>
        <facet name="maximize" omissible="false" optional="true" type="float">
          <documentation>
            <result>the value the algorithm tries to maximize</result>
          </documentation>
        </facet>
        <facet name="minimize" omissible="false" optional="true" type="float">
          <documentation>
            <result>the value the algorithm tries to minimize</result>
          </documentation>
        </facet>
        <facet name="aggregation" omissible="false" optional="true" type="a label" values=", takes values in: {min, max}">
          <documentation>
            <result>the agregation method</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>This algorithm is an implementation of the Simulated Annealing algorithm. See the wikipedia article and [batch161 the batch dedicated page].</result>
        <usages>
          <usage descUsageElt="As other batch methods, the basic syntax of the annealing statement uses `method annealing` instead of the expected `annealing name: id` : ">
            <examples>
              <example code="method annealing [facet: value];" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="For example: ">
            <examples>
              <example code="method annealing temp_init: 100  temp_end: 1 temp_decrease: 0.5 nb_iter_cst_temp: 5 maximize: food_gathered;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Experiment</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="switch" kind="Sequence of statements or action" name="switch" projectName="msi.gama.core">
      <facets>
        <facet name="value" omissible="true" optional="false" type="any type">
          <documentation>
            <result>an expression</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>The "switch... match" statement is a powerful replacement for imbricated "if ... else ..." constructs. All the blocks that match are executed in the order they are defined. The block prefixed by default is executed only if none have matched (otherwise it is not).</result>
        <seeAlso>
          <see id="match" />
          <see id="default" />
          <see id="if" />
        </seeAlso>
        <usages>
          <usage descUsageElt="The prototypical syntax is as follows:">
            <examples>
              <example code="switch an_expression {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="        match value1 {...}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="        match_one [value1, value2, value3] {...}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="        match_between [value1, value2] {...}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="        default {...}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="Example:">
            <examples>
              <example code="switch 3 {" isExecutable="true" isTestOnly="false" test="false" />
              <example code="   match 1 {write &quot;Match 1&quot;; }" isExecutable="true" isTestOnly="false" test="false" />
              <example code="   match 2 {write &quot;Match 2&quot;; }" isExecutable="true" isTestOnly="false" test="false" />
              <example code="   match 3 {write &quot;Match 3&quot;; }" isExecutable="true" isTestOnly="false" test="false" />
              <example code="   match_one [4,4,6,3,7]  {write &quot;Match one_of&quot;; }" isExecutable="true" isTestOnly="false" test="false" />
              <example code="   match_between [2, 4] {write &quot;Match between&quot;; }" isExecutable="true" isTestOnly="false" test="false" />
              <example code="   default {write &quot;Match Default&quot;; }" isExecutable="true" isTestOnly="false" test="false" />
              <example code="}" isExecutable="true" isTestOnly="false" test="false" />
              <example code="string val1 &lt;- &quot;&quot;;" isExecutable="true" isTestOnly="true" test="false" />
              <example code="switch 1 {" isExecutable="true" isTestOnly="true" test="false" />
              <example code="   match 1 {val1 &lt;- val1 + &quot;1&quot;; }" isExecutable="true" isTestOnly="true" test="false" />
              <example code="   match 2 {val1 &lt;- val1 + &quot;2&quot;; }" isExecutable="true" isTestOnly="true" test="false" />
              <example code="   match_one [1,1,6,4,7]  {val1 &lt;- val1 + &quot;One_of&quot;; }" isExecutable="true" isTestOnly="true" test="false" />
              <example code="   match_between [2, 4] {val1 &lt;- val1 + &quot;Between&quot;; }" isExecutable="true" isTestOnly="true" test="false" />
              <example code="   default {val1 &lt;- val1 + &quot;Default&quot;; }" isExecutable="true" isTestOnly="true" test="false" />
              <example code="}" isExecutable="true" isTestOnly="true" test="false" />
              <example code="" equals="'1One_of'" isExecutable="true" isTestOnly="true" test="true" var="val1" />
              <example code="string val2 &lt;- &quot;&quot;;" isExecutable="true" isTestOnly="true" test="false" />
              <example code="switch 2 {" isExecutable="true" isTestOnly="true" test="false" />
              <example code="   match 1 {val2 &lt;- val2 + &quot;1&quot;; }" isExecutable="true" isTestOnly="true" test="false" />
              <example code="   match 2 {val2 &lt;- val2 + &quot;2&quot;; }" isExecutable="true" isTestOnly="true" test="false" />
              <example code="   match_one [1,1,6,4,7]  {val2 &lt;- val2 + &quot;One_of&quot;; }" isExecutable="true" isTestOnly="true" test="false" />
              <example code="   match_between [2, 4] {val2 &lt;- val2 + &quot;Between&quot;; }" isExecutable="true" isTestOnly="true" test="false" />
              <example code="   default {val2 &lt;- val2 + &quot;Default&quot;; }" isExecutable="true" isTestOnly="true" test="false" />
              <example code="}" isExecutable="true" isTestOnly="true" test="false" />
              <example code="" equals="'2Between'" isExecutable="true" isTestOnly="true" test="true" var="val2" />
              <example code="string val10 &lt;- &quot;&quot;;" isExecutable="true" isTestOnly="true" test="false" />
              <example code="switch 10 {" isExecutable="true" isTestOnly="true" test="false" />
              <example code="   match 1 {val10 &lt;- val10 + &quot;1&quot;; }" isExecutable="true" isTestOnly="true" test="false" />
              <example code="   match 2 {val10 &lt;- val10 + &quot;2&quot;; }" isExecutable="true" isTestOnly="true" test="false" />
              <example code="   match_one [1,1,6,4,7]  {val10 &lt;- val10 + &quot;One_of&quot;; }" isExecutable="true" isTestOnly="true" test="false" />
              <example code="   match_between [2, 4] {val10 &lt;- val10 + &quot;Between&quot;; }" isExecutable="true" isTestOnly="true" test="false" />
              <example code="   default {val10 &lt;- val10 + &quot;Default&quot;; }" isExecutable="true" isTestOnly="true" test="false" />
              <example code="}" isExecutable="true" isTestOnly="true" test="false" />
              <example code="" equals="'Default'" isExecutable="true" isTestOnly="true" test="true" var="val10" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
          <kind>Layer</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="match" kind="Sequence of statements or action" name="match" projectName="msi.gama.core">
      <facets>
        <facet name="value" omissible="true" optional="true" type="any type" />
      </facets>
      <documentation>
        <result>In a switch...match structure, the value of each match block is compared to the value in the switch. If they match, the embedded statement set is executed. Three kinds of match can be used</result>
        <seeAlso>
          <see id="switch" />
          <see id="default" />
        </seeAlso>
        <usages>
          <usage descUsageElt="match block is executed if the switch value is equals to the value of the match:">
            <examples>
              <example code="switch 3 {" isExecutable="true" isTestOnly="false" test="false" />
              <example code="   match 1 {write &quot;Match 1&quot;; }" isExecutable="true" isTestOnly="false" test="false" />
              <example code="   match 3 {write &quot;Match 2&quot;; }" isExecutable="true" isTestOnly="false" test="false" />
              <example code="}" isExecutable="true" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="match_between block is executed if the switch value is in the interval given in value of the match_between:">
            <examples>
              <example code="switch 3 {" isExecutable="true" isTestOnly="false" test="false" />
              <example code="   match_between [1,2] {write &quot;Match OK between [1,2]&quot;; }" isExecutable="true" isTestOnly="false" test="false" />
              <example code="   match_between [2,5] {write &quot;Match OK between [2,5]&quot;; }" isExecutable="true" isTestOnly="false" test="false" />
              <example code="}" isExecutable="true" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="match_one block is executed if the switch value is equals to one of the values of the match_one:">
            <examples>
              <example code="switch 3 {" isExecutable="true" isTestOnly="false" test="false" />
              <example code="   match_one [0,1,2] {write &quot;Match OK with one of [0,1,2]&quot;; }" isExecutable="true" isTestOnly="false" test="false" />
              <example code="   match_between [2,3,4,5] {write &quot;Match OK with one of [2,3,4,5]&quot;; }" isExecutable="true" isTestOnly="false" test="false" />
              <example code="}" isExecutable="true" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>switch</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="permanent" kind="Output" name="permanent" projectName="msi.gama.core">
      <documentation>
        <result>In a batch experiment, the permanent section allows to define an output block that will NOT be re-initialized at the beginning of each simulation but will be filled at the end of each simulation.</result>
        <usages>
          <usage descUsageElt="For instance, this permanent section will allow to display for each simulation the end value of the food_gathered variable:">
            <examples>
              <example code="permanent {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;display Ants background: rgb('white') refresh_every: 1 {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;chart &quot;Food Gathered&quot; type: series {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;&#x9;data &quot;Food&quot; value: food_gathered;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Experiment</kind>
        </kinds>
      </inside>
    </statement>
    <statement kind="Variable (container)" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="false" type="a new identifier">
          <documentation>
            <result>The name of the attribute</result>
          </documentation>
        </facet>
        <facet name="type" omissible="false" optional="true" type="a datatype identifier" />
        <facet name="init" omissible="false" optional="true" type="any type">
          <documentation>
            <result>The initial value of the attribute</result>
          </documentation>
        </facet>
        <facet name="value" omissible="false" optional="true" type="any type">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="update" omissible="false" optional="true" type="any type">
          <documentation>
            <result>An expression that will be evaluated each cycle to compute a new value for the attribute</result>
          </documentation>
        </facet>
        <facet name="function" omissible="false" optional="true" type="any type">
          <documentation>
            <result>Used to specify an expression that will be evaluated each time the attribute is accessed. This facet is incompatible with both 'init:' and 'update:'</result>
          </documentation>
        </facet>
        <facet name="const" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Indicates whether this attribute can be subsequently modified or not</result>
          </documentation>
        </facet>
        <facet name="category" omissible="false" optional="true" type="a label">
          <documentation>
            <result>Soon to be deprecated. Declare the parameter in an experiment instead</result>
          </documentation>
        </facet>
        <facet name="parameter" omissible="false" optional="true" type="a label">
          <documentation>
            <result>Soon to be deprecated. Declare the parameter in an experiment instead</result>
          </documentation>
        </facet>
        <facet name="size" omissible="false" optional="true" type="any type in [int, point]">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="of" omissible="false" optional="true" type="a datatype identifier" />
        <facet name="index" omissible="false" optional="true" type="a datatype identifier" />
        <facet name="fill_with" omissible="false" optional="true" type="any type">
          <documentation>
            <result />
          </documentation>
        </facet>
      </facets>
      <inside>
        <symbols />
        <kinds>
          <kind>Species</kind>
          <kind>Experiment</kind>
          <kind>Model</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="reflex" kind="Behavior" name="reflex" projectName="msi.gama.core">
      <facets>
        <facet name="when" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>an expression that evaluates a boolean, the condition to fulfill in order to execute the statements embedded in the reflex.</result>
          </documentation>
        </facet>
        <facet name="name" omissible="true" optional="true" type="an identifier">
          <documentation>
            <result>the identifier of the reflex</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>A reflex is a sequence of statements that can be executed, at each time step, by the agent. If no facet when: is defined, it will be executed every time step. If there is a when: facet, it is executed only if the boolean expression evaluates to true.</result>
        <usages>
          <usage descUsageElt="Example:">
            <examples>
              <example code="reflex my_reflex when: flip (0.5){ &#x9;&#x9;//Only executed when flip returns true" isExecutable="false" isTestOnly="false" test="false" />
              <example code="    write &quot;Executing the unconditional reflex&quot;;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Species</kind>
          <kind>Experiment</kind>
          <kind>Model</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="exit" kind="Sequence of statements or action" name="exit" projectName="msi.gama.core">
      <documentation>
        <result>In an FSM architecture, `exit` introduces a sequence of statements to execute right before exiting the state.</result>
        <seeAlso>
          <see id="enter" />
          <see id="state" />
          <see id="transition" />
        </seeAlso>
        <usages>
          <usage descUsageElt="In the following example, at the state it leaves the state s_init, he will display the message 'EXIT from s_init':">
            <examples>
              <example code="&#x9;state s_init initial: true {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;write state;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;transition to: s1 when: (cycle &gt; 2) {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;&#x9;write &quot;transition s_init -&gt; s1&quot;;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;exit {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;&#x9;write &quot;EXIT from &quot;+state;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>state</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="default" kind="Sequence of statements or action" name="default" projectName="msi.gama.core">
      <facets>
        <facet name="value" omissible="true" optional="true" type="any type" />
      </facets>
      <documentation>
        <result>Used in a switch match structure, the block prefixed by default is executed only if no other block has matched (otherwise it is not).</result>
        <seeAlso>
          <see id="switch" />
          <see id="match" />
        </seeAlso>
      </documentation>
      <inside>
        <symbols>
          <symbol>switch</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="error" kind="Single statement" name="error" projectName="msi.gama.core">
      <facets>
        <facet name="message" omissible="true" optional="false" type="string">
          <documentation>
            <result>the message to display in the error.</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>The statement makes the agent output an error dialog (if the simulation contains a user interface). Otherwise displays the error in the console.</result>
        <usages>
          <usage descUsageElt="Throwing an error">
            <examples>
              <example code="error 'This is an error raised by ' + self;" isExecutable="true" isTestOnly="false" test="true" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
          <kind>Layer</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="action" kind="Sequence of statements or action" name="action" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="false" type="an identifier">
          <documentation>
            <result>identifier of the action</result>
          </documentation>
        </facet>
        <facet name="type" omissible="false" optional="true" type="a datatype identifier">
          <documentation>
            <result>the action returned type</result>
          </documentation>
        </facet>
        <facet name="of" omissible="false" optional="true" type="a datatype identifier">
          <documentation>
            <result>if the action returns a container, the type of its elements</result>
          </documentation>
        </facet>
        <facet name="index" omissible="false" optional="true" type="a datatype identifier">
          <documentation>
            <result>if the action returns a map, the type of its keys</result>
          </documentation>
        </facet>
        <facet name="virtual" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>whether the action is virtual (defined without a set of instructions) (false by default)</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>Allows to define in a species, model or experiment a new action that can be called elsewhere.</result>
        <seeAlso>
          <see id="do" />
        </seeAlso>
        <usages>
          <usage descUsageElt="The simplest syntax to define an action that does not take any parameter and does not return anything is:">
            <examples>
              <example code="action simple_action {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   // [set of statements]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="If the action needs some parameters, they can be specified betwee, braquets after the identifier of the action:">
            <examples>
              <example code="action action_parameters(int i, string s){" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   // [set of statements using i and s]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="If the action returns any value, the returned type should be used instead of the &quot;action&quot; keyword. A return statement inside the body of the action statement is mandatory.">
            <examples>
              <example code="int action_return_val(int i, string s){" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   // [set of statements using i and s]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   return i + i;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="If virtual: is true, then the action is abstract, which means that the action is defined without body. A species containing at least one abstract action is abstract. Agents of this species cannot be created. The common use of an abstract action is to define an action that can be used by all its sub-species, which should redefine all abstract actions and implements its body.">
            <examples>
              <example code="species parent_species {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   int virtual_action(int i, string s);" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="false" isTestOnly="false" test="false" />
              <example code="species children parent: parent_species {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   int virtual_action(int i, string s) {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="      return i + i;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   }" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Species</kind>
          <kind>Experiment</kind>
          <kind>Model</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="let" kind="Single statement" name="let" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="false" type="a new identifier" />
        <facet name="value" omissible="false" optional="true" type="any type" />
        <facet name="of" omissible="false" optional="true" type="a datatype identifier" />
        <facet name="index" omissible="false" optional="true" type="a datatype identifier" />
        <facet name="type" omissible="false" optional="true" type="a datatype identifier" />
      </facets>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
          <kind>Layer</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="remove" kind="Single statement" name="remove" projectName="msi.gama.core">
      <facets>
        <facet name="item" omissible="true" optional="true" type="any type">
          <documentation>
            <result>any expression to remove from the container</result>
          </documentation>
        </facet>
        <facet name="from" omissible="false" optional="false" type="any type in [container, species, agent, geometry]">
          <documentation>
            <result>an expression that evaluates to a container</result>
          </documentation>
        </facet>
        <facet name="index" omissible="false" optional="true" type="any type">
          <documentation>
            <result>any expression, the key at which to remove the element from the container</result>
          </documentation>
        </facet>
        <facet name="edge" omissible="false" optional="true" type="any type">
          <documentation>
            <result>Indicates that the item to remove should be considered as an edge of the receiving graph. Soon to be deprecated, use 'remove edge(item)...' instead</result>
          </documentation>
        </facet>
        <facet name="vertex" omissible="false" optional="true" type="any type">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="node" omissible="false" optional="true" type="any type">
          <documentation>
            <result>Indicates that the item to remove should be considered as a node of the receiving graph. Soon to be deprecated, use 'remove node(item)...' instead</result>
          </documentation>
        </facet>
        <facet name="key" omissible="false" optional="true" type="any type">
          <documentation>
            <result>any expression, the key at which to remove the element from the container</result>
          </documentation>
        </facet>
        <facet name="all" omissible="false" optional="true" type="any type">
          <documentation>
            <result>an expression that evaluates to a container. If it is true and if the value a list, it removes the first instance of each element of the list. If it is true and the value is not a container, it will remove all instances of this value.</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>Allows the agent to remove an element from a container (a list, matrix, map...).</result>
        <seeAlso>
          <see id="add" />
          <see id="put" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="This statement can not be used on *matrix*." />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="This statement should be used in the following ways, depending on the kind of container used and the expected action on it:">
            <examples>
              <example code="remove expr from: expr_container;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="remove index: expr from: expr_container;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="remove key: expr from: expr_container;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="remove all: expr from: expr_container;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="In the case of list, the facet `item:` is used to remove the first occurence of a given expression, whereas `all` is used to remove all the occurences of the given expression.">
            <examples>
              <example code="list&lt;int&gt; removeList &lt;- [3,2,1,2,3];" isExecutable="true" isTestOnly="false" test="true" />
              <example code="remove 2 from: removeList;" equals="[3,1,2,3]" isExecutable="true" isTestOnly="false" test="true" type="null" var="removeList" />
              <example code="remove 3 all: true from: removeList;" equals="[1,2]" isExecutable="true" isTestOnly="false" test="true" type="null" var="removeList" />
              <example code="remove index: 1 from: removeList;" equals="[1]" isExecutable="true" isTestOnly="false" test="true" type="null" var="removeList" />
            </examples>
          </usage>
          <usage descUsageElt="In the case of map, the facet `key:` is used to remove the pair identified by the given key.">
            <examples>
              <example code="map&lt;string,int&gt; removeMap &lt;- [&quot;x&quot;::5, &quot;y&quot;::7, &quot;z&quot;::7];" isExecutable="true" isTestOnly="false" test="true" />
              <example code="remove key: &quot;x&quot; from: removeMap;" equals="[&quot;y&quot;::7, &quot;z&quot;::7]" isExecutable="true" isTestOnly="false" test="true" type="null" var="removeMap" />
              <example code="remove 7 all: true from: removeMap;" equals="map([])" isExecutable="true" isTestOnly="false" test="true" type="null" var="removeMap" />
            </examples>
          </usage>
          <usage descUsageElt="In addition, a map a be managed as a list with pair key as index. Given that, facets item:, all: and index: can be used in the same way:">
            <examples>
              <example code="map&lt;string,int&gt; removeMapList &lt;- [&quot;x&quot;::5, &quot;y&quot;::7, &quot;z&quot;::7, &quot;t&quot;::5];" isExecutable="true" isTestOnly="false" test="true" />
              <example code="remove 7 from: removeMapList;" equals="[&quot;x&quot;::5, &quot;z&quot;::7, &quot;t&quot;::5]" isExecutable="true" isTestOnly="false" test="true" type="null" var="removeMapList" />
              <example code="remove [5,7] all: true from: removeMapList;" equals="[&quot;t&quot;::5]" isExecutable="true" isTestOnly="false" test="true" type="null" var="removeMapList" />
              <example code="remove index: &quot;t&quot; from: removeMapList;" equals="map([])" isExecutable="true" isTestOnly="false" test="true" type="null" var="removeMapList" />
            </examples>
          </usage>
          <usage descUsageElt="In the case of a graph, both edges and nodes can be removes using node: and edge facets. If a node is removed, all edges to and from this node are also removed.">
            <examples>
              <example code="graph removeGraph &lt;- as_edge_graph([{1,2}::{3,4},{3,4}::{5,6}]);" isExecutable="true" isTestOnly="false" test="true" />
              <example code="remove node: {1,2} from: removeGraph;" isExecutable="true" isTestOnly="false" test="true" />
              <example code="remove node(1,2) from: removeGraph;" isExecutable="true" isTestOnly="false" test="true" />
              <example code="removeGraph.vertices" equals="[{3,4},{5,6}]" isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="removeGraph.edges" equals="[polyline({3,4}::{5,6})]" isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="remove edge: {3,4}::{5,6} from: removeGraph;" isExecutable="true" isTestOnly="false" test="true" />
              <example code="remove edge({3,4},{5,6}) from: removeGraph;" isExecutable="true" isTestOnly="false" test="true" />
              <example code="removeGraph.vertices" equals="[{3,4},{5,6}]" isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="removeGraph.edges" equals="[]" isExecutable="true" isTestOnly="false" test="true" type="list" />
            </examples>
          </usage>
          <usage descUsageElt="In the case of an agent or a shape, `remove` allows to remove an attribute from the attributes map of the receiver. However, for agents, it will only remove attributes that have been added dynamically, not the ones defined in the species or in its built-in parent.">
            <examples>
              <example code="global {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   init {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="      create speciesRemove;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="      speciesRemove sR &lt;- speciesRemove(0); &#x9;// sR.a now equals 100" isExecutable="false" isTestOnly="false" test="false" />
              <example code="      remove key:&quot;a&quot; from: sR; &#x9;// sR.a now equals nil" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   }" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="false" isTestOnly="false" test="false" />
              <example code="species speciesRemove {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   int a &lt;- 100; " isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>chart</symbol>
        </symbols>
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="task" kind="Behavior" name="task" projectName="msi.gama.core">
      <facets>
        <facet name="weight" omissible="false" optional="false" type="float">
          <documentation>
            <result>the priority level of the task</result>
          </documentation>
        </facet>
        <facet name="name" omissible="true" optional="false" type="an identifier">
          <documentation>
            <result>the identifier of the task</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>As reflex, a task is a sequence of statements that can be executed, at each time step, by the agent. If an agent owns several tasks, the scheduler chooses a task to execute based on its current priority weight value.</result>
      </documentation>
      <inside>
        <symbols>
          <symbol>weighted_tasks</symbol>
          <symbol>sorted_tasks</symbol>
          <symbol>probabilistic_tasks</symbol>
        </symbols>
        <kinds>
          <kind>Species</kind>
          <kind>Experiment</kind>
          <kind>Model</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="display" kind="Output" name="display" projectName="msi.gama.core">
      <facets>
        <facet name="background" omissible="false" optional="true" type="rgb">
          <documentation>
            <result>Allows to fill the background of the display with a specific color</result>
          </documentation>
        </facet>
        <facet name="name" omissible="true" optional="false" type="a label">
          <documentation>
            <result>the identifier of the display</result>
          </documentation>
        </facet>
        <facet name="focus" omissible="false" optional="true" type="geometry">
          <documentation>
            <result>the geometry (or agent) on which the displau will (dynamically) focus</result>
          </documentation>
        </facet>
        <facet name="type" omissible="false" optional="true" type="a label">
          <documentation>
            <result>Allows to use either Java2D (for planar models) or OpenGL (for 3D models) as the rendering subsystem</result>
          </documentation>
        </facet>
        <facet name="refresh_every" omissible="false" optional="true" type="int">
          <documentation>
            <result>Allows to refresh the display every n time steps (default is 1)</result>
          </documentation>
        </facet>
        <facet name="refresh" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Indicates the condition under which this output should be refreshed (default is true)</result>
          </documentation>
        </facet>
        <facet name="tesselation" omissible="false" optional="true" type="boolean">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="z_fighting" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Allows to alleviate a problem where agents at the same z would overlap each other in random ways</result>
          </documentation>
        </facet>
        <facet name="trace" omissible="false" optional="true" type="any type in [boolean, int]">
          <documentation>
            <result>Allows to aggregate the visualization of agents at each timestep on the display. Default is false. If set to an int value, only the last n-th steps will be visualized. If set to true, no limit of timesteps is applied. This facet can also be applied to individual layers</result>
          </documentation>
        </facet>
        <facet name="scale" omissible="false" optional="true" type="any type in [boolean, float]">
          <documentation>
            <result>Allows to display a scale bar in the overlay. Accepts true/false or an unit name</result>
          </documentation>
        </facet>
        <facet name="show_fps" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Allows to enable/disable the drawing of the number of frames per second</result>
          </documentation>
        </facet>
        <facet name="draw_env" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Allows to enable/disable the drawing of the world shape and the ordinate axes. Default can be configured in Preferences</result>
          </documentation>
        </facet>
        <facet name="orthographic_projection" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Allows to enable/disable the orthographic projection. Default can be configured in Preferences</result>
          </documentation>
        </facet>
        <facet name="ambient_light" omissible="false" optional="true" type="any type in [int, rgb]">
          <documentation>
            <result>Allows to define the value of the ambient light either using an int (ambient_light:(125)) or a rgb color ((ambient_light:rgb(255,255,255)). default is rgb(125,125,125)</result>
          </documentation>
        </facet>
        <facet name="diffuse_light" omissible="false" optional="true" type="any type in [int, rgb]">
          <documentation>
            <result>Allows to define the value of the diffuse light either using an int (diffuse_light:(125)) or a rgb color ((diffuse_light:rgb(255,255,255)). default is rgb(125,125,125)</result>
          </documentation>
        </facet>
        <facet name="diffuse_light_pos" omissible="false" optional="true" type="point">
          <documentation>
            <result>Allows to define the position of the diffuse light either using an point (diffuse_light_pos:{x,y,z}). default is {world.shape.width/2,world.shape.height/2,world.shape.width`*`2}</result>
          </documentation>
        </facet>
        <facet name="light" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Allows to enable/disable the light. Default is true</result>
          </documentation>
        </facet>
        <facet name="draw_diffuse_light" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Allows to enable/disable the drawing of the diffuse light. Default is false</result>
          </documentation>
        </facet>
        <facet name="camera_pos" omissible="false" optional="true" type="any type in [point, agent]">
          <documentation>
            <result>Allows to define the position of the camera</result>
          </documentation>
        </facet>
        <facet name="camera_look_pos" omissible="false" optional="true" type="point">
          <documentation>
            <result>Allows to define the direction of the camera</result>
          </documentation>
        </facet>
        <facet name="camera_up_vector" omissible="false" optional="true" type="point">
          <documentation>
            <result>Allows to define the orientation of the camera</result>
          </documentation>
        </facet>
        <facet name="polygonmode" omissible="false" optional="true" type="boolean">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="autosave" omissible="false" optional="true" type="any type in [boolean, point]">
          <documentation>
            <result>Allows to save this display on disk. A value of true/false will save it at a resolution of 500x500. A point can be passed to personalize these dimensions</result>
          </documentation>
        </facet>
        <facet name="output3D" omissible="false" optional="true" type="any type in [boolean, point]" />
      </facets>
      <documentation>
        <result>A display refers to a independent and mobile part of the interface that can display species, images, texts or charts.</result>
        <usages>
          <usage descUsageElt="The general syntax is:">
            <examples>
              <example code="display my_display [additional options] { ... }" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="Each display can include different layers (like in a GIS).">
            <examples>
              <example code="display gridWithElevationTriangulated type: opengl ambient_light: 100 {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;grid cell elevation: true triangulation: true;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;species people aspect: base;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>output</symbol>
          <symbol>permanent</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="set" kind="Single statement" name="set" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="false" type="any type">
          <documentation>
            <result>the name of an existin variable or attribute to be modified</result>
          </documentation>
        </facet>
        <facet name="value" omissible="false" optional="false" type="any type">
          <documentation>
            <result>the value to affect to the variable or attribute</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>Allows to assign a value to the variable or attribute specified</result>
        <usagesExamples>
          <usage>
            <examples>
              <example code="" isExecutable="true" isTestOnly="false" test="true" />
            </examples>
          </usage>
        </usagesExamples>
      </documentation>
      <inside>
        <symbols>
          <symbol>chart</symbol>
        </symbols>
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="genetic" kind="Batch method" name="genetic" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="false" type="an identifier" />
        <facet name="pop_dim" omissible="false" optional="true" type="int">
          <documentation>
            <result>size of the population (number of individual solutions)</result>
          </documentation>
        </facet>
        <facet name="crossover_prob" omissible="false" optional="true" type="float">
          <documentation>
            <result>crossover probability between two individual solutions</result>
          </documentation>
        </facet>
        <facet name="mutation_prob" omissible="false" optional="true" type="float">
          <documentation>
            <result>mutation probability for an individual solution</result>
          </documentation>
        </facet>
        <facet name="nb_prelim_gen" omissible="false" optional="true" type="int">
          <documentation>
            <result>number of random populations used to build the initial population</result>
          </documentation>
        </facet>
        <facet name="max_gen" omissible="false" optional="true" type="int">
          <documentation>
            <result>number of generations</result>
          </documentation>
        </facet>
        <facet name="maximize" omissible="false" optional="true" type="float">
          <documentation>
            <result>the value the algorithm tries to maximize</result>
          </documentation>
        </facet>
        <facet name="minimize" omissible="false" optional="true" type="float">
          <documentation>
            <result>the value the algorithm tries to minimize</result>
          </documentation>
        </facet>
        <facet name="aggregation" omissible="false" optional="true" type="a label" values=", takes values in: {min, max}">
          <documentation>
            <result>the agregation method</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>This is a simple implementation of Genetic Algorithms (GA). See the wikipedia article and [batch161 the batch dedicated page]. The principle of the GA is to search an optimal solution by applying evolution operators on an initial population of solutions. There are three types of evolution operators: crossover, mutation and selection. Different techniques can be applied for this selection. Most of them are based on the solution quality (fitness).</result>
        <usages>
          <usage descUsageElt="As other batch methods, the basic syntax of the `genetic` statement uses `method genetic` instead of the expected `genetic name: id` : ">
            <examples>
              <example code="method genetic [facet: value];" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="For example: ">
            <examples>
              <example code="method genetic maximize: food_gathered pop_dim: 5 crossover_prob: 0.7 mutation_prob: 0.1 nb_prelim_gen: 1 max_gen: 20; " isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Experiment</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="warn" kind="Single statement" name="warn" projectName="msi.gama.core">
      <facets>
        <facet name="message" omissible="true" optional="false" type="string">
          <documentation>
            <result>the message to display as a warning.</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>The statement makes the agent output an arbitrary message in the error view as a warning.</result>
        <usages>
          <usage descUsageElt="Emmitting a warning">
            <examples>
              <example code="warn 'This is a warning from ' + self;" isExecutable="true" isTestOnly="false" test="true" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
          <kind>Layer</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="tabu" kind="Batch method" name="tabu" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="false" type="an identifier" />
        <facet name="iter_max" omissible="false" optional="true" type="int">
          <documentation>
            <result>number of iterations</result>
          </documentation>
        </facet>
        <facet name="tabu_list_size" omissible="false" optional="true" type="int">
          <documentation>
            <result>size of the tabu list</result>
          </documentation>
        </facet>
        <facet name="maximize" omissible="false" optional="true" type="float">
          <documentation>
            <result>the value the algorithm tries to maximize</result>
          </documentation>
        </facet>
        <facet name="minimize" omissible="false" optional="true" type="float">
          <documentation>
            <result>the value the algorithm tries to minimize</result>
          </documentation>
        </facet>
        <facet name="aggregation" omissible="false" optional="true" type="a label" values=", takes values in: {min, max}">
          <documentation>
            <result>the agregation method</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>This algorithm is an implementation of the Tabu Search algorithm. See the wikipedia article and [batch161 the batch dedicated page].</result>
        <usages>
          <usage descUsageElt="As other batch methods, the basic syntax of the tabu statement uses `method tabu` instead of the expected `tabu name: id` : ">
            <examples>
              <example code="method tabu [facet: value];" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="For example: ">
            <examples>
              <example code="method tabu iter_max: 50 tabu_list_size: 5 maximize: food_gathered;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Experiment</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="signal" kind="Variable (signal)" name="signal" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="false" type="a new identifier">
          <documentation>
            <result>The name of the variable that will be introduced to represent this signal on the specified grid</result>
          </documentation>
        </facet>
        <facet name="type" omissible="false" optional="true" type="a datatype identifier" />
        <facet name="value" omissible="false" optional="true" type="any type">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="update" omissible="false" optional="true" type="any type">
          <documentation>
            <result>An expression that will be evaluated each cycle to update the value of the signal on each grid cell</result>
          </documentation>
        </facet>
        <facet name="environment" omissible="false" optional="true" type="species">
          <documentation>
            <result>The name of the grid species on which this signal will be propagated</result>
          </documentation>
        </facet>
        <facet name="on" omissible="false" optional="true" type="any type in [species, container]">
          <documentation>
            <result>Either the name of the grid species on which this signal will be propagated (equivalent to 'environment:'), or an expression that returns a subset of the cells of this grid species</result>
          </documentation>
        </facet>
        <facet name="decay" omissible="false" optional="false" type="float">
          <documentation>
            <result>represents the amount to remove to the intensity of a signal, once dropped on a place, at each time step. It is a percentage between 0 and 1. If 'decay' is not defined, the signal will not be wiped from the places; otherwise, its intensity will be equal to (intensity `*` decay).</result>
          </documentation>
        </facet>
        <facet name="propagation" omissible="false" optional="true" type="a label" values=", takes values in: {diffusion, gradient}">
          <documentation>
            <result>represents both the way the signal is propagated and the way to treat multiple propagations of the same signal occuring at once from different places. If propagation equals 'diffusion', the intensity of a signal is shared between its neighbours with respect to 'proportion', 'variation' and the number of neighbours of the environment places (4, 6 or 8). I.e., for a given signal S propagated from place P, the value transmitted to its N neighbours is : S' = (S / N / proportion) - variation. The intensity of S is then diminished by S `*` proportion on P. In a diffusion, the different signals of the same name see their intensities added to each other on each place. If propagation equals 'gradient', the original intensity is not modified, and each neighbours receives the intensity : S / proportion - variation. If multiple propagations occur at once, only the maximum intensity is kept on each place. If 'propagation' is not defined, it is assumed that it is equal to 'diffusion'.</result>
          </documentation>
        </facet>
        <facet name="proportion" omissible="false" optional="true" type="float">
          <documentation>
            <result>a value between 0 and 1 that represents the percentage of the intensity which will be shared between the neighbours in the diffusion. For instance, for an intensity of 80, and  a proportion of 0.5, in a 4-neighbours environment, each of the neighbouring places will receive an intensity of (80 `*` 0.5) / 4 = 10. If no 'proportion' is defined, it is assumed that the propagation corresponds to a diffusion where 100% of the intensity is equally divided between the neighbours. I.e., for an intensity of 100, and 4 neighbours per place, each of them receives a signal with an intensity of 25.</result>
          </documentation>
        </facet>
        <facet name="variation" omissible="false" optional="true" type="float">
          <documentation>
            <result>an absolute decrease of intensity that occurs between each place. It should be a positive number. However, negative numbers are allowed (be aware, in this case, that if no range is defined, the signal will certainly propagate in the whole environment). If no 'variation' is defined, it defaults to 1 in the case of a gradient type and 0 in the case of a diffusion.</result>
          </documentation>
        </facet>
        <facet name="range" omissible="false" optional="true" type="float">
          <documentation>
            <result>Indicates the distance (in meter) at which the signal stops propagating</result>
          </documentation>
        </facet>
        <facet name="among" omissible="false" optional="true" type="list" />
      </facets>
      <inside>
        <symbols />
        <kinds>
          <kind>Species</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="migrate" kind="Sequence of statements or action" name="migrate" projectName="msi.gama.core">
      <facets>
        <facet name="source" omissible="true" optional="false" type="an identifier">
          <documentation>
            <result>can be an agent, a list of agents, a agent's population to be migrated</result>
          </documentation>
        </facet>
        <facet name="target" omissible="false" optional="false" type="an identifier">
          <documentation>
            <result>target species/population that source agent(s) migrate to.</result>
          </documentation>
        </facet>
        <facet name="returns" omissible="false" optional="true" type="a new identifier">
          <documentation>
            <result>the list of returned agents in a new local variable</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>This command permits agents to migrate from one population/species to another population/species and stay in the same host after the migration. Species of source agents and target species respect the following constraints: (i) they are "peer" species (sharing the same direct macro-species), (ii) they have sub-species vs. parent-species relationship.</result>
        <seeAlso>
          <see id="capture" />
          <see id="release" />
        </seeAlso>
        <usages>
          <usage descUsageElt="It can be used in a 3-levels model, in case where individual agents can be captured into group meso agents and groups into clouds macro agents. migrate is used to allows agents captured by groups to migrate into clouds. See the model 'Balls, Groups and Clouds.gaml' in the library.">
            <examples>
              <example code="migrate ball_in_group target: ball_in_cloud;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="using" kind="Sequence of statements or action" name="using" projectName="msi.gama.core">
      <facets>
        <facet name="topology" omissible="true" optional="false" type="topology">
          <documentation>
            <result>the topology</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>`using` is a statement that allows to set the topology to use by its sub-statements. They can gather it by asking the scope to provide it.</result>
        <usages>
          <usage descUsageElt="All the spatial operations are topology-dependent (e.g. neighbors are not the same in a continuous and in a grid topology). So `using` statement allows modelers to specify the topology in which the spatial operation will be computed.">
            <examples>
              <example code="float dist &lt;- 0.0;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="using topology(grid_ant) {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;d (self.location distance_to target.location);" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>chart</symbol>
        </symbols>
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="add" kind="Single statement" name="add" projectName="msi.gama.core">
      <facets>
        <facet name="to" omissible="false" optional="false" type="any type in [container, species, agent, geometry]">
          <documentation>
            <result>an expression that evaluates to a container</result>
          </documentation>
        </facet>
        <facet name="item" omissible="true" optional="true" type="any type">
          <documentation>
            <result>any expression to add in the container</result>
          </documentation>
        </facet>
        <facet name="edge" omissible="false" optional="true" type="any type">
          <documentation>
            <result>a pair that will be added to a graph as an edge (if nodes do not exist, they are also added). Soon to be deprecated, please use 'add edge(..)' instead</result>
          </documentation>
        </facet>
        <facet name="vertex" omissible="false" optional="true" type="any type">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="node" omissible="false" optional="true" type="any type">
          <documentation>
            <result>an expression that will be added to a graph as a node. Soon to be deprecated, please use 'add node(...)' instead</result>
          </documentation>
        </facet>
        <facet name="at" omissible="false" optional="true" type="any type">
          <documentation>
            <result>position in the container of added element</result>
          </documentation>
        </facet>
        <facet name="all" omissible="false" optional="true" type="any type">
          <documentation>
            <result>Allows to either pass a container so as to add all its element, or 'true', if the item to add is already a container.</result>
          </documentation>
        </facet>
        <facet name="weight" omissible="false" optional="true" type="float" />
      </facets>
      <documentation>
        <result>Allows to add, i.e. to insert, a new element in a container (a list, matrix, map, ...).Incorrect use: The addition of a new element at a position out of the bounds of the container will produce a warning and let the container unmodified. If all: is specified, it has no effect if its argument is not a container, or if its argument is 'true' and the item to add is not a container. In that latter case</result>
        <seeAlso>
          <see id="put" />
          <see id="remove" />
        </seeAlso>
        <usagesNoExample>
          <usage descUsageElt="Case of a matrix: this statement can not be used on matrix. Please refer to the statement put." />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="The new element can be added either at the end of the container or at a particular position.">
            <examples>
              <example code="add expr to: expr_container;    // Add at the end" isExecutable="false" isTestOnly="false" test="false" />
              <example code="add expr at: expr to: expr_container;   // Add at position expr" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="Case of a list, the expression in the facet at: should be an integer.">
            <examples>
              <example code="list&lt;int&gt; workingList &lt;- [];" isExecutable="true" isTestOnly="false" test="true" />
              <example code="add 0 at: 0 to: workingList ;" equals="[0]" isExecutable="true" isTestOnly="false" test="true" type="null" var="workingList" />
              <example code="add 10 at: 0 to: workingList ;" equals="[10,0]" isExecutable="true" isTestOnly="false" test="true" type="null" var="workingList" />
              <example code="add 20 at: 2 to: workingList ;" equals="[10,0,20]" isExecutable="true" isTestOnly="false" test="true" type="null" var="workingList" />
              <example code="add 50 to: workingList;" equals="[10,0,20,50]" isExecutable="true" isTestOnly="false" test="true" type="null" var="workingList" />
              <example code="add [60,70] all: true to: workingList;" equals="[10,0,20,50,60,70]" isExecutable="true" isTestOnly="false" test="true" type="null" var="workingList" />
            </examples>
          </usage>
          <usage descUsageElt="Case of a map: As a map is basically a list of pairs key::value, we can also use the add statement on it. It is important to note that the behavior of the statement is slightly different, in particular in the use of the at facet, which denotes the key of the pair.">
            <examples>
              <example code="map&lt;string,string&gt; workingMap &lt;- [];" isExecutable="true" isTestOnly="false" test="true" />
              <example code="add &quot;val1&quot; at: &quot;x&quot; to: workingMap;" equals="[&quot;x&quot;::&quot;val1&quot;]" isExecutable="true" isTestOnly="false" test="true" type="null" var="workingMap" />
            </examples>
          </usage>
          <usage descUsageElt="If the at facet is ommitted, a pair expr_item::expr_item will be added to the map. An important exception is the case where the expr_item is a pair: in this case the pair is added.">
            <examples>
              <example code="add &quot;val2&quot; to: workingMap;" equals="[&quot;x&quot;::&quot;val1&quot;, &quot;val2&quot;::&quot;val2&quot;]" isExecutable="true" isTestOnly="false" test="true" type="null" var="workingMap" />
              <example code="add &quot;5&quot;::&quot;val4&quot; to: workingMap; " equals="[&quot;x&quot;::&quot;val1&quot;, &quot;val2&quot;::&quot;val2&quot;, &quot;5&quot;::&quot;val4&quot;]" isExecutable="true" isTestOnly="false" test="true" type="null" var="workingMap" />
            </examples>
          </usage>
          <usage descUsageElt="Notice that, as the key should be unique, the addition of an item at an existing position (i.e. existing key) will only modify the value associated with the given key.">
            <examples>
              <example code="add &quot;val3&quot; at: &quot;x&quot; to: workingMap;" equals="[&quot;x&quot;::&quot;val3&quot;, &quot;val2&quot;::&quot;val2&quot;, &quot;5&quot;::&quot;val4&quot;]" isExecutable="true" isTestOnly="false" test="true" type="null" var="workingMap" />
            </examples>
          </usage>
          <usage descUsageElt="On a map, the all facet will add all value of a container  in the map (so as pair val_cont::val_cont)">
            <examples>
              <example code="add [&quot;val4&quot;,&quot;val5&quot;] all: true at: &quot;x&quot; to: workingMap;" equals="[&quot;x&quot;::&quot;val3&quot;, &quot;val2&quot;::&quot;val2&quot;, &quot;5&quot;::&quot;val4&quot;,&quot;val4&quot;::&quot;val4&quot;,&quot;val5&quot;::&quot;val5&quot;]" isExecutable="true" isTestOnly="false" test="true" type="null" var="workingMap" />
            </examples>
          </usage>
          <usage descUsageElt="In case of a graph, we can use the facets `node`, `edge` and `weight` to add a node, an edge or weights to the graph. However, these facets are now considered as deprecated, and it is advised to use the various edge(), node(), edges(), nodes() operators, which can build the correct objects to add to the graph ">
            <examples>
              <example code="graph g &lt;- as_edge_graph([{1,5}::{12,45}]);" isExecutable="true" isTestOnly="false" test="true" />
              <example code="add edge: {1,5}::{2,3} to: g;" isExecutable="true" isTestOnly="false" test="true" />
              <example code="g.vertices" equals="[{1,5},{12,45},{2,3}]" isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="g.edges" equals="[polyline({1.0,5.0}::{12.0,45.0}),polyline({1.0,5.0}::{2.0,3.0})]" isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="add node: {5,5} to: g;" isExecutable="true" isTestOnly="false" test="true" />
              <example code="g.vertices" equals="[{1.0,5.0},{12.0,45.0},{2.0,3.0},{5.0,5.0}]" isExecutable="true" isTestOnly="false" test="true" type="list" />
              <example code="g.edges" equals="[polyline({1.0,5.0}::{12.0,45.0}),polyline({1.0,5.0}::{2.0,3.0})]" isExecutable="true" isTestOnly="false" test="true" type="list" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>chart</symbol>
        </symbols>
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="exhaustive" kind="Batch method" name="exhaustive" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="false" type="an identifier" />
        <facet name="maximize" omissible="false" optional="true" type="float">
          <documentation>
            <result>the value the algorithm tries to maximize</result>
          </documentation>
        </facet>
        <facet name="minimize" omissible="false" optional="true" type="float">
          <documentation>
            <result>the value the algorithm tries to minimize</result>
          </documentation>
        </facet>
        <facet name="aggregation" omissible="false" optional="true" type="a label" values=", takes values in: {min, max}">
          <documentation>
            <result>the agregation method</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>This is the standard batch method. The exhaustive mode is defined by default when there is no method element present in the batch section. It explores all the combination of parameter values in a sequential way. See [batch161 the batch dedicated page].</result>
        <usages>
          <usage descUsageElt="As other batch methods, the basic syntax of the exhaustive statement uses `method exhaustive` instead of the expected `exhaustive name: id` : ">
            <examples>
              <example code="method exhaustive [facet: value];" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="For example: ">
            <examples>
              <example code="method exhaustive maximize: food_gathered;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Experiment</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="output_file" kind="Output" name="output_file" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="false" type="an identifier" />
        <facet name="data" omissible="false" optional="false" type="string" />
        <facet name="refresh_every" omissible="false" optional="true" type="int">
          <documentation>
            <result>Allows to save the file every n time steps (default is 1)</result>
          </documentation>
        </facet>
        <facet name="refresh" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Indicates the condition under which this file should be saved (default is true)</result>
          </documentation>
        </facet>
        <facet name="header" omissible="false" optional="true" type="string" />
        <facet name="footer" omissible="false" optional="true" type="string" />
        <facet name="rewrite" omissible="false" optional="true" type="boolean" />
        <facet name="type" omissible="false" optional="true" type="an identifier" values=", takes values in: {csv, text, xml}" />
      </facets>
      <inside>
        <symbols>
          <symbol>output</symbol>
          <symbol>permanent</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="if" kind="Sequence of statements or action" name="if" projectName="msi.gama.core">
      <facets>
        <facet name="condition" omissible="true" optional="false" type="boolean">
          <documentation>
            <result>A boolean expression: the condition that is evaluated.</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>Allows the agent to execute a sequence of statements if and only if the condition evaluates to true.</result>
        <usages>
          <usage descUsageElt="The generic syntax is:">
            <examples>
              <example code="if bool_expr {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="    [statements]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="Optionally, the statements to execute when the condition evaluates to false can be defined in a following statement else. The syntax then becomes:">
            <examples>
              <example code="if bool_expr {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="    [statements]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="else {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="    [statements]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="string valTrue &lt;- &quot;&quot;;" isExecutable="true" isTestOnly="false" test="true" />
              <example code="if true {" isExecutable="true" isTestOnly="false" test="true" />
              <example code="&#x9;valTrue &lt;- &quot;true&quot;;" isExecutable="true" isTestOnly="false" test="true" />
              <example code="}" isExecutable="true" isTestOnly="false" test="true" />
              <example code="else {" isExecutable="true" isTestOnly="false" test="true" />
              <example code="&#x9;valTrue &lt;- &quot;false&quot;;" isExecutable="true" isTestOnly="false" test="true" />
              <example code="}" isExecutable="true" isTestOnly="false" test="true" />
              <example code="" equals="&quot;true&quot;" isExecutable="true" isTestOnly="false" test="true" var="valTrue" />
              <example code="string valFalse &lt;- &quot;&quot;;" isExecutable="true" isTestOnly="false" test="true" />
              <example code="if false {" isExecutable="true" isTestOnly="false" test="true" />
              <example code="&#x9;valFalse &lt;- &quot;true&quot;;" isExecutable="true" isTestOnly="false" test="true" />
              <example code="}" isExecutable="true" isTestOnly="false" test="true" />
              <example code="else {" isExecutable="true" isTestOnly="false" test="true" />
              <example code="&#x9;valFalse &lt;- &quot;false&quot;;" isExecutable="true" isTestOnly="false" test="true" />
              <example code="}" isExecutable="true" isTestOnly="false" test="true" />
              <example code="" equals="&quot;false&quot;" isExecutable="true" isTestOnly="false" test="true" var="valFalse" />
            </examples>
          </usage>
          <usage descUsageElt="ifs and elses can be imbricated as needed. For instance:">
            <examples>
              <example code="if bool_expr {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="    [statements]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="else if bool_expr2 {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="    [statements]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="else {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="    [statements]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
          <kind>Layer</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="return" kind="Single statement" name="return" projectName="msi.gama.core">
      <facets>
        <facet name="value" omissible="true" optional="true" type="any type">
          <documentation>
            <result>an expression that is returned</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>Allows to specify which value to return from the evaluation of the surrounding statement. Usually used within the declaration of an action. For more details about actions, see the following [Section161 section].</result>
        <usages>
          <usage descUsageElt="Contrary to other languages, using return does not stop the evaluation of the surrounding statement (for instance, a loop). It simply indicates what value to return: if it is inside a loop, then, only the last evaluation of return will be returned. Example:">
            <examples>
              <example code="string foo {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="     return &quot;foo&quot;;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="false" isTestOnly="false" test="false" />
              <example code="reflex {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="    string foo_result &lt;- foo(); &#x9;// foos_result is now equals to &quot;foo&quot;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="In the specific case one wants an agent to ask another agent to execute a statement with a return, it can be done similarly to:">
            <examples>
              <example code="// In Species A:" isExecutable="false" isTestOnly="false" test="false" />
              <example code="string foo_different {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="     return &quot;foo_not_same&quot;;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="/// ...." isExecutable="false" isTestOnly="false" test="false" />
              <example code="// In Species B:" isExecutable="false" isTestOnly="false" test="false" />
              <example code="reflex writing {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="    string temp &lt;- some_agent_A.foo_different []; &#x9;// temp is now equals to &quot;foo_not_same&quot; " isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>action</symbol>
        </symbols>
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="loop" kind="Sequence of statements or action" name="loop" projectName="msi.gama.core">
      <facets>
        <facet name="from" omissible="false" optional="true" type="int">
          <documentation>
            <result>an int expression</result>
          </documentation>
        </facet>
        <facet name="to" omissible="false" optional="true" type="int">
          <documentation>
            <result>an int expression</result>
          </documentation>
        </facet>
        <facet name="step" omissible="false" optional="true" type="int">
          <documentation>
            <result>an int expression</result>
          </documentation>
        </facet>
        <facet name="name" omissible="true" optional="true" type="a new identifier">
          <documentation>
            <result>a temporary variable name</result>
          </documentation>
        </facet>
        <facet name="over" omissible="false" optional="true" type="any type in [container, point]">
          <documentation>
            <result>a list, point, matrix or map expression</result>
          </documentation>
        </facet>
        <facet name="while" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>a boolean expression</result>
          </documentation>
        </facet>
        <facet name="times" omissible="false" optional="true" type="int">
          <documentation>
            <result>an int expression</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>Allows the agent to perform the same set of statements either a fixed number of times, or while a condition is true, or by progressing in a collection of elements or along an interval of integers. Be aware that there are no prevention of infinite loops. As a consequence, open loops should be used with caution, as one agent may block the execution of the whole model.</result>
        <usages>
          <usage descUsageElt="The basic syntax for repeating a fixed number of times a set of statements is:">
            <examples>
              <example code="loop times: an_int_expression {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="     // [statements]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="int sumTimes &lt;- 1;" isExecutable="true" isTestOnly="true" test="true" />
              <example code="loop times: 3 {sumTimes &lt;- sumTimes + sumTimes;}" isExecutable="true" isTestOnly="true" test="true" />
              <example code="" equals="8" isExecutable="true" isTestOnly="true" test="true" var="sumTimes" />
            </examples>
          </usage>
          <usage descUsageElt="The basic syntax for repeating a set of statements while a condition holds is:">
            <examples>
              <example code="loop while: a_bool_expression {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="     // [statements]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="int sumWhile &lt;- 1;" isExecutable="true" isTestOnly="true" test="true" />
              <example code="loop while: (sumWhile &lt; 5) {sumWhile &lt;- sumWhile + sumWhile;}" isExecutable="true" isTestOnly="true" test="true" />
              <example code="" equals="8" isExecutable="true" isTestOnly="true" test="true" var="sumWhile" />
            </examples>
          </usage>
          <usage descUsageElt="The basic syntax for repeating a set of statements by progressing over a container of a point is:">
            <examples>
              <example code="loop a_temp_var over: a_collection_expression {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="     // [statements]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="The basic syntax for repeating a set of statements while an index iterates over a range of values with a fixed step of 1 is:">
            <examples>
              <example code="loop a_temp_var from: int_expression_1 to: int_expression_2 {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="     // [statements]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="The incrementation step of the index can also be chosen:">
            <examples>
              <example code="loop a_temp_var from: int_expression_1 to: int_expression_2 step: int_expression3 {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="     // [statements]" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="int sumFor &lt;- 0;" isExecutable="true" isTestOnly="true" test="true" />
              <example code="loop i from: 10 to: 30 step: 10 {sumFor &lt;- sumFor + i;}" isExecutable="true" isTestOnly="true" test="true" />
              <example code="" equals="60" isExecutable="true" isTestOnly="true" test="true" var="sumFor" />
            </examples>
          </usage>
          <usage descUsageElt="In these latter three cases, the name facet designates the name of a temporary variable, whose scope is the loop, and that takes, in turn, the value of each of the element of the list (or each value in the interval). For example, in the first instance of the &quot;loop over&quot; syntax :">
            <examples>
              <example code="int a &lt;- 0;" isExecutable="true" isTestOnly="false" test="true" />
              <example code="loop i over: [10, 20, 30] {" isExecutable="true" isTestOnly="false" test="true" />
              <example code="     a &lt;- a + i;" isExecutable="true" isTestOnly="false" test="true" />
              <example code="} // a now equals 60" isExecutable="true" isTestOnly="false" test="true" />
              <example code="" equals="60" isExecutable="true" isTestOnly="true" test="true" var="a" />
            </examples>
          </usage>
          <usage descUsageElt="The second (quite common) case of the loop syntax allows one to use an interval of integers. The from and to facets take an integer expression as arguments, with the first (resp. the last) specifying the beginning (resp. end) of the inclusive interval (i.e. [to, from]). If the step is not defined, it is assumed to be equal to 1.">
            <examples>
              <example code="list the_list &lt;-list (species_of (self));" isExecutable="true" isTestOnly="false" test="true" />
              <example code="loop i from: 0 to: length (the_list) - 1 {" isExecutable="true" isTestOnly="false" test="true" />
              <example code="     ask the_list at i {" isExecutable="true" isTestOnly="false" test="true" />
              <example code="        // ..." isExecutable="true" isTestOnly="false" test="true" />
              <example code="     }" isExecutable="true" isTestOnly="false" test="true" />
              <example code="} // every  agent of the list is asked to do something" isExecutable="true" isTestOnly="false" test="true" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
          <kind>Layer</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="data" kind="Single statement" name="data" projectName="msi.gama.core">
      <facets>
        <facet name="value" omissible="false" optional="false" type="any type in [float, point, list]" />
        <facet name="name" omissible="false" optional="true" type="an identifier" />
        <facet name="legend" omissible="true" optional="true" type="string" />
        <facet name="color" omissible="false" optional="true" type="rgb" />
        <facet name="line_visible" omissible="false" optional="true" type="boolean" />
        <facet name="marker" omissible="false" optional="true" type="boolean" />
        <facet name="marker_shape" omissible="false" optional="true" type="an identifier" values=", takes values in: {marker_empty, marker_sqaure, marker_square, marker_up_triangle, marker_diamond, marker_hor_rectangle, marker_down_triangle, marker_hor_ellipse, marker_right_triangle, marker_vert_rectangle, marker_left_triangle}" />
        <facet name="fill" omissible="false" optional="true" type="boolean" />
        <facet name="style" omissible="false" optional="true" type="an identifier" values=", takes values in: {line, whisker, area, bar, dot, step, spline, stack, 3d, ring, exploded}" />
      </facets>
      <inside>
        <symbols>
          <symbol>chart</symbol>
        </symbols>
        <kinds>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="transition" kind="Sequence of statements or action" name="transition" projectName="msi.gama.core">
      <facets>
        <facet name="when" omissible="true" optional="true" type="boolean">
          <documentation>
            <result>a condition to be fulfilled to have a transition to another given state</result>
          </documentation>
        </facet>
        <facet name="to" omissible="false" optional="false" type="an identifier">
          <documentation>
            <result>the identifier of the next state</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>In an FSM architecture, `transition` specifies the next state of the life cycle. The transition occurs when the condition is fulfilled. The embedded statements are executed when the transition is triggered.</result>
        <seeAlso>
          <see id="enter" />
          <see id="state" />
          <see id="exit" />
        </seeAlso>
        <usages>
          <usage descUsageElt="In the following example, the transition is executed when after 2 steps:">
            <examples>
              <example code="&#x9;state s_init initial: true {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;write state;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;transition to: s1 when: (cycle &gt; 2) {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;&#x9;write &quot;transition s_init -&gt; s1&quot;;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;&#x9;}" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Sequence of statements or action</kind>
          <kind>Behavior</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="draw" kind="Single statement" name="draw" projectName="msi.gama.core">
      <facets>
        <facet name="geometry" omissible="true" optional="true" type="any type">
          <documentation>
            <result>any type of data (it can be geometry, image, text)</result>
          </documentation>
        </facet>
        <facet name="shape" omissible="false" optional="true" type="any type">
          <documentation>
            <result>the shape to display</result>
          </documentation>
        </facet>
        <facet name="text" omissible="false" optional="true" type="string">
          <documentation>
            <result>the text to draw</result>
          </documentation>
        </facet>
        <facet name="image" omissible="false" optional="true" type="string">
          <documentation>
            <result>path of the icon to draw (JPEG, PNG, GIF)</result>
          </documentation>
        </facet>
        <facet name="texture" omissible="false" optional="true" type="any type in [string, list]">
          <documentation>
            <result>the texture that should be applied to the geometry</result>
          </documentation>
        </facet>
        <facet name="empty" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>a condition specifying whether the geometry is empty or full</result>
          </documentation>
        </facet>
        <facet name="border" omissible="false" optional="true" type="any type in [rgb, boolean]">
          <documentation>
            <result>if used with a color, represents the color of the geometry border. If set to false, expresses that no border should be drawn. If not set, the borders will be drawn using the color of the geometry.</result>
          </documentation>
        </facet>
        <facet name="rounded" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>specify whether the geometry have to be rounded (e.g. for squares)</result>
          </documentation>
        </facet>
        <facet name="at" omissible="false" optional="true" type="point">
          <documentation>
            <result>location where the shape/text/icon is drawn</result>
          </documentation>
        </facet>
        <facet name="size" omissible="false" optional="true" type="float">
          <documentation>
            <result>size of the text/icon (not used in the context of the drawing of a geometry)</result>
          </documentation>
        </facet>
        <facet name="to" omissible="false" optional="true" type="point">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="color" omissible="false" optional="true" type="rgb">
          <documentation>
            <result>the color to use to display the text/icon/geometry</result>
          </documentation>
        </facet>
        <facet name="scale" omissible="false" optional="true" type="float">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="rotate" omissible="false" optional="true" type="any type in [float, int]">
          <documentation>
            <result>orientation of the shape/text/icon</result>
          </documentation>
        </facet>
        <facet name="font" omissible="false" optional="true" type="any type in [19, string]">
          <documentation>
            <result>the font used to draw the text</result>
          </documentation>
        </facet>
        <facet name="bitmap" omissible="false" optional="true" type="boolean">
          <documentation>
            <result />
          </documentation>
        </facet>
        <facet name="depth" omissible="false" optional="true" type="float">
          <documentation>
            <result>(only if the display type is opengl) Add a depth to the geometry previously defined (a line becomes a plan, a circle becomes a cylinder, a square becomes a cube, a polygon becomes a polyhedron with height equal to the depth value). Note: This only works if a the agent has not a point geometry</result>
          </documentation>
        </facet>
        <facet name="begin_arrow" omissible="false" optional="true" type="any type in [int, float]">
          <documentation>
            <result>the size of the arrow, located at the beginning of the drawn geometry</result>
          </documentation>
        </facet>
        <facet name="end_arrow" omissible="false" optional="true" type="any type in [int, float]">
          <documentation>
            <result>the size of the arrow, located at the end of the drawn geometry</result>
          </documentation>
        </facet>
        <facet name="style" omissible="false" optional="true" type="an identifier" values=", takes values in: {plain, bold, italic}">
          <documentation>
            <result>the style used to display text</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>`draw` is used in an aspect block to expresse how agents of the species will be drawn. It is evaluated each time the agent has to be drawn. It can also be used in the graphics block.</result>
        <usages>
          <usage descUsageElt="Any kind of geometry as any location can be drawn when displaying an agent (independently of his shape)">
            <examples>
              <example code="aspect geometryAspect {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;draw circle(1.0) empty: !hasFood color: #orange ;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="Image or text can also be drawn">
            <examples>
              <example code="aspect arrowAspect {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;draw &quot;Current state= &quot;+state at: location + {-3,1.5} color: #white font: font('Default', 12, #bold) ;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;draw file(ant_shape_full) rotate: heading at: location size: 5" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="Arrows can be drawn with any kind of geometry, using begin_arrow and end_arrow facets, combined with the empty: facet to specify whether it is plain or empty">
            <examples>
              <example code="aspect arrowAspect {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;draw line([{20, 20}, {40, 40}]) color: #black begin_arrow:5;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;draw line([{10, 10},{20, 50}, {40, 70}]) color: #green end_arrow: 2 begin_arrow: 2 empty: true;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="&#x9;draw square(10) at: {80,20} color: #purple begin_arrow: 2 empty: true;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>aspect</symbol>
        </symbols>
        <kinds>
          <kind>Sequence of statements or action</kind>
          <kind>Layer</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="quadtree" kind="Layer" name="quadtree" projectName="msi.gama.core">
      <facets>
        <facet name="position" omissible="false" optional="true" type="point">
          <documentation>
            <result>position of the upper-left corner of the layer. Note that if coordinates are in [0,1[, the position is relative to the size of the environment (e.g. {0.5,0.5} refers to the middle of the display) whereas it is absolute when coordinates are greter than 1. The position can only be a 3D point {0.5, 0.5, 0.5}, the last coordinate specifying the elevation of the layer.</result>
          </documentation>
        </facet>
        <facet name="size" omissible="false" optional="true" type="point">
          <documentation>
            <result>the layer resize factor: {1,1} refers to the original size whereas {0.5,0.5} divides by 2 the height and the width of the layer. In case of a 3D layer, a 3D point can be used (note that {1,1} is equivalent to {1,1,0}, so a resize of a layer containing 3D objects with a 2D points will remove the elevation)</result>
          </documentation>
        </facet>
        <facet name="transparency" omissible="false" optional="true" type="float">
          <documentation>
            <result>the transparency rate of the agents (between 0 and 1, 1 means no transparency)</result>
          </documentation>
        </facet>
        <facet name="name" omissible="true" optional="false" type="a label">
          <documentation>
            <result>identifier of the layer</result>
          </documentation>
        </facet>
        <facet name="refresh" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>(openGL only) specify whether the display of the species is refreshed. (true by default, usefull in case of agents that do not move)</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>`quadtree` allows the modeler to display the quadtree.</result>
        <seeAlso>
          <see id="display" />
          <see id="agents" />
          <see id="chart" />
          <see id="event" />
          <see id="graphics" />
          <see id="display_grid" />
          <see id="image" />
          <see id="overlay" />
          <see id="quadtree" />
          <see id="display_population" />
          <see id="text" />
        </seeAlso>
        <usages>
          <usage descUsageElt="The general syntax is:">
            <examples>
              <example code="display my_display {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   quadtree 'qt' position: { 0, 0.5 } size: quadrant_size;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>display</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="text" kind="Layer" name="text" projectName="msi.gama.core">
      <facets>
        <facet name="value" omissible="false" optional="true" type="string" />
        <facet name="position" omissible="false" optional="true" type="point">
          <documentation>
            <result>position of the upper-left corner of the layer. Note that if coordinates are in [0,1[, the position is relative to the size of the environment (e.g. {0.5,0.5} refers to the middle of the display) whereas it is absolute when coordinates are greter than 1. The position can only be a 3D point {0.5, 0.5, 0.5}, the last coordinate specifying the elevation of the layer.</result>
          </documentation>
        </facet>
        <facet name="size" omissible="false" optional="true" type="any type in [int, float, point]">
          <documentation>
            <result>the layer resize factor: {1,1} refers to the original size whereas {0.5,0.5} divides it by 2</result>
          </documentation>
        </facet>
        <facet name="transparency" omissible="false" optional="true" type="float">
          <documentation>
            <result>the transparency rate of the agents (between 0 and 1, 1 means no transparency)</result>
          </documentation>
        </facet>
        <facet name="style" omissible="false" optional="true" type="an identifier" values=", takes values in: {plain, bold, italic}">
          <documentation>
            <result>the style (bold, italic...) udes to display the text</result>
          </documentation>
        </facet>
        <facet name="name" omissible="true" optional="false" type="string">
          <documentation>
            <result>the string to display</result>
          </documentation>
        </facet>
        <facet name="font" omissible="false" optional="true" type="any type in [19, string]">
          <documentation>
            <result>the font used for the text</result>
          </documentation>
        </facet>
        <facet name="color" omissible="false" optional="true" type="rgb">
          <documentation>
            <result>the color used to display the text</result>
          </documentation>
        </facet>
        <facet name="refresh" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>(openGL only) specify whether the display of the text is refreshed. (true by default, usefull in case of text that is not been modified over simulation)</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>`text` allows the modeler to display a string (that can change at each step) in a given position of the display.</result>
        <seeAlso>
          <see id="display" />
          <see id="agents" />
          <see id="chart" />
          <see id="event" />
          <see id="graphics" />
          <see id="display_grid" />
          <see id="image" />
          <see id="overlay" />
          <see id="quadtree" />
          <see id="display_population" />
        </seeAlso>
        <usages>
          <usage descUsageElt="The general syntax is:">
            <examples>
              <example code="display my_display {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   text expression [additional options];" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="For instance, in a segregation model, `agents` will only display unhappy agents:">
            <examples>
              <example code="display Segregation {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="   text 'Carrying ants : ' + (int(ant as list count(each.has_food)) + int(ant as list count(each.state = 'followingRoad'))) position: {0.5,0.03} color: rgb('black') size: {1,0.02};" isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>display</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="monitor" kind="Output" name="monitor" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="false" type="a label">
          <documentation>
            <result>identifier of the monitor</result>
          </documentation>
        </facet>
        <facet name="refresh_every" omissible="false" optional="true" type="int">
          <documentation>
            <result>Allows to refresh the monitor every n time steps (default is 1)</result>
          </documentation>
        </facet>
        <facet name="refresh" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>Indicates the condition under which this output should be refreshed (default is true)</result>
          </documentation>
        </facet>
        <facet name="value" omissible="false" optional="false" type="any type">
          <documentation>
            <result>expression that will be evaluated to be displayed in the monitor</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>A monitor allows to follow the value of an arbitrary expression in GAML.</result>
        <usages>
          <usage descUsageElt="An example of use is:">
            <examples>
              <example code="monitor &quot;nb preys&quot; value: length(prey as list) refresh_every: 5;  " isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>output</symbol>
          <symbol>permanent</symbol>
        </symbols>
        <kinds />
      </inside>
    </statement>
    <statement id="save_batch" kind="Batch method" name="save_batch" projectName="msi.gama.core">
      <facets>
        <facet name="to" omissible="false" optional="false" type="a label" />
        <facet name="rewrite" omissible="false" optional="true" type="boolean" />
        <facet name="data" omissible="true" optional="true" type="any type" />
      </facets>
      <inside>
        <symbols />
        <kinds>
          <kind>Experiment</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="save" kind="Single statement" name="save" projectName="msi.gama.core">
      <facets>
        <facet name="type" omissible="false" optional="true" type="an identifier">
          <documentation>
            <result>an expression that evaluates to an string, the type of the output file (it can be only "shp", "text" or "csv")</result>
          </documentation>
        </facet>
        <facet name="data" omissible="true" optional="true" type="any type">
          <documentation>
            <result>any expression, that will be saved in the file</result>
          </documentation>
        </facet>
        <facet name="rewrite" omissible="false" optional="true" type="boolean">
          <documentation>
            <result>an expression that evaluates to a boolean, specifying whether the save will ecrase the file or append data at the end of it</result>
          </documentation>
        </facet>
        <facet name="to" omissible="false" optional="false" type="string">
          <documentation>
            <result>an expression that evaluates to an string, the path to the file</result>
          </documentation>
        </facet>
        <facet name="crs" omissible="false" optional="true" type="any type">
          <documentation>
            <result>the name of the projectsion, e.g. crs:"EPSG:4326" or its EPSG id, e.g. crs:4326. Here a list of the CRS codes (and EPSG id): http://spatialreference.org</result>
          </documentation>
        </facet>
        <facet name="with" omissible="false" optional="true" type="map">
          <documentation>
            <result />
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>Allows to save data in a file. The type of file can be "shp", "text" or "csv".</result>
        <usagesNoExample>
          <usage descUsageElt="The save statement can be use in an init block, a reflex, an action or in a user command. Do not use it in experiments." />
        </usagesNoExample>
        <usages>
          <usage descUsageElt="Its simple syntax is:">
            <examples>
              <example code="save data to: output_file type: a_type_file;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="To save data in a text file:">
            <examples>
              <example code="save (string(cycle) + &quot;-&gt;&quot;  + name + &quot;:&quot; + location) to: &quot;save_data.txt&quot; type: &quot;text&quot;;" isExecutable="true" isTestOnly="false" test="true" />
            </examples>
          </usage>
          <usage descUsageElt="To save the values of some attributes of the current agent in csv file:">
            <examples>
              <example code="save [name, location, host] to: &quot;save_data.csv&quot; type: &quot;csv&quot;;" isExecutable="true" isTestOnly="false" test="true" />
            </examples>
          </usage>
          <usage descUsageElt="To save the geometries of all the agents of a species into a shapefile (with optional attributes):">
            <examples>
              <example code="save species_of(self) to: &quot;save_shapefile.shp&quot; type: &quot;shp&quot; with: [name::&quot;nameAgent&quot;, location::&quot;locationAgent&quot;] crs: &quot;EPSG:4326&quot;;" isExecutable="true" isTestOnly="false" test="true" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="export" kind="Single statement" name="export" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="false" optional="true" type="string" />
        <facet name="var" omissible="true" optional="false" type="an identifier" />
        <facet name="framerate" omissible="false" optional="true" type="int" />
      </facets>
      <inside>
        <symbols />
        <kinds>
          <kind>Experiment</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="hill_climbing" kind="Batch method" name="hill_climbing" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="false" type="an identifier" />
        <facet name="iter_max" omissible="false" optional="true" type="int">
          <documentation>
            <result>number of iterations</result>
          </documentation>
        </facet>
        <facet name="maximize" omissible="false" optional="true" type="float">
          <documentation>
            <result>the value the algorithm tries to maximize</result>
          </documentation>
        </facet>
        <facet name="minimize" omissible="false" optional="true" type="float">
          <documentation>
            <result>the value the algorithm tries to minimize</result>
          </documentation>
        </facet>
        <facet name="aggregation" omissible="false" optional="true" type="a label" values=", takes values in: {min, max}">
          <documentation>
            <result>the agregation method</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>This algorithm is an implementation of the Hill Climbing algorithm. See the wikipedia article and [batch161 the batch dedicated page].</result>
        <usages>
          <usage descUsageElt="As other batch methods, the basic syntax of the `hill_climbing` statement uses `method hill_climbing` instead of the expected `hill_climbing name: id` : ">
            <examples>
              <example code="method hill_climbing [facet: value];" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="For example: ">
            <examples>
              <example code="method hill_climbing iter_max: 50 maximize : food_gathered; " isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Experiment</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="do" kind="Single statement" name="do" projectName="msi.gama.core">
      <facets>
        <facet name="action" omissible="true" optional="false" type="an identifier">
          <documentation>
            <result>the name of an action or a primitive</result>
          </documentation>
        </facet>
        <facet name="with" omissible="false" optional="true" type="map">
          <documentation>
            <result>a map expression containing the parameters of the action</result>
          </documentation>
        </facet>
        <facet name="internal_function" omissible="false" optional="true" type="any type" />
        <facet name="returns" omissible="false" optional="true" type="a new identifier">
          <documentation>
            <result>create a new variable and assign to it the result of the action</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>Allows the agent to execute an action or a primitive.  For a list of primitives available in every species, see this [BuiltIn161 page]; for the list of primitives defined by the different skills, see this [Skills161 page]. Finally, see this [Species161 page] to know how to declare custom actions.</result>
        <usages>
          <usage descUsageElt="The simple syntax (when the action does not expect any argument and the result is not to be kept) is:">
            <examples>
              <example code="do name_of_action_or_primitive;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="In case the action expects one or more arguments to be passed, they are defined by using facets (enclosed tags or a map are now deprecated):">
            <examples>
              <example code="do name_of_action_or_primitive arg1: expression1 arg2: expression2;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="In case the result of the action needs to be made available to the agent, the action can be called with the agent calling the action (`self` when the agent itself calls the action) instead of `do`; the result should be assigned to a temporary variable:">
            <examples>
              <example code="type_returned_by_action result &lt;- self name_of_action_or_primitive [];" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="In case of an action expecting arguments and returning a value, the following syntax is used:">
            <examples>
              <example code="type_returned_by_action result &lt;- self name_of_action_or_primitive [arg1::expression1, arg2::expression2];" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="Deprecated uses: following uses of the `do` statement (still accepted) are now deprecated:">
            <examples>
              <example code="// Simple syntax: " isExecutable="true" isTestOnly="false" test="true" />
              <example code="do action: name_of_action_or_primitive;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="true" isTestOnly="false" test="true" />
              <example code="// In case the result of the action needs to be made available to the agent, the `returns` keyword can be defined; the result will then be referred to by the temporary variable declared in this attribute:" isExecutable="true" isTestOnly="false" test="true" />
              <example code="do name_of_action_or_primitive returns: result;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="do name_of_action_or_primitive arg1: expression1 arg2: expression2 returns: result;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="type_returned_by_action result &lt;- name_of_action_or_primitive(self, [arg1::expression1, arg2::expression2]);" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="true" isTestOnly="false" test="true" />
              <example code="// In case the result of the action needs to be made available to the agent" isExecutable="true" isTestOnly="false" test="true" />
              <example code="let result &lt;- name_of_action_or_primitive(self, []);" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="true" isTestOnly="false" test="true" />
              <example code="// In case the action expects one or more arguments to be passed, they can also be defined by using enclosed `arg` statements, or the `with` facet with a map of parameters:" isExecutable="true" isTestOnly="false" test="true" />
              <example code="do name_of_action_or_primitive with: [arg1::expression1, arg2::expression2];" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="false" isTestOnly="false" test="false" />
              <example code="or" isExecutable="false" isTestOnly="false" test="false" />
              <example code="" isExecutable="false" isTestOnly="false" test="false" />
              <example code="do name_of_action_or_primitive {" isExecutable="false" isTestOnly="false" test="false" />
              <example code="     arg arg1 value: expression1;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="     arg arg2 value: expression2;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="     ..." isExecutable="false" isTestOnly="false" test="false" />
              <example code="}" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>chart</symbol>
        </symbols>
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="put" kind="Single statement" name="put" projectName="msi.gama.core">
      <facets>
        <facet name="at" omissible="false" optional="true" type="any type">
          <documentation>
            <result>any expression</result>
          </documentation>
        </facet>
        <facet name="key" omissible="false" optional="true" type="any type">
          <documentation>
            <result>any expression</result>
          </documentation>
        </facet>
        <facet name="all" omissible="false" optional="true" type="any type">
          <documentation>
            <result>any expression</result>
          </documentation>
        </facet>
        <facet name="item" omissible="true" optional="true" type="any type">
          <documentation>
            <result>any expression</result>
          </documentation>
        </facet>
        <facet name="edge" omissible="false" optional="true" type="any type">
          <documentation>
            <result>Indicates that the item to put should be considered as an edge of the receiving graph. Soon to be deprecated, use 'put edge(item)...' instead</result>
          </documentation>
        </facet>
        <facet name="weight" omissible="false" optional="true" type="float">
          <documentation>
            <result>an expression that evaluates to a float</result>
          </documentation>
        </facet>
        <facet name="in" omissible="false" optional="false" type="any type in [container, species, agent, geometry]">
          <documentation>
            <result>an expression that evaluates to a container</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>Allows the agent to replace a value in a container at a given position (in a list or a map) or for a given key (in a map). Note that the behavior and the type of the attributes depends on the specific kind of container.</result>
        <usages>
          <usage descUsageElt="The allowed parameters configurations are the following ones:">
            <examples>
              <example code="put expr at: expr in: expr_container;" isExecutable="false" isTestOnly="false" test="false" />
              <example code="put all: expr in: expr_container;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="In the case of a list, the position should an integer in the bound of the list. The facet all: is used to replace all the elements of the list by the given value.">
            <examples>
              <example code="[1,2,3,4,5]" equals="[1,2,3,4,5]" isExecutable="true" isTestOnly="false" test="true" type="list&lt;int&gt;" var="putList" />
              <example code="put -10 at: 1 in: putList;" equals="[1,-10,3,4,5]" isExecutable="true" isTestOnly="false" test="true" var="putList" />
              <example code="put 10 all: true in: putList;" equals="[10,10,10,10,10]" isExecutable="true" isTestOnly="false" test="true" var="putList" />
            </examples>
          </usage>
          <usage descUsageElt="In the case of a matrix, the position should be a point in the bound of the matrix. The facet all: is used to replace all the elements of the matrix by the given value.">
            <examples>
              <example code="matrix([[0,1],[2,3]])" equals="matrix([[0,1],[2,3]])" isExecutable="true" isTestOnly="false" test="true" type="matrix&lt;int&gt;" var="putMatrix" />
              <example code="put -10 at: {1,1} in: putMatrix;" equals="matrix([[0,1],[2,-10]])" isExecutable="true" isTestOnly="false" test="true" var="putMatrix" />
              <example code="put 10 all: true in: putMatrix;" equals="matrix([[10,10],[10,10]])" isExecutable="true" isTestOnly="false" test="true" var="putMatrix" />
            </examples>
          </usage>
          <usage descUsageElt="In the case of a map, the position should be one of the key values of the map. Notice that if the given key value does not exist in the map, the given pair key::value will be added to the map. The facet all is used to replace the value of all the pairs of the map.">
            <examples>
              <example code="[&quot;x&quot;::4,&quot;y&quot;::7]" equals="[&quot;x&quot;::4,&quot;y&quot;::7]" isExecutable="true" isTestOnly="false" test="true" type="map&lt;string,int&gt;" var="putMap" />
              <example code="put -10 key: &quot;y&quot; in: putMap;" equals="[&quot;x&quot;::4,&quot;y&quot;::-10]" isExecutable="true" isTestOnly="false" test="true" var="putMap" />
              <example code="put -20 key: &quot;z&quot; in: putMap;" equals="[&quot;x&quot;::4,&quot;y&quot;::-10, &quot;z&quot;::-20]" isExecutable="true" isTestOnly="false" test="true" var="putMap" />
              <example code="put -30 all: true in: putMap;" equals="[&quot;x&quot;::-30,&quot;y&quot;::-30, &quot;z&quot;::-30]" isExecutable="true" isTestOnly="false" test="true" var="putMap" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols>
          <symbol>chart</symbol>
        </symbols>
        <kinds>
          <kind>Behavior</kind>
          <kind>Sequence of statements or action</kind>
        </kinds>
      </inside>
    </statement>
    <statement id="reactive_tabu" kind="Batch method" name="reactive_tabu" projectName="msi.gama.core">
      <facets>
        <facet name="name" omissible="true" optional="false" type="an identifier" />
        <facet name="iter_max" omissible="false" optional="true" type="int">
          <documentation>
            <result>number of iterations</result>
          </documentation>
        </facet>
        <facet name="tabu_list_size_init" omissible="false" optional="true" type="int">
          <documentation>
            <result>initial size of the tabu list</result>
          </documentation>
        </facet>
        <facet name="tabu_list_size_max" omissible="false" optional="true" type="int">
          <documentation>
            <result>maximal size of the tabu list</result>
          </documentation>
        </facet>
        <facet name="tabu_list_size_min" omissible="false" optional="true" type="int">
          <documentation>
            <result>minimal size of the tabu list</result>
          </documentation>
        </facet>
        <facet name="nb_tests_wthout_col_max" omissible="false" optional="true" type="int">
          <documentation>
            <result>number of movements without collision before shortening the tabu list</result>
          </documentation>
        </facet>
        <facet name="cycle_size_max" omissible="false" optional="true" type="int">
          <documentation>
            <result>minimal size of the considered cycles</result>
          </documentation>
        </facet>
        <facet name="cycle_size_min" omissible="false" optional="true" type="int">
          <documentation>
            <result>maximal size of the considered cycles</result>
          </documentation>
        </facet>
        <facet name="maximize" omissible="false" optional="true" type="float">
          <documentation>
            <result>the value the algorithm tries to maximize</result>
          </documentation>
        </facet>
        <facet name="minimize" omissible="false" optional="true" type="float">
          <documentation>
            <result>the value the algorithm tries to minimize</result>
          </documentation>
        </facet>
        <facet name="aggregation" omissible="false" optional="true" type="a label" values=", takes values in: {min, max}">
          <documentation>
            <result>the agregation method</result>
          </documentation>
        </facet>
      </facets>
      <documentation>
        <result>This algorithm is a simple implementation of the Reactive Tabu Search algorithm ((Battiti et al., 1993)). This Reactive Tabu Search is an enhance version of the Tabu search. It adds two new elements to the classic Tabu Search. The first one concerns the size of the tabu list: in the Reactive Tabu Search, this one is not constant anymore but it dynamically evolves according to the context. Thus, when the exploration process visits too often the same solutions, the tabu list is extended in order to favor the diversification of the search process. On the other hand, when the process has not visited an already known solution for a high number of iterations, the tabu list is shortened in order to favor the intensification of the search process. The second new element concerns the adding of cycle detection capacities. Thus, when a cycle is detected, the process applies random movements in order to break the cycle. See [batch161 the batch dedicated page].</result>
        <usages>
          <usage descUsageElt="As other batch methods, the basic syntax of the reactive_tabu statement uses `method reactive_tabu` instead of the expected `reactive_tabu name: id` : ">
            <examples>
              <example code="method reactive_tabu [facet: value];" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
          <usage descUsageElt="For example: ">
            <examples>
              <example code="method reactive_tabu iter_max: 50 tabu_list_size_init: 5 tabu_list_size_min: 2 tabu_list_size_max: 10 nb_tests_wthout_col_max: 20 cycle_size_min: 2 cycle_size_max: 20 maximize: food_gathered;" isExecutable="false" isTestOnly="false" test="false" />
            </examples>
          </usage>
        </usages>
      </documentation>
      <inside>
        <symbols />
        <kinds>
          <kind>Experiment</kind>
        </kinds>
      </inside>
    </statement>
  </statements>
  <constantsCategories>
    <category id="Time units" />
    <category id="Graphics units" />
    <category id="Constants" />
    <category id="Length units" />
    <category id="Volume units" />
    <category id="Surface units" />
    <category id="Weight units" />
    <category id="Colors" />
  </constantsCategories>
  <constants>
    <constant altNames="#second,#seconds,#s" name="#sec" value="1.0" projectName="msi.gama.core">
      <categories>
        <category id="Time units" />
      </categories>
      <documentation>
        <result>second: the time basic unit</result>
      </documentation>
    </constant>
    <constant name="#bold" value="1" projectName="msi.gama.core">
      <categories>
        <category id="Graphics units" />
      </categories>
      <documentation>
        <result>This contant allows to build a font with a bold face. Can be combined with #italic</result>
      </documentation>
    </constant>
    <constant name="#min_float" value="4.9E-324" projectName="msi.gama.core">
      <categories>
        <category id="Constants" />
      </categories>
      <documentation>
        <result>A constant holding the smallest positive nonzero value of type float (Java Double.MIN_VALUE)</result>
      </documentation>
    </constant>
    <constant altNames="#centimeter,#centimeters" name="#cm" value="0.009999999776482582" projectName="msi.gama.core">
      <categories>
        <category id="Length units" />
      </categories>
    </constant>
    <constant name="#display_height" value="1.0" projectName="msi.gama.core">
      <categories>
        <category id="Graphics units" />
      </categories>
      <documentation>
        <result>This constant is only accessible in a graphical context: display, graphics...</result>
      </documentation>
    </constant>
    <constant altNames="#square_inch,#square_inches" name="#sqin" value="6.451599711591008E-4" projectName="msi.gama.core">
      <categories>
        <category id="Surface units" />
      </categories>
    </constant>
    <constant altNames="#px" name="#pixels" value="1.0" projectName="msi.gama.core">
      <categories>
        <category id="Graphics units" />
      </categories>
      <documentation>
        <result>This unit, only available when running aspects or declaring displays, can be obtained using the same approach, but returns a dynamic value instead of a fixed one. px (or pixels), returns the value of one pixel on the current view in terms of model units.</result>
      </documentation>
    </constant>
    <constant altNames="#millisecond,#milliseconds" name="#msec" value="0.001" projectName="msi.gama.core">
      <categories>
        <category id="Time units" />
      </categories>
    </constant>
    <constant altNames="#tons" name="#ton" value="1000.0" projectName="msi.gama.core">
      <categories>
        <category id="Weight units" />
      </categories>
    </constant>
    <constant altNames="#liter,#liters,#dm3" name="#l" value="0.001" projectName="msi.gama.core">
      <categories>
        <category id="Volume units" />
      </categories>
    </constant>
    <constant name="#nan" value="NaN" projectName="msi.gama.core">
      <categories>
        <category id="Constants" />
      </categories>
      <documentation>
        <result>A constant holding a Not-a-Number (NaN) value of type float (Java Double.POSITIVE_INFINITY)</result>
      </documentation>
    </constant>
    <constant name="#pi" value="3.141592653589793" projectName="msi.gama.core">
      <categories>
        <category id="Constants" />
      </categories>
      <documentation>
        <result>The PI constant</result>
      </documentation>
    </constant>
    <constant altNames="#centiliter,#centiliters" name="#cl" value="1.0E-5" projectName="msi.gama.core">
      <categories>
        <category id="Volume units" />
      </categories>
    </constant>
    <constant altNames="#feet,#ft" name="#foot" value="0.3047999931871891" projectName="msi.gama.core">
      <categories>
        <category id="Length units" />
      </categories>
    </constant>
    <constant name="#m2" value="1.0" projectName="msi.gama.core">
      <categories>
        <category id="Surface units" />
      </categories>
      <documentation>
        <result>square meter: the basic unit for surfaces</result>
      </documentation>
    </constant>
    <constant altNames="#square_mile,#square_miles" name="#sqmi" value="2589988.110336" projectName="msi.gama.core">
      <categories>
        <category id="Surface units" />
      </categories>
    </constant>
    <constant name="#max_int" value="2.147483647E9" projectName="msi.gama.core">
      <categories>
        <category id="Constants" />
      </categories>
      <documentation>
        <result>A constant holding the maximum value an int can have (Java Integer.MAX_VALUE)</result>
      </documentation>
    </constant>
    <constant name="#italic" value="2" projectName="msi.gama.core">
      <categories>
        <category id="Graphics units" />
      </categories>
      <documentation>
        <result>This contant allows to build a font with an italic face. Can be combined with #bold</result>
      </documentation>
    </constant>
    <constant altNames="#deciliter,#deciliters" name="#dl" value="1.0E-4" projectName="msi.gama.core">
      <categories>
        <category id="Volume units" />
      </categories>
    </constant>
    <constant altNames="#meter,#meters" name="#m" value="1.0" projectName="msi.gama.core">
      <categories>
        <category id="Length units" />
      </categories>
      <documentation>
        <result>meter: the length basic unit</result>
      </documentation>
    </constant>
    <constant altNames="#kilo,#kilogram,#kilos" name="#kg" value="1.0" projectName="msi.gama.core">
      <categories>
        <category id="Weight units" />
      </categories>
      <documentation>
        <result>second: the basic unit for weights</result>
      </documentation>
    </constant>
    <constant name="#e" value="2.718281828459045" projectName="msi.gama.core">
      <categories>
        <category id="Constants" />
      </categories>
      <documentation>
        <result>The e constant</result>
      </documentation>
    </constant>
    <constant altNames="#square_foot,#square_feet" name="#sqft" value="0.09290303584691051" projectName="msi.gama.core">
      <categories>
        <category id="Surface units" />
      </categories>
    </constant>
    <constant name="#max_float" value="1.7976931348623157E308" projectName="msi.gama.core">
      <categories>
        <category id="Constants" />
      </categories>
      <documentation>
        <result>A constant holding the largest positive finite value of type float (Java Double.MAX_VALUE)</result>
      </documentation>
    </constant>
    <constant altNames="#inches" name="#inch" value="0.025399999432265757" projectName="msi.gama.core">
      <categories>
        <category id="Length units" />
      </categories>
    </constant>
    <constant name="#m3" value="1.0" projectName="msi.gama.core">
      <categories>
        <category id="Volume units" />
      </categories>
      <documentation>
        <result>cube meter: the basic unit for volumes</result>
      </documentation>
    </constant>
    <constant name="#transparent" value="r=0, g=0, b=0, alpha=0" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#aliceblue" value="r=240, g=248, b=255, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#antiquewhite" value="r=250, g=235, b=215, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#aqua" value="r=0, g=255, b=255, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#aquamarine" value="r=127, g=255, b=212, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#azure" value="r=240, g=255, b=255, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#beige" value="r=245, g=245, b=220, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#bisque" value="r=255, g=228, b=196, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#black" value="r=0, g=0, b=0, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#blanchedalmond" value="r=255, g=235, b=205, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#blue" value="r=0, g=0, b=255, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#blueviolet" value="r=138, g=43, b=226, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#brown" value="r=165, g=42, b=42, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#burlywood" value="r=222, g=184, b=135, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#cadetblue" value="r=95, g=158, b=160, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#chartreuse" value="r=127, g=255, b=0, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#chocolate" value="r=210, g=105, b=30, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#coral" value="r=255, g=127, b=80, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#cornflowerblue" value="r=100, g=149, b=237, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#cornsilk" value="r=255, g=248, b=220, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#crimson" value="r=220, g=20, b=60, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#cyan" value="r=0, g=255, b=255, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darkblue" value="r=0, g=0, b=139, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darkcyan" value="r=0, g=139, b=139, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darkgoldenrod" value="r=184, g=134, b=11, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darkgray" value="r=169, g=169, b=169, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darkgreen" value="r=0, g=100, b=0, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darkgrey" value="r=169, g=169, b=169, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darkkhaki" value="r=189, g=183, b=107, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darkmagenta" value="r=139, g=0, b=139, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darkolivegreen" value="r=85, g=107, b=47, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darkorange" value="r=255, g=140, b=0, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darkorchid" value="r=153, g=50, b=204, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darkred" value="r=139, g=0, b=0, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darksalmon" value="r=233, g=150, b=122, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darkseagreen" value="r=143, g=188, b=143, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darkslateblue" value="r=72, g=61, b=139, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darkslategray" value="r=47, g=79, b=79, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darkslategrey" value="r=47, g=79, b=79, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darkturquoise" value="r=0, g=206, b=209, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#darkviolet" value="r=148, g=0, b=211, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#deeppink" value="r=255, g=20, b=147, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#deepskyblue" value="r=0, g=191, b=255, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#dimgray" value="r=105, g=105, b=105, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#dimgrey" value="r=105, g=105, b=105, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#dodgerblue" value="r=30, g=144, b=255, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#firebrick" value="r=178, g=34, b=34, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#floralwhite" value="r=255, g=250, b=240, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#forestgreen" value="r=34, g=139, b=34, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#fuchsia" value="r=255, g=0, b=255, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#gainsboro" value="r=220, g=220, b=220, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#ghostwhite" value="r=248, g=248, b=255, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#gold" value="r=255, g=215, b=0, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#goldenrod" value="r=218, g=165, b=32, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#gray" value="r=128, g=128, b=128, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#green" value="r=0, g=128, b=0, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#greenyellow" value="r=173, g=255, b=47, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#grey" value="r=128, g=128, b=128, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#honeydew" value="r=240, g=255, b=240, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#hotpink" value="r=255, g=105, b=180, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#indianred" value="r=205, g=92, b=92, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#indigo" value="r=75, g=0, b=130, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#ivory" value="r=255, g=255, b=240, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#khaki" value="r=240, g=230, b=140, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lavender" value="r=230, g=230, b=250, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lavenderblush" value="r=255, g=240, b=245, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lawngreen" value="r=124, g=252, b=0, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lemonchiffon" value="r=255, g=250, b=205, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lightblue" value="r=173, g=216, b=230, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lightcoral" value="r=240, g=128, b=128, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lightcyan" value="r=224, g=255, b=255, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lightgoldenrodyellow" value="r=250, g=250, b=210, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lightgray" value="r=211, g=211, b=211, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lightgreen" value="r=144, g=238, b=144, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lightgrey" value="r=211, g=211, b=211, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lightpink" value="r=255, g=182, b=193, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lightsalmon" value="r=255, g=160, b=122, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lightseagreen" value="r=32, g=178, b=170, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lightskyblue" value="r=135, g=206, b=250, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lightslategray" value="r=119, g=136, b=153, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lightslategrey" value="r=119, g=136, b=153, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lightsteelblue" value="r=176, g=196, b=222, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lightyellow" value="r=255, g=255, b=224, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#lime" value="r=0, g=255, b=0, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#limegreen" value="r=50, g=205, b=50, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#linen" value="r=250, g=240, b=230, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#magenta" value="r=255, g=0, b=255, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#maroon" value="r=128, g=0, b=0, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#mediumaquamarine" value="r=102, g=205, b=170, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#mediumblue" value="r=0, g=0, b=205, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#mediumorchid" value="r=186, g=85, b=211, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#mediumpurple" value="r=147, g=112, b=219, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#mediumseagreen" value="r=60, g=179, b=113, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#mediumslateblue" value="r=123, g=104, b=238, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#mediumspringgreen" value="r=0, g=250, b=154, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#mediumturquoise" value="r=72, g=209, b=204, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#mediumvioletred" value="r=199, g=21, b=133, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#midnightblue" value="r=25, g=25, b=112, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#mintcream" value="r=245, g=255, b=250, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#mistyrose" value="r=255, g=228, b=225, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#moccasin" value="r=255, g=228, b=181, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#navajowhite" value="r=255, g=222, b=173, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#navy" value="r=0, g=0, b=128, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#oldlace" value="r=253, g=245, b=230, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#olive" value="r=128, g=128, b=0, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#olivedrab" value="r=107, g=142, b=35, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#orange" value="r=255, g=165, b=0, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#orangered" value="r=255, g=69, b=0, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#orchid" value="r=218, g=112, b=214, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#palegoldenrod" value="r=238, g=232, b=170, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#palegreen" value="r=152, g=251, b=152, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#paleturquoise" value="r=175, g=238, b=238, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#palevioletred" value="r=219, g=112, b=147, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#papayawhip" value="r=255, g=239, b=213, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#peachpuff" value="r=255, g=218, b=185, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#peru" value="r=205, g=133, b=63, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#pink" value="r=255, g=192, b=203, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#plum" value="r=221, g=160, b=221, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#powderblue" value="r=176, g=224, b=230, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#purple" value="r=128, g=0, b=128, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#red" value="r=255, g=0, b=0, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#rosybrown" value="r=188, g=143, b=143, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#royalblue" value="r=65, g=105, b=225, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#saddlebrown" value="r=139, g=69, b=19, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#salmon" value="r=250, g=128, b=114, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#sandybrown" value="r=244, g=164, b=96, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#seagreen" value="r=46, g=139, b=87, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#seashell" value="r=255, g=245, b=238, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#sienna" value="r=160, g=82, b=45, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#silver" value="r=192, g=192, b=192, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#skyblue" value="r=135, g=206, b=235, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#slateblue" value="r=106, g=90, b=205, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#slategray" value="r=112, g=128, b=144, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#slategrey" value="r=112, g=128, b=144, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#snow" value="r=255, g=250, b=250, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#springgreen" value="r=0, g=255, b=127, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#steelblue" value="r=70, g=130, b=180, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#tan" value="r=210, g=180, b=140, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#teal" value="r=0, g=128, b=128, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#thistle" value="r=216, g=191, b=216, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#tomato" value="r=255, g=99, b=71, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#turquoise" value="r=64, g=224, b=208, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#violet" value="r=238, g=130, b=238, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#wheat" value="r=245, g=222, b=179, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#white" value="r=255, g=255, b=255, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#whitesmoke" value="r=245, g=245, b=245, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#yellow" value="r=255, g=255, b=0, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#yellowgreen" value="r=154, g=205, b=50, alpha=1" projectName="msi.gama.core">
      <categories>
        <category id="Colors" />
      </categories>
    </constant>
    <constant name="#infinity" value="Infinity" projectName="msi.gama.core">
      <categories>
        <category id="Constants" />
      </categories>
      <documentation>
        <result>A constant holding the positive infinity of type (Java Double.POSITIVE_INFINITY)</result>
      </documentation>
    </constant>
    <constant name="#min_int" value="-2.147483648E9" projectName="msi.gama.core">
      <categories>
        <category id="Constants" />
      </categories>
      <documentation>
        <result>A constant holding the minimum value an int can have (Java Integer.MIN_VALUE)</result>
      </documentation>
    </constant>
    <constant altNames="#hectoliter,#hectoliters" name="#hl" value="0.1" projectName="msi.gama.core">
      <categories>
        <category id="Volume units" />
      </categories>
    </constant>
    <constant altNames="#days,#day" name="#day" value="86400.0" projectName="msi.gama.core">
      <categories>
        <category id="Time units" />
      </categories>
    </constant>
    <constant altNames="#months" name="#month" value="2592000.0" projectName="msi.gama.core">
      <categories>
        <category id="Time units" />
      </categories>
      <documentation>
        <result>Note that 1 month equals 30 days and 1 year 360 days in these units</result>
      </documentation>
    </constant>
    <constant altNames="#miles" name="#mile" value="1609.344" projectName="msi.gama.core">
      <categories>
        <category id="Length units" />
      </categories>
    </constant>
    <constant altNames="#grams" name="#gram" value="0.001" projectName="msi.gama.core">
      <categories>
        <category id="Weight units" />
      </categories>
    </constant>
    <constant name="#plain" value="0" projectName="msi.gama.core">
      <categories>
        <category id="Graphics units" />
      </categories>
      <documentation>
        <result>This contant allows to build a font with a plain face</result>
      </documentation>
    </constant>
    <constant altNames="#hour,#hours" name="#h" value="3600.0" projectName="msi.gama.core">
      <categories>
        <category id="Time units" />
      </categories>
    </constant>
    <constant altNames="#yards" name="#yard" value="0.9144" projectName="msi.gama.core">
      <categories>
        <category id="Length units" />
      </categories>
    </constant>
    <constant altNames="#decimeter,#decimeters" name="#dm" value="0.10000000149011612" projectName="msi.gama.core">
      <categories>
        <category id="Length units" />
      </categories>
    </constant>
    <constant altNames="#lb,#poudns,#lbm" name="#pound" value="0.45359237" projectName="msi.gama.core">
      <categories>
        <category id="Weight units" />
      </categories>
    </constant>
    <constant altNames="#oz,#ounces" name="#ounce" value="0.028349523125" projectName="msi.gama.core">
      <categories>
        <category id="Weight units" />
      </categories>
    </constant>
    <constant altNames="#minutes,#mn" name="#minute" value="60.0" projectName="msi.gama.core">
      <categories>
        <category id="Time units" />
      </categories>
    </constant>
    <constant altNames="#kilometer,#kilometers" name="#km" value="1000.0" projectName="msi.gama.core">
      <categories>
        <category id="Length units" />
      </categories>
    </constant>
    <constant name="#display_width" value="1.0" projectName="msi.gama.core">
      <categories>
        <category id="Graphics units" />
      </categories>
      <documentation>
        <result>This constant is only accessible in a graphical context: display, graphics...</result>
      </documentation>
    </constant>
    <constant name="#to_deg" value="57.29577951308232" projectName="msi.gama.core">
      <categories>
        <category id="Constants" />
      </categories>
      <documentation>
        <result>A constant holding the value to convert radians into degrees</result>
      </documentation>
    </constant>
    <constant altNames="#milimeter,#milimeters" name="#mm" value="9.999999776482583E-4" projectName="msi.gama.core">
      <categories>
        <category id="Length units" />
      </categories>
    </constant>
    <constant altNames="#years,#y" name="#year" value="3.1104E7" projectName="msi.gama.core">
      <categories>
        <category id="Time units" />
      </categories>
      <documentation>
        <result>Note that 1 month equals 30 days and 1 year 360 days in these units</result>
      </documentation>
    </constant>
    <constant name="#to_rad" value="0.017453292519943295" projectName="msi.gama.core">
      <categories>
        <category id="Constants" />
      </categories>
      <documentation>
        <result>A constant holding the value to convert degrees into radians</result>
      </documentation>
    </constant>
  </constants>
  <insideStatementKinds>
    <insideStatementKind symbol="Behavior" />
    <insideStatementKind symbol="Sequence of statements or action" />
    <insideStatementKind symbol="Single statement" />
    <insideStatementKind symbol="Species" />
    <insideStatementKind symbol="Model" />
    <insideStatementKind symbol="Experiment" />
    <insideStatementKind symbol="Layer" />
    <insideStatementKind symbol="Environment" />
  </insideStatementKinds>
  <insideStatementSymbols>
    <insideStatementSymbol symbol="equation" />
    <insideStatementSymbol symbol="user_command" />
    <insideStatementSymbol symbol="chart" />
    <insideStatementSymbol symbol="output" />
    <insideStatementSymbol symbol="permanent" />
    <insideStatementSymbol symbol="display" />
    <insideStatementSymbol symbol="user_panel" />
    <insideStatementSymbol symbol="display_population" />
    <insideStatementSymbol symbol="fsm" />
    <insideStatementSymbol symbol="user_first" />
    <insideStatementSymbol symbol="user_last" />
    <insideStatementSymbol symbol="user_init" />
    <insideStatementSymbol symbol="user_only" />
    <insideStatementSymbol symbol="if" />
    <insideStatementSymbol symbol="state" />
    <insideStatementSymbol symbol="switch" />
    <insideStatementSymbol symbol="weighted_tasks" />
    <insideStatementSymbol symbol="sorted_tasks" />
    <insideStatementSymbol symbol="probabilistic_tasks" />
    <insideStatementSymbol symbol="action" />
    <insideStatementSymbol symbol="aspect" />
  </insideStatementSymbols>
  <statementsKinds>
    <kind symbol="Single statement" />
    <kind symbol="Sequence of statements or action" />
    <kind symbol="Behavior" />
    <kind symbol="Variable (number)" />
    <kind symbol="Output" />
    <kind symbol="Species" />
    <kind symbol="Layer" />
    <kind symbol="Experiment" />
    <kind symbol="Parameter" />
    <kind symbol="Variable (regular)" />
    <kind symbol="Batch method" />
    <kind symbol="Variable (container)" />
    <kind symbol="Variable (signal)" />
  </statementsKinds>
</doc>
